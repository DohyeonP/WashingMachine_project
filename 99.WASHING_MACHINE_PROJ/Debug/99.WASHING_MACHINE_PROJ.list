
99.WASHING_MACHINE_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7cc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac60  0800ac60  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac60  0800ac60  0001ac60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac68  0800ac68  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac68  0800ac68  0001ac68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac6c  0800ac6c  0001ac6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800ac70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          00000dd4  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f5c  20000f5c  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e385  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b5a  00000000  00000000  0003e53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  00042098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001840  00000000  00000000  00043a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005c4c  00000000  00000000  00045298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa2d  00000000  00000000  0004aee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee073  00000000  00000000  0006a911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158984  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007328  00000000  00000000  001589d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000188 	.word	0x20000188
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a964 	.word	0x0800a964

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000018c 	.word	0x2000018c
 80001ec:	0800a964 	.word	0x0800a964

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b974 	b.w	8000cdc <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	4604      	mov	r4, r0
 8000a14:	468e      	mov	lr, r1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d14d      	bne.n	8000ab6 <__udivmoddi4+0xaa>
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	d969      	bls.n	8000af4 <__udivmoddi4+0xe8>
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	b152      	cbz	r2, 8000a3c <__udivmoddi4+0x30>
 8000a26:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2a:	f1c2 0120 	rsb	r1, r2, #32
 8000a2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a36:	ea41 0e03 	orr.w	lr, r1, r3
 8000a3a:	4094      	lsls	r4, r2
 8000a3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a40:	0c21      	lsrs	r1, r4, #16
 8000a42:	fbbe f6f8 	udiv	r6, lr, r8
 8000a46:	fa1f f78c 	uxth.w	r7, ip
 8000a4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a52:	fb06 f107 	mul.w	r1, r6, r7
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d90a      	bls.n	8000a70 <__udivmoddi4+0x64>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a62:	f080 811f 	bcs.w	8000ca4 <__udivmoddi4+0x298>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 811c 	bls.w	8000ca4 <__udivmoddi4+0x298>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a78:	fb08 3310 	mls	r3, r8, r0, r3
 8000a7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a80:	fb00 f707 	mul.w	r7, r0, r7
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x92>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a90:	f080 810a 	bcs.w	8000ca8 <__udivmoddi4+0x29c>
 8000a94:	42a7      	cmp	r7, r4
 8000a96:	f240 8107 	bls.w	8000ca8 <__udivmoddi4+0x29c>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa2:	1be4      	subs	r4, r4, r7
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	b11d      	cbz	r5, 8000ab0 <__udivmoddi4+0xa4>
 8000aa8:	40d4      	lsrs	r4, r2
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d909      	bls.n	8000ace <__udivmoddi4+0xc2>
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	f000 80ef 	beq.w	8000c9e <__udivmoddi4+0x292>
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	fab3 f683 	clz	r6, r3
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d14a      	bne.n	8000b6c <__udivmoddi4+0x160>
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d302      	bcc.n	8000ae0 <__udivmoddi4+0xd4>
 8000ada:	4282      	cmp	r2, r0
 8000adc:	f200 80f9 	bhi.w	8000cd2 <__udivmoddi4+0x2c6>
 8000ae0:	1a84      	subs	r4, r0, r2
 8000ae2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	469e      	mov	lr, r3
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d0e0      	beq.n	8000ab0 <__udivmoddi4+0xa4>
 8000aee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000af2:	e7dd      	b.n	8000ab0 <__udivmoddi4+0xa4>
 8000af4:	b902      	cbnz	r2, 8000af8 <__udivmoddi4+0xec>
 8000af6:	deff      	udf	#255	; 0xff
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	f040 8092 	bne.w	8000c26 <__udivmoddi4+0x21a>
 8000b02:	eba1 010c 	sub.w	r1, r1, ip
 8000b06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0a:	fa1f fe8c 	uxth.w	lr, ip
 8000b0e:	2601      	movs	r6, #1
 8000b10:	0c20      	lsrs	r0, r4, #16
 8000b12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b16:	fb07 1113 	mls	r1, r7, r3, r1
 8000b1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b1e:	fb0e f003 	mul.w	r0, lr, r3
 8000b22:	4288      	cmp	r0, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x12c>
 8000b26:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x12a>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f200 80cb 	bhi.w	8000ccc <__udivmoddi4+0x2c0>
 8000b36:	4643      	mov	r3, r8
 8000b38:	1a09      	subs	r1, r1, r0
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b40:	fb07 1110 	mls	r1, r7, r0, r1
 8000b44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b48:	fb0e fe00 	mul.w	lr, lr, r0
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x156>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b58:	d202      	bcs.n	8000b60 <__udivmoddi4+0x154>
 8000b5a:	45a6      	cmp	lr, r4
 8000b5c:	f200 80bb 	bhi.w	8000cd6 <__udivmoddi4+0x2ca>
 8000b60:	4608      	mov	r0, r1
 8000b62:	eba4 040e 	sub.w	r4, r4, lr
 8000b66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b6a:	e79c      	b.n	8000aa6 <__udivmoddi4+0x9a>
 8000b6c:	f1c6 0720 	rsb	r7, r6, #32
 8000b70:	40b3      	lsls	r3, r6
 8000b72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b82:	431c      	orrs	r4, r3
 8000b84:	40f9      	lsrs	r1, r7
 8000b86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b92:	0c20      	lsrs	r0, r4, #16
 8000b94:	fa1f fe8c 	uxth.w	lr, ip
 8000b98:	fb09 1118 	mls	r1, r9, r8, r1
 8000b9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ba4:	4288      	cmp	r0, r1
 8000ba6:	fa02 f206 	lsl.w	r2, r2, r6
 8000baa:	d90b      	bls.n	8000bc4 <__udivmoddi4+0x1b8>
 8000bac:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bb4:	f080 8088 	bcs.w	8000cc8 <__udivmoddi4+0x2bc>
 8000bb8:	4288      	cmp	r0, r1
 8000bba:	f240 8085 	bls.w	8000cc8 <__udivmoddi4+0x2bc>
 8000bbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000bc2:	4461      	add	r1, ip
 8000bc4:	1a09      	subs	r1, r1, r0
 8000bc6:	b2a4      	uxth	r4, r4
 8000bc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd8:	458e      	cmp	lr, r1
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x1e2>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000be4:	d26c      	bcs.n	8000cc0 <__udivmoddi4+0x2b4>
 8000be6:	458e      	cmp	lr, r1
 8000be8:	d96a      	bls.n	8000cc0 <__udivmoddi4+0x2b4>
 8000bea:	3802      	subs	r0, #2
 8000bec:	4461      	add	r1, ip
 8000bee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bf6:	eba1 010e 	sub.w	r1, r1, lr
 8000bfa:	42a1      	cmp	r1, r4
 8000bfc:	46c8      	mov	r8, r9
 8000bfe:	46a6      	mov	lr, r4
 8000c00:	d356      	bcc.n	8000cb0 <__udivmoddi4+0x2a4>
 8000c02:	d053      	beq.n	8000cac <__udivmoddi4+0x2a0>
 8000c04:	b15d      	cbz	r5, 8000c1e <__udivmoddi4+0x212>
 8000c06:	ebb3 0208 	subs.w	r2, r3, r8
 8000c0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c12:	fa22 f306 	lsr.w	r3, r2, r6
 8000c16:	40f1      	lsrs	r1, r6
 8000c18:	431f      	orrs	r7, r3
 8000c1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c1e:	2600      	movs	r6, #0
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	f1c2 0320 	rsb	r3, r2, #32
 8000c2a:	40d8      	lsrs	r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	fa21 f303 	lsr.w	r3, r1, r3
 8000c34:	4091      	lsls	r1, r2
 8000c36:	4301      	orrs	r1, r0
 8000c38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c44:	fb07 3610 	mls	r6, r7, r0, r3
 8000c48:	0c0b      	lsrs	r3, r1, #16
 8000c4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c52:	429e      	cmp	r6, r3
 8000c54:	fa04 f402 	lsl.w	r4, r4, r2
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x260>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c62:	d22f      	bcs.n	8000cc4 <__udivmoddi4+0x2b8>
 8000c64:	429e      	cmp	r6, r3
 8000c66:	d92d      	bls.n	8000cc4 <__udivmoddi4+0x2b8>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	b289      	uxth	r1, r1
 8000c70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c74:	fb07 3316 	mls	r3, r7, r6, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x28a>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c8c:	d216      	bcs.n	8000cbc <__udivmoddi4+0x2b0>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d914      	bls.n	8000cbc <__udivmoddi4+0x2b0>
 8000c92:	3e02      	subs	r6, #2
 8000c94:	4461      	add	r1, ip
 8000c96:	1ac9      	subs	r1, r1, r3
 8000c98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c9c:	e738      	b.n	8000b10 <__udivmoddi4+0x104>
 8000c9e:	462e      	mov	r6, r5
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	e705      	b.n	8000ab0 <__udivmoddi4+0xa4>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	e6e3      	b.n	8000a70 <__udivmoddi4+0x64>
 8000ca8:	4618      	mov	r0, r3
 8000caa:	e6f8      	b.n	8000a9e <__udivmoddi4+0x92>
 8000cac:	454b      	cmp	r3, r9
 8000cae:	d2a9      	bcs.n	8000c04 <__udivmoddi4+0x1f8>
 8000cb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cb8:	3801      	subs	r0, #1
 8000cba:	e7a3      	b.n	8000c04 <__udivmoddi4+0x1f8>
 8000cbc:	4646      	mov	r6, r8
 8000cbe:	e7ea      	b.n	8000c96 <__udivmoddi4+0x28a>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	e794      	b.n	8000bee <__udivmoddi4+0x1e2>
 8000cc4:	4640      	mov	r0, r8
 8000cc6:	e7d1      	b.n	8000c6c <__udivmoddi4+0x260>
 8000cc8:	46d0      	mov	r8, sl
 8000cca:	e77b      	b.n	8000bc4 <__udivmoddi4+0x1b8>
 8000ccc:	3b02      	subs	r3, #2
 8000cce:	4461      	add	r1, ip
 8000cd0:	e732      	b.n	8000b38 <__udivmoddi4+0x12c>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e709      	b.n	8000aea <__udivmoddi4+0xde>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	e742      	b.n	8000b62 <__udivmoddi4+0x156>

08000cdc <__aeabi_idiv0>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <get_button>:
}

// get_button(gpio, pin, button)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 를 리턴
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state = HAL_GPIO_ReadPin(GPIO, GPIO_PIN); // 0 or 1
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f004 f99f 	bl	8005038 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73fb      	strb	r3, [r7, #15]

	// 버튼이 눌려졌으나 처음상태
	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10d      	bne.n	8000d20 <get_button+0x40>
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <get_button+0x6c>)
 8000d08:	5cd3      	ldrb	r3, [r2, r3]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d108      	bne.n	8000d20 <get_button+0x40>
	{
		HAL_Delay(80); // noise 가 지나가기를 기다린다.
 8000d0e:	2050      	movs	r0, #80	; 0x50
 8000d10:	f003 faf6 	bl	8004300 <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS; // 현재의 버튼 상태를 저장
 8000d14:	787b      	ldrb	r3, [r7, #1]
 8000d16:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <get_button+0x6c>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 버튼이 눌려진 상태이나 아직은 noise 상태로 인정
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e011      	b.n	8000d44 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d10d      	bne.n	8000d42 <get_button+0x62>
 8000d26:	787b      	ldrb	r3, [r7, #1]
 8000d28:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <get_button+0x6c>)
 8000d2a:	5cd3      	ldrb	r3, [r2, r3]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d108      	bne.n	8000d42 <get_button+0x62>
	{	// 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30); // noise 가 지나가기를 기다린다.
 8000d30:	201e      	movs	r0, #30
 8000d32:	f003 fae5 	bl	8004300 <HAL_Delay>
		button_status[button_number] = BUTTON_RELEASE; // button_status table 을 초기화 하고
 8000d36:	787b      	ldrb	r3, [r7, #1]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <get_button+0x6c>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS; // 버튼을 1번 눌렀다 뗀것으로 인정한다.
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <get_button+0x64>
	}

	return BUTTON_RELEASE;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000

08000d50 <noTone>:
	 10,10,10,10,10,10,7.5,7.5,7.5,
	 6,6,6,10,6,6,6,10
 };

 void noTone()
 {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
     htim5.Instance->CCR1=0;
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <noTone+0x18>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	635a      	str	r2, [r3, #52]	; 0x34
     HAL_Delay(50);
 8000d5c:	2032      	movs	r0, #50	; 0x32
 8000d5e:	f003 facf 	bl	8004300 <HAL_Delay>
 }
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000520 	.word	0x20000520

08000d6c <FND_update>:
		i %= 4;
	}
}

void FND_update(unsigned int value)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	FND[0] = FND_font[value % 10];
	FND[1] = FND_font[value / 10 % 10];
	FND[2] = FND_font[value / 100 % 10];
	FND[3] = FND_font[value / 1000 % 10];
#else // for washing_machine
	FND[2] = FND_font[value % 10];
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <FND_update+0x5c>)
 8000d78:	fba3 2301 	umull	r2, r3, r3, r1
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	1aca      	subs	r2, r1, r3
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <FND_update+0x60>)
 8000d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <FND_update+0x64>)
 8000d92:	809a      	strh	r2, [r3, #4]
	FND[3] = FND_font[value / 10 % 10];
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <FND_update+0x5c>)
 8000d98:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9c:	08d9      	lsrs	r1, r3, #3
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <FND_update+0x5c>)
 8000da0:	fba3 2301 	umull	r2, r3, r3, r1
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	1aca      	subs	r2, r1, r3
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <FND_update+0x60>)
 8000db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <FND_update+0x64>)
 8000dba:	80da      	strh	r2, [r3, #6]
#endif

	return;
 8000dbc:	bf00      	nop
}
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	cccccccd 	.word	0xcccccccd
 8000dcc:	200000ec 	.word	0x200000ec
 8000dd0:	200001a4 	.word	0x200001a4

08000dd4 <FND4digit_off>:

void FND4digit_off(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
#if 1 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000dde:	4808      	ldr	r0, [pc, #32]	; (8000e00 <FND4digit_off+0x2c>)
 8000de0:	f004 f942 	bl	8005068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <FND4digit_off+0x30>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <FND4digit_off+0x34>)
 8000df6:	f004 f937 	bl	8005068 <HAL_GPIO_WritePin>
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
#endif
	return;
 8000dfa:	bf00      	nop
}
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40020800 	.word	0x40020800
 8000e04:	200000ec 	.word	0x200000ec
 8000e08:	40020400 	.word	0x40020400

08000e0c <lcd_command>:
	}
#endif
}

void lcd_command(uint8_t command)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f023 030f 	bic.w	r3, r3, #15
 8000e1c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f043 030c 	orr.w	r3, r3, #12
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	f043 030c 	orr.w	r3, r3, #12
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000e42:	7bbb      	ldrb	r3, [r7, #14]
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000e4c:	bf00      	nop
 8000e4e:	f107 0208 	add.w	r2, r7, #8
 8000e52:	2364      	movs	r3, #100	; 0x64
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2304      	movs	r3, #4
 8000e58:	214e      	movs	r1, #78	; 0x4e
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <lcd_command+0x64>)
 8000e5c:	f004 fa7c 	bl	8005358 <HAL_I2C_Master_Transmit>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f3      	bne.n	8000e4e <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000e66:	bf00      	nop
}
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200003d4 	.word	0x200003d4

08000e74 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f023 030f 	bic.w	r3, r3, #15
 8000e84:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	f043 030d 	orr.w	r3, r3, #13
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	f043 0309 	orr.w	r3, r3, #9
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	f043 030d 	orr.w	r3, r3, #13
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	f043 0309 	orr.w	r3, r3, #9
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000eb4:	bf00      	nop
 8000eb6:	f107 0208 	add.w	r2, r7, #8
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	214e      	movs	r1, #78	; 0x4e
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <lcd_data+0x64>)
 8000ec4:	f004 fa48 	bl	8005358 <HAL_I2C_Master_Transmit>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f3      	bne.n	8000eb6 <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000ece:	bf00      	nop
}
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200003d4 	.word	0x200003d4

08000edc <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	lcd_command(0x33);
 8000ee0:	2033      	movs	r0, #51	; 0x33
 8000ee2:	f7ff ff93 	bl	8000e0c <lcd_command>
	lcd_command(0x32);
 8000ee6:	2032      	movs	r0, #50	; 0x32
 8000ee8:	f7ff ff90 	bl	8000e0c <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000eec:	2028      	movs	r0, #40	; 0x28
 8000eee:	f7ff ff8d 	bl	8000e0c <lcd_command>
	lcd_command(DISPLAY_ON);
 8000ef2:	200c      	movs	r0, #12
 8000ef4:	f7ff ff8a 	bl	8000e0c <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000ef8:	2006      	movs	r0, #6
 8000efa:	f7ff ff87 	bl	8000e0c <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff ff84 	bl	8000e0c <lcd_command>
	HAL_Delay(2);
 8000f04:	2002      	movs	r0, #2
 8000f06:	f003 f9fb 	bl	8004300 <HAL_Delay>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	while(*str)
 8000f16:	e006      	b.n	8000f26 <lcd_string+0x18>
	{
		lcd_data(*str++);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ffa7 	bl	8000e74 <lcd_data>
	while(*str)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f4      	bne.n	8000f18 <lcd_string+0xa>
	}
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	019b      	lsls	r3, r3, #6
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff56 	bl	8000e0c <lcd_command>
	return;
 8000f60:	bf00      	nop
}
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_SYSTIC_handler>:
//-----------------------//
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
void HAL_SYSTIC_handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	t1ms_count++; // 1ms timer
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_SYSTIC_handler+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_SYSTIC_handler+0x40>)
 8000f74:	6013      	str	r3, [r2, #0]
	fnd1ms_counter++;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_SYSTIC_handler+0x44>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_SYSTIC_handler+0x44>)
 8000f7e:	6013      	str	r3, [r2, #0]
	fnd1ms_counter_timer++; // 1ms fnd timer
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_SYSTIC_handler+0x48>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_SYSTIC_handler+0x48>)
 8000f88:	6013      	str	r3, [r2, #0]
	fnd1ms_counter_running++;
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_SYSTIC_handler+0x4c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_SYSTIC_handler+0x4c>)
 8000f92:	6013      	str	r3, [r2, #0]
	led_blink_counter_1ms++;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_SYSTIC_handler+0x50>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_SYSTIC_handler+0x50>)
 8000f9c:	6013      	str	r3, [r2, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000b90 	.word	0x20000b90
 8000fac:	20000bac 	.word	0x20000bac
 8000fb0:	20000bb0 	.word	0x20000bb0
 8000fb4:	20000bb4 	.word	0x20000bb4
 8000fb8:	20000b9c 	.word	0x20000b9c

08000fbc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000fc4:	1d39      	adds	r1, r7, #4
 8000fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <__io_putchar+0x20>)
 8000fce:	f007 fc6c 	bl	80088aa <HAL_UART_Transmit>

  return ch;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200005f8 	.word	0x200005f8

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */
// move from Driver/STM32F4xx_HAL_Driver/stm3f4xx_hal_tim.c to here
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d118      	bne.n	8001024 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		TIM10_10ms_ultrasonic++; // 초음?�� ?��?��
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ffa:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter++; // 10ms timer counter
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001004:	6013      	str	r3, [r2, #0]
		laundry_timer_counter_10ms++;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800100e:	6013      	str	r3, [r2, #0]
		rinsing_timer_counter_10ms++;
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001018:	6013      	str	r3, [r2, #0]
		dehydration_timer_counter_10ms++;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001022:	6013      	str	r3, [r2, #0]
	}
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40014400 	.word	0x40014400
 8001034:	20000b98 	.word	0x20000b98
 8001038:	20000b94 	.word	0x20000b94
 800103c:	20000ba0 	.word	0x20000ba0
 8001040:	20000ba4 	.word	0x20000ba4
 8001044:	20000ba8 	.word	0x20000ba8

08001048 <delay_us>:

void delay_us(unsigned long us)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	// H/W Register
	__HAL_TIM_SET_COUNTER(&htim11, 0); // timer 11 clear
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <delay_us+0x2c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us) {}
 8001058:	bf00      	nop
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <delay_us+0x2c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d8f9      	bhi.n	800105a <delay_us+0x12>
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	200005b0 	.word	0x200005b0

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f003 f8ce 	bl	800421c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f852 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 fc08 	bl	8001898 <MX_GPIO_Init>
  MX_ETH_Init();
 8001088:	f000 f8ba 	bl	8001200 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800108c:	f000 fb82 	bl	8001794 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001090:	f000 fbd4 	bl	800183c <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8001094:	f000 fba8 	bl	80017e8 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001098:	f000 fb34 	bl	8001704 <MX_TIM10_Init>
  MX_TIM11_Init();
 800109c:	f000 fb56 	bl	800174c <MX_TIM11_Init>
  MX_TIM3_Init();
 80010a0:	f000 f9f0 	bl	8001484 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010a4:	f000 f8fa 	bl	800129c <MX_I2C1_Init>
  MX_TIM4_Init();
 80010a8:	f000 fa40 	bl	800152c <MX_TIM4_Init>
  MX_TIM2_Init();
 80010ac:	f000 f990 	bl	80013d0 <MX_TIM2_Init>
  MX_RTC_Init();
 80010b0:	f000 f934 	bl	800131c <MX_RTC_Init>
  MX_TIM5_Init();
 80010b4:	f000 fab0 	bl	8001618 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);	// ADD_Dohyeon_1011
 80010b8:	4812      	ldr	r0, [pc, #72]	; (8001104 <main+0x8c>)
 80010ba:	f005 fec9 	bl	8006e50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);	// ADD_Dohyeon_1011
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <main+0x90>)
 80010c0:	f005 fec6 	bl	8006e50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // for count pulse(rising edge & falling edge)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <main+0x94>)
 80010c8:	f006 fa20 	bl	800750c <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, &rx_data, 1); // assign to RX INTURRUPT
 80010cc:	2201      	movs	r2, #1
 80010ce:	4910      	ldr	r1, [pc, #64]	; (8001110 <main+0x98>)
 80010d0:	4810      	ldr	r0, [pc, #64]	; (8001114 <main+0x9c>)
 80010d2:	f007 fc7c 	bl	80089ce <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // for BT assign to RX INTURRUPT
 80010d6:	2201      	movs	r2, #1
 80010d8:	490f      	ldr	r1, [pc, #60]	; (8001118 <main+0xa0>)
 80010da:	4810      	ldr	r0, [pc, #64]	; (800111c <main+0xa4>)
 80010dc:	f007 fc77 	bl	80089ce <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // for DC motor PWM control
 80010e0:	2100      	movs	r1, #0
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <main+0xa8>)
 80010e4:	f006 f8ac 	bl	8007240 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1); // for SERVO motor PWM control
 80010e8:	2100      	movs	r1, #0
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <main+0xac>)
 80010ec:	f006 f8a8 	bl	8007240 <HAL_TIM_PWM_Start_IT>

  //washing machine
  washing_machine_init();
 80010f0:	f001 fbb8 	bl	8002864 <washing_machine_init>
  washing_machine_choice_lcd();
 80010f4:	f002 fe04 	bl	8003d00 <washing_machine_choice_lcd>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  DHT11_processing();
//	  pc_command_processing();
	  ultrasonic_processing();
 80010f8:	f001 fabe 	bl	8002678 <ultrasonic_processing>
//	  bt_command_processing();
//	  get_rtc();
//	  lcd_display_mode_select();
//	  set_time_button_ui();

	  washing_machine_processing();
 80010fc:	f001 fb4c 	bl	8002798 <washing_machine_processing>
	  ultrasonic_processing();
 8001100:	e7fa      	b.n	80010f8 <main+0x80>
 8001102:	bf00      	nop
 8001104:	20000568 	.word	0x20000568
 8001108:	200005b0 	.word	0x200005b0
 800110c:	20000490 	.word	0x20000490
 8001110:	20000b8c 	.word	0x20000b8c
 8001114:	200005f8 	.word	0x200005f8
 8001118:	20000b8d 	.word	0x20000b8d
 800111c:	2000063c 	.word	0x2000063c
 8001120:	200004d8 	.word	0x200004d8
 8001124:	20000448 	.word	0x20000448

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f008 ff0e 	bl	8009f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <SystemClock_Config+0xd0>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <SystemClock_Config+0xd0>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <SystemClock_Config+0xd0>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <SystemClock_Config+0xd4>)
 8001172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <SystemClock_Config+0xd4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001184:	2309      	movs	r3, #9
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001188:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800118e:	2301      	movs	r3, #1
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001192:	2302      	movs	r3, #2
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011a0:	23a8      	movs	r3, #168	; 0xa8
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fd71 	bl	8005c98 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011bc:	f000 fcb0 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2105      	movs	r1, #5
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 ffd2 	bl	8006188 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ea:	f000 fc99 	bl	8001b20 <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	; 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_ETH_Init+0x84>)
 8001206:	4a20      	ldr	r2, [pc, #128]	; (8001288 <MX_ETH_Init+0x88>)
 8001208:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <MX_ETH_Init+0x8c>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <MX_ETH_Init+0x8c>)
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_ETH_Init+0x8c>)
 8001218:	22e1      	movs	r2, #225	; 0xe1
 800121a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_ETH_Init+0x8c>)
 800121e:	2200      	movs	r2, #0
 8001220:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_ETH_Init+0x8c>)
 8001224:	2200      	movs	r2, #0
 8001226:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_ETH_Init+0x8c>)
 800122a:	2200      	movs	r2, #0
 800122c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_ETH_Init+0x84>)
 8001230:	4a16      	ldr	r2, [pc, #88]	; (800128c <MX_ETH_Init+0x8c>)
 8001232:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_ETH_Init+0x84>)
 8001236:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800123a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_ETH_Init+0x84>)
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <MX_ETH_Init+0x90>)
 8001240:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_ETH_Init+0x84>)
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <MX_ETH_Init+0x94>)
 8001246:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_ETH_Init+0x84>)
 800124a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800124e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_ETH_Init+0x84>)
 8001252:	f003 fa1d 	bl	8004690 <HAL_ETH_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800125c:	f000 fc60 	bl	8001b20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001260:	2238      	movs	r2, #56	; 0x38
 8001262:	2100      	movs	r1, #0
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_ETH_Init+0x98>)
 8001266:	f008 fe77 	bl	8009f58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_ETH_Init+0x98>)
 800126c:	2221      	movs	r2, #33	; 0x21
 800126e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_ETH_Init+0x98>)
 8001272:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001276:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <MX_ETH_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000324 	.word	0x20000324
 8001288:	40028000 	.word	0x40028000
 800128c:	20000bb8 	.word	0x20000bb8
 8001290:	20000284 	.word	0x20000284
 8001294:	200001e4 	.word	0x200001e4
 8001298:	200001ac 	.word	0x200001ac

0800129c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_I2C1_Init+0x74>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <MX_I2C1_Init+0x78>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_I2C1_Init+0x74>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <MX_I2C1_Init+0x7c>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_I2C1_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_I2C1_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_I2C1_Init+0x74>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_I2C1_Init+0x74>)
 80012da:	f003 fef9 	bl	80050d0 <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 fc1c 	bl	8001b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_I2C1_Init+0x74>)
 80012ec:	f004 fb3b 	bl	8005966 <HAL_I2CEx_ConfigAnalogFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012f6:	f000 fc13 	bl	8001b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_I2C1_Init+0x74>)
 80012fe:	f004 fb6e 	bl	80059de <HAL_I2CEx_ConfigDigitalFilter>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001308:	f000 fc0a 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200003d4 	.word	0x200003d4
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001330:	2300      	movs	r3, #0
 8001332:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <MX_RTC_Init+0xac>)
 8001336:	4a25      	ldr	r2, [pc, #148]	; (80013cc <MX_RTC_Init+0xb0>)
 8001338:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <MX_RTC_Init+0xac>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <MX_RTC_Init+0xac>)
 8001342:	227f      	movs	r2, #127	; 0x7f
 8001344:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_RTC_Init+0xac>)
 8001348:	22ff      	movs	r2, #255	; 0xff
 800134a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_RTC_Init+0xac>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_RTC_Init+0xac>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_RTC_Init+0xac>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800135e:	481a      	ldr	r0, [pc, #104]	; (80013c8 <MX_RTC_Init+0xac>)
 8001360:	f005 faf2 	bl	8006948 <HAL_RTC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800136a:	f000 fbd9 	bl	8001b20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800136e:	2300      	movs	r3, #0
 8001370:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001372:	2300      	movs	r3, #0
 8001374:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001376:	2300      	movs	r3, #0
 8001378:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2201      	movs	r2, #1
 8001386:	4619      	mov	r1, r3
 8001388:	480f      	ldr	r0, [pc, #60]	; (80013c8 <MX_RTC_Init+0xac>)
 800138a:	f005 fb53 	bl	8006a34 <HAL_RTC_SetTime>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001394:	f000 fbc4 	bl	8001b20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001398:	2301      	movs	r3, #1
 800139a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 800139c:	2310      	movs	r3, #16
 800139e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 80013a0:	2316      	movs	r3, #22
 80013a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80013a4:	2323      	movs	r3, #35	; 0x23
 80013a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_RTC_Init+0xac>)
 80013b0:	f005 fbda 	bl	8006b68 <HAL_RTC_SetDate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013ba:	f000 fbb1 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000428 	.word	0x20000428
 80013cc:	40002800 	.word	0x40002800

080013d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_TIM2_Init+0xb0>)
 80013f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_TIM2_Init+0xb0>)
 80013fc:	f240 628f 	movw	r2, #1679	; 0x68f
 8001400:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_TIM2_Init+0xb0>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_TIM2_Init+0xb0>)
 800140a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800140e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_TIM2_Init+0xb0>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_TIM2_Init+0xb0>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800141c:	4818      	ldr	r0, [pc, #96]	; (8001480 <MX_TIM2_Init+0xb0>)
 800141e:	f005 fd87 	bl	8006f30 <HAL_TIM_PWM_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001428:	f000 fb7a 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4619      	mov	r1, r3
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_TIM2_Init+0xb0>)
 800143c:	f007 f958 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001446:	f000 fb6b 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144a:	2360      	movs	r3, #96	; 0x60
 800144c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800144e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_TIM2_Init+0xb0>)
 8001464:	f006 fb1e 	bl	8007aa4 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800146e:	f000 fb57 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_TIM2_Init+0xb0>)
 8001474:	f000 fdb2 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000448 	.word	0x20000448

08001484 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <MX_TIM3_Init+0xa0>)
 80014a2:	4a21      	ldr	r2, [pc, #132]	; (8001528 <MX_TIM3_Init+0xa4>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_TIM3_Init+0xa0>)
 80014a8:	2253      	movs	r2, #83	; 0x53
 80014aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_TIM3_Init+0xa0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_TIM3_Init+0xa0>)
 80014b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_TIM3_Init+0xa0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_TIM3_Init+0xa0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014c6:	4817      	ldr	r0, [pc, #92]	; (8001524 <MX_TIM3_Init+0xa0>)
 80014c8:	f005 ffd0 	bl	800746c <HAL_TIM_IC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014d2:	f000 fb25 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	480f      	ldr	r0, [pc, #60]	; (8001524 <MX_TIM3_Init+0xa0>)
 80014e6:	f007 f903 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014f0:	f000 fb16 	bl	8001b20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80014f4:	230a      	movs	r3, #10
 80014f6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_TIM3_Init+0xa0>)
 800150c:	f006 fa2e 	bl	800796c <HAL_TIM_IC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001516:	f000 fb03 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000490 	.word	0x20000490
 8001528:	40000400 	.word	0x40000400

0800152c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <MX_TIM4_Init+0xe4>)
 800155e:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <MX_TIM4_Init+0xe8>)
 8001560:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <MX_TIM4_Init+0xe4>)
 8001564:	f240 3247 	movw	r2, #839	; 0x347
 8001568:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <MX_TIM4_Init+0xe4>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_TIM4_Init+0xe4>)
 8001572:	2263      	movs	r2, #99	; 0x63
 8001574:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <MX_TIM4_Init+0xe4>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <MX_TIM4_Init+0xe4>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001582:	4823      	ldr	r0, [pc, #140]	; (8001610 <MX_TIM4_Init+0xe4>)
 8001584:	f005 fc15 	bl	8006db2 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800158e:	f000 fac7 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159c:	4619      	mov	r1, r3
 800159e:	481c      	ldr	r0, [pc, #112]	; (8001610 <MX_TIM4_Init+0xe4>)
 80015a0:	f006 fb42 	bl	8007c28 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80015aa:	f000 fab9 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015ae:	4818      	ldr	r0, [pc, #96]	; (8001610 <MX_TIM4_Init+0xe4>)
 80015b0:	f005 fcbe 	bl	8006f30 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80015ba:	f000 fab1 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	4619      	mov	r1, r3
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_TIM4_Init+0xe4>)
 80015ce:	f007 f88f 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015d8:	f000 faa2 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	; 0x60
 80015de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 80015e0:	2345      	movs	r3, #69	; 0x45
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015e8:	2304      	movs	r3, #4
 80015ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <MX_TIM4_Init+0xe4>)
 80015f4:	f006 fa56 	bl	8007aa4 <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80015fe:	f000 fa8f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <MX_TIM4_Init+0xe4>)
 8001604:	f000 fcea 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001608:	bf00      	nop
 800160a:	3738      	adds	r7, #56	; 0x38
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200004d8 	.word	0x200004d8
 8001614:	40000800 	.word	0x40000800

08001618 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
 8001644:	615a      	str	r2, [r3, #20]
 8001646:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001648:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <MX_TIM5_Init+0xe4>)
 800164a:	4a2d      	ldr	r2, [pc, #180]	; (8001700 <MX_TIM5_Init+0xe8>)
 800164c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <MX_TIM5_Init+0xe4>)
 8001650:	2233      	movs	r2, #51	; 0x33
 8001652:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <MX_TIM5_Init+0xe4>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_TIM5_Init+0xe4>)
 800165c:	f240 128f 	movw	r2, #399	; 0x18f
 8001660:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <MX_TIM5_Init+0xe4>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <MX_TIM5_Init+0xe4>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800166e:	4823      	ldr	r0, [pc, #140]	; (80016fc <MX_TIM5_Init+0xe4>)
 8001670:	f005 fb9f 	bl	8006db2 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800167a:	f000 fa51 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001688:	4619      	mov	r1, r3
 800168a:	481c      	ldr	r0, [pc, #112]	; (80016fc <MX_TIM5_Init+0xe4>)
 800168c:	f006 facc 	bl	8007c28 <HAL_TIM_ConfigClockSource>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001696:	f000 fa43 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <MX_TIM5_Init+0xe4>)
 800169c:	f005 fc48 	bl	8006f30 <HAL_TIM_PWM_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80016a6:	f000 fa3b 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	4619      	mov	r1, r3
 80016b8:	4810      	ldr	r0, [pc, #64]	; (80016fc <MX_TIM5_Init+0xe4>)
 80016ba:	f007 f819 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80016c4:	f000 fa2c 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 80016cc:	23c7      	movs	r3, #199	; 0xc7
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	220c      	movs	r2, #12
 80016dc:	4619      	mov	r1, r3
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <MX_TIM5_Init+0xe4>)
 80016e0:	f006 f9e0 	bl	8007aa4 <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80016ea:	f000 fa19 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <MX_TIM5_Init+0xe4>)
 80016f0:	f000 fc74 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 80016f4:	bf00      	nop
 80016f6:	3738      	adds	r7, #56	; 0x38
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000520 	.word	0x20000520
 8001700:	40000c00 	.word	0x40000c00

08001704 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_TIM10_Init+0x40>)
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <MX_TIM10_Init+0x44>)
 800170c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <MX_TIM10_Init+0x40>)
 8001710:	22a7      	movs	r2, #167	; 0xa7
 8001712:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_TIM10_Init+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_TIM10_Init+0x40>)
 800171c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001720:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_TIM10_Init+0x40>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_TIM10_Init+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM10_Init+0x40>)
 8001730:	f005 fb3f 	bl	8006db2 <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800173a:	f000 f9f1 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000568 	.word	0x20000568
 8001748:	40014400 	.word	0x40014400

0800174c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_TIM11_Init+0x40>)
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <MX_TIM11_Init+0x44>)
 8001754:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <MX_TIM11_Init+0x40>)
 8001758:	22a7      	movs	r2, #167	; 0xa7
 800175a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_TIM11_Init+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_TIM11_Init+0x40>)
 8001764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001768:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_TIM11_Init+0x40>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_TIM11_Init+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_TIM11_Init+0x40>)
 8001778:	f005 fb1b 	bl	8006db2 <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001782:	f000 f9cd 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200005b0 	.word	0x200005b0
 8001790:	40014800 	.word	0x40014800

08001794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_USART3_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 80017a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART3_UART_Init+0x4c>)
 80017cc:	f007 f820 	bl	8008810 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f000 f9a3 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200005f8 	.word	0x200005f8
 80017e4:	40004800 	.word	0x40004800

080017e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <MX_USART6_UART_Init+0x50>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 80017f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_USART6_UART_Init+0x4c>)
 8001820:	f006 fff6 	bl	8008810 <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800182a:	f000 f979 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000063c 	.word	0x2000063c
 8001838:	40011400 	.word	0x40011400

0800183c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001842:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184a:	2204      	movs	r2, #4
 800184c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001850:	2202      	movs	r2, #2
 8001852:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185c:	2202      	movs	r2, #2
 800185e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001862:	2201      	movs	r2, #1
 8001864:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001874:	2201      	movs	r2, #1
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001880:	f004 f8ec 	bl	8005a5c <HAL_PCD_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800188a:	f000 f949 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000680 	.word	0x20000680

08001898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	; 0x38
 800189c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	4b93      	ldr	r3, [pc, #588]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a92      	ldr	r2, [pc, #584]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b90      	ldr	r3, [pc, #576]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	623b      	str	r3, [r7, #32]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	4b8c      	ldr	r3, [pc, #560]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a8b      	ldr	r2, [pc, #556]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b89      	ldr	r3, [pc, #548]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a84      	ldr	r2, [pc, #528]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b82      	ldr	r3, [pc, #520]	; (8001b00 <MX_GPIO_Init+0x268>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	4b7e      	ldr	r3, [pc, #504]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a7d      	ldr	r2, [pc, #500]	; (8001b00 <MX_GPIO_Init+0x268>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b7b      	ldr	r3, [pc, #492]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b77      	ldr	r3, [pc, #476]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a76      	ldr	r2, [pc, #472]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001928:	f043 0320 	orr.w	r3, r3, #32
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b74      	ldr	r3, [pc, #464]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a6f      	ldr	r2, [pc, #444]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <MX_GPIO_Init+0x268>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b69      	ldr	r3, [pc, #420]	; (8001b00 <MX_GPIO_Init+0x268>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a68      	ldr	r2, [pc, #416]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b66      	ldr	r3, [pc, #408]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a61      	ldr	r2, [pc, #388]	; (8001b00 <MX_GPIO_Init+0x268>)
 800197c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <MX_GPIO_Init+0x268>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_11_GPIO_Port, DHT_11_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2101      	movs	r1, #1
 8001992:	485c      	ldr	r0, [pc, #368]	; (8001b04 <MX_GPIO_Init+0x26c>)
 8001994:	f003 fb68 	bl	8005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 8001998:	2200      	movs	r2, #0
 800199a:	f644 41ff 	movw	r1, #19711	; 0x4cff
 800199e:	485a      	ldr	r0, [pc, #360]	; (8001b08 <MX_GPIO_Init+0x270>)
 80019a0:	f003 fb62 	bl	8005068 <HAL_GPIO_WritePin>
                          |FND_DP_Pin|LD3_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ULTRASONIC_TRIGGER_Pin|LED_DEHYDRATION_Pin|LED_WASHING_MACHINE_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80019aa:	4858      	ldr	r0, [pc, #352]	; (8001b0c <MX_GPIO_Init+0x274>)
 80019ac:	f003 fb5c 	bl	8005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN2_DC_MOTOR_Pin|IN1_DC_MOTOR_Pin|LED_RINSING_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 5106 	mov.w	r1, #8576	; 0x2180
 80019b6:	4856      	ldr	r0, [pc, #344]	; (8001b10 <MX_GPIO_Init+0x278>)
 80019b8:	f003 fb56 	bl	8005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	4854      	ldr	r0, [pc, #336]	; (8001b14 <MX_GPIO_Init+0x27c>)
 80019c2:	f003 fb51 	bl	8005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80019cc:	4852      	ldr	r0, [pc, #328]	; (8001b18 <MX_GPIO_Init+0x280>)
 80019ce:	f003 fb4b 	bl	8005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019d2:	2200      	movs	r2, #0
 80019d4:	21ff      	movs	r1, #255	; 0xff
 80019d6:	4851      	ldr	r0, [pc, #324]	; (8001b1c <MX_GPIO_Init+0x284>)
 80019d8:	f003 fb46 	bl	8005068 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	4619      	mov	r1, r3
 80019f2:	4849      	ldr	r0, [pc, #292]	; (8001b18 <MX_GPIO_Init+0x280>)
 80019f4:	f003 f974 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_11_Pin */
  GPIO_InitStruct.Pin = DHT_11_Pin;
 80019f8:	2301      	movs	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT_11_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	483d      	ldr	r0, [pc, #244]	; (8001b04 <MX_GPIO_Init+0x26c>)
 8001a10:	f003 f966 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND_A_Pin FND_B_Pin FND_G_Pin
                           FND_DP_Pin LD3_Pin FND_C_Pin FND_D_Pin
                           FND_E_Pin FND_F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 8001a14:	f644 43ff 	movw	r3, #19711	; 0x4cff
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
                          |FND_DP_Pin|LD3_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4836      	ldr	r0, [pc, #216]	; (8001b08 <MX_GPIO_Init+0x270>)
 8001a2e:	f003 f957 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIGGER_Pin LED_DEHYDRATION_Pin LED_WASHING_MACHINE_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin|LED_DEHYDRATION_Pin|LED_WASHING_MACHINE_Pin;
 8001a32:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4830      	ldr	r0, [pc, #192]	; (8001b0c <MX_GPIO_Init+0x274>)
 8001a4c:	f003 f948 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_DC_MOTOR_Pin IN1_DC_MOTOR_Pin LED_RINSING_Pin */
  GPIO_InitStruct.Pin = IN2_DC_MOTOR_Pin|IN1_DC_MOTOR_Pin|LED_RINSING_Pin;
 8001a50:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a66:	4619      	mov	r1, r3
 8001a68:	4829      	ldr	r0, [pc, #164]	; (8001b10 <MX_GPIO_Init+0x278>)
 8001a6a:	f003 f939 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001a6e:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <MX_GPIO_Init+0x278>)
 8001a84:	f003 f92c 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a88:	2340      	movs	r3, #64	; 0x40
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	481d      	ldr	r0, [pc, #116]	; (8001b14 <MX_GPIO_Init+0x27c>)
 8001aa0:	f003 f91e 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4817      	ldr	r0, [pc, #92]	; (8001b14 <MX_GPIO_Init+0x27c>)
 8001ab8:	f003 f912 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_D1_Pin FND_D2_Pin FND_D3_Pin FND_D4_Pin */
  GPIO_InitStruct.Pin = FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin;
 8001abc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4810      	ldr	r0, [pc, #64]	; (8001b18 <MX_GPIO_Init+0x280>)
 8001ad6:	f003 f903 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ada:	23ff      	movs	r3, #255	; 0xff
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	4619      	mov	r1, r3
 8001af0:	480a      	ldr	r0, [pc, #40]	; (8001b1c <MX_GPIO_Init+0x284>)
 8001af2:	f003 f8f5 	bl	8004ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af6:	bf00      	nop
 8001af8:	3738      	adds	r7, #56	; 0x38
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40021400 	.word	0x40021400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	; 0x38
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a55      	ldr	r2, [pc, #340]	; (8001cf0 <HAL_ETH_MspInit+0x174>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	f040 80a4 	bne.w	8001ce8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bae:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	4a3d      	ldr	r2, [pc, #244]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6313      	str	r3, [r2, #48]	; 0x30
 8001c04:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a2f      	ldr	r2, [pc, #188]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c56:	6313      	str	r3, [r2, #48]	; 0x30
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_ETH_MspInit+0x178>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c64:	2332      	movs	r3, #50	; 0x32
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c74:	230b      	movs	r3, #11
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481e      	ldr	r0, [pc, #120]	; (8001cf8 <HAL_ETH_MspInit+0x17c>)
 8001c80:	f003 f82e 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c84:	2386      	movs	r3, #134	; 0x86
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c94:	230b      	movs	r3, #11
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4817      	ldr	r0, [pc, #92]	; (8001cfc <HAL_ETH_MspInit+0x180>)
 8001ca0:	f003 f81e 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cb6:	230b      	movs	r3, #11
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480f      	ldr	r0, [pc, #60]	; (8001d00 <HAL_ETH_MspInit+0x184>)
 8001cc2:	f003 f80d 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001cc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd8:	230b      	movs	r3, #11
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4808      	ldr	r0, [pc, #32]	; (8001d04 <HAL_ETH_MspInit+0x188>)
 8001ce4:	f002 fffc 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3738      	adds	r7, #56	; 0x38
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40028000 	.word	0x40028000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40021800 	.word	0x40021800

08001d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_I2C_MspInit+0x84>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12c      	bne.n	8001d84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480c      	ldr	r0, [pc, #48]	; (8001d94 <HAL_I2C_MspInit+0x8c>)
 8001d64:	f002 ffbc 	bl	8004ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40005400 	.word	0x40005400
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020400 	.word	0x40020400

08001d98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	; 0x38
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	2230      	movs	r2, #48	; 0x30
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f008 f8d5 	bl	8009f58 <memset>
  if(hrtc->Instance==RTC)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <HAL_RTC_MspInit+0x4c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d111      	bne.n	8001ddc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001db8:	2320      	movs	r3, #32
 8001dba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fbfe 	bl	80065c8 <HAL_RCCEx_PeriphCLKConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001dd2:	f7ff fea5 	bl	8001b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_RTC_MspInit+0x50>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3738      	adds	r7, #56	; 0x38
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40002800 	.word	0x40002800
 8001de8:	42470e3c 	.word	0x42470e3c

08001dec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfc:	d115      	bne.n	8001e2a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_TIM_PWM_MspInit+0x48>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_TIM_PWM_MspInit+0x48>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_TIM_PWM_MspInit+0x48>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201c      	movs	r0, #28
 8001e20:	f002 fb6d 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e24:	201c      	movs	r0, #28
 8001e26:	f002 fb86 	bl	8004536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_TIM_IC_MspInit+0x94>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d133      	bne.n	8001ec2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_TIM_IC_MspInit+0x98>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <HAL_TIM_IC_MspInit+0x98>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_TIM_IC_MspInit+0x98>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_TIM_IC_MspInit+0x98>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <HAL_TIM_IC_MspInit+0x98>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_TIM_IC_MspInit+0x98>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001e92:	2340      	movs	r3, #64	; 0x40
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <HAL_TIM_IC_MspInit+0x9c>)
 8001eae:	f002 ff17 	bl	8004ce0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	201d      	movs	r0, #29
 8001eb8:	f002 fb21 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ebc:	201d      	movs	r0, #29
 8001ebe:	f002 fb3a 	bl	8004536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a38      	ldr	r2, [pc, #224]	; (8001fc8 <HAL_TIM_Base_MspInit+0xf0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d116      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a36      	ldr	r2, [pc, #216]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	201e      	movs	r0, #30
 8001f0c:	f002 faf7 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f10:	201e      	movs	r0, #30
 8001f12:	f002 fb10 	bl	8004536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f16:	e052      	b.n	8001fbe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <HAL_TIM_Base_MspInit+0xf8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d116      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a28      	ldr	r2, [pc, #160]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2032      	movs	r0, #50	; 0x32
 8001f44:	f002 fadb 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f48:	2032      	movs	r0, #50	; 0x32
 8001f4a:	f002 faf4 	bl	8004536 <HAL_NVIC_EnableIRQ>
}
 8001f4e:	e036      	b.n	8001fbe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_TIM_Base_MspInit+0xfc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d116      	bne.n	8001f88 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2019      	movs	r0, #25
 8001f7c:	f002 fabf 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f80:	2019      	movs	r0, #25
 8001f82:	f002 fad8 	bl	8004536 <HAL_NVIC_EnableIRQ>
}
 8001f86:	e01a      	b.n	8001fbe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_TIM_Base_MspInit+0x100>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d115      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_TIM_Base_MspInit+0xf4>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	201a      	movs	r0, #26
 8001fb4:	f002 faa3 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fb8:	201a      	movs	r0, #26
 8001fba:	f002 fabc 	bl	8004536 <HAL_NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40000c00 	.word	0x40000c00
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800

08001fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffc:	d11e      	bne.n	800203c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 800201a:	2320      	movs	r3, #32
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202a:	2301      	movs	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4828      	ldr	r0, [pc, #160]	; (80020d8 <HAL_TIM_MspPostInit+0xfc>)
 8002036:	f002 fe53 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800203a:	e047      	b.n	80020cc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <HAL_TIM_MspPostInit+0x100>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d11f      	bne.n	8002086 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002074:	2302      	movs	r3, #2
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4818      	ldr	r0, [pc, #96]	; (80020e0 <HAL_TIM_MspPostInit+0x104>)
 8002080:	f002 fe2e 	bl	8004ce0 <HAL_GPIO_Init>
}
 8002084:	e022      	b.n	80020cc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_TIM_MspPostInit+0x108>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d11d      	bne.n	80020cc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6313      	str	r3, [r2, #48]	; 0x30
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_TIM_MspPostInit+0xf8>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020ac:	2308      	movs	r3, #8
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020bc:	2302      	movs	r3, #2
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4804      	ldr	r0, [pc, #16]	; (80020d8 <HAL_TIM_MspPostInit+0xfc>)
 80020c8:	f002 fe0a 	bl	8004ce0 <HAL_GPIO_Init>
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	40000c00 	.word	0x40000c00

080020e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	; 0x30
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a3a      	ldr	r2, [pc, #232]	; (80021f0 <HAL_UART_MspInit+0x108>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d135      	bne.n	8002176 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002154:	2307      	movs	r3, #7
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4826      	ldr	r0, [pc, #152]	; (80021f8 <HAL_UART_MspInit+0x110>)
 8002160:	f002 fdbe 	bl	8004ce0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	2027      	movs	r0, #39	; 0x27
 800216a:	f002 f9c8 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800216e:	2027      	movs	r0, #39	; 0x27
 8002170:	f002 f9e1 	bl	8004536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002174:	e038      	b.n	80021e8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_UART_MspInit+0x114>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d133      	bne.n	80021e8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 800218a:	f043 0320 	orr.w	r3, r3, #32
 800218e:	6453      	str	r3, [r2, #68]	; 0x44
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_UART_MspInit+0x10c>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b8:	23c0      	movs	r3, #192	; 0xc0
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021c8:	2308      	movs	r3, #8
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	480b      	ldr	r0, [pc, #44]	; (8002200 <HAL_UART_MspInit+0x118>)
 80021d4:	f002 fd84 	bl	8004ce0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2047      	movs	r0, #71	; 0x47
 80021de:	f002 f98e 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021e2:	2047      	movs	r0, #71	; 0x47
 80021e4:	f002 f9a7 	bl	8004536 <HAL_NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40004800 	.word	0x40004800
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40011400 	.word	0x40011400
 8002200:	40020800 	.word	0x40020800

08002204 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002224:	d13f      	bne.n	80022a6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002242:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002254:	230a      	movs	r3, #10
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4815      	ldr	r0, [pc, #84]	; (80022b4 <HAL_PCD_MspInit+0xb0>)
 8002260:	f002 fd3e 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	480e      	ldr	r0, [pc, #56]	; (80022b4 <HAL_PCD_MspInit+0xb0>)
 800227a:	f002 fd31 	bl	8004ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002288:	6353      	str	r3, [r2, #52]	; 0x34
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	; 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <NMI_Handler+0x4>

080022be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <MemManage_Handler+0x4>

080022ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f001 ffdc 	bl	80042c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTIC_handler();	// ADD_DOHYEON_231006
 8002308:	f7fe fe2e 	bl	8000f68 <HAL_SYSTIC_handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002316:	f005 fa21 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000568 	.word	0x20000568

08002324 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800232a:	f005 fa17 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200005b0 	.word	0x200005b0

08002338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <TIM2_IRQHandler+0x10>)
 800233e:	f005 fa0d 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000448 	.word	0x20000448

0800234c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <TIM3_IRQHandler+0x10>)
 8002352:	f005 fa03 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000490 	.word	0x20000490

08002360 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <TIM4_IRQHandler+0x10>)
 8002366:	f005 f9f9 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200004d8 	.word	0x200004d8

08002374 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <USART3_IRQHandler+0x10>)
 800237a:	f006 fb59 	bl	8008a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200005f8 	.word	0x200005f8

08002388 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <TIM5_IRQHandler+0x10>)
 800238e:	f005 f9e5 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000520 	.word	0x20000520

0800239c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <USART6_IRQHandler+0x10>)
 80023a2:	f006 fb45 	bl	8008a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000063c 	.word	0x2000063c

080023b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e00a      	b.n	80023d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c2:	f3af 8000 	nop.w
 80023c6:	4601      	mov	r1, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	60ba      	str	r2, [r7, #8]
 80023ce:	b2ca      	uxtb	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf0      	blt.n	80023c2 <_read+0x12>
  }

  return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e009      	b.n	8002410 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	60ba      	str	r2, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fdd9 	bl	8000fbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	dbf1      	blt.n	80023fc <_write+0x12>
  }
  return len;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_close>:

int _close(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244a:	605a      	str	r2, [r3, #4]
  return 0;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_isatty>:

int _isatty(int file)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <_sbrk+0x5c>)
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <_sbrk+0x60>)
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <_sbrk+0x64>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <_sbrk+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d207      	bcs.n	80024cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024bc:	f007 fd22 	bl	8009f04 <__errno>
 80024c0:	4603      	mov	r3, r0
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e009      	b.n	80024e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <_sbrk+0x64>)
 80024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20030000 	.word	0x20030000
 80024ec:	00000400 	.word	0x00000400
 80024f0:	20000bc0 	.word	0x20000bc0
 80024f4:	20000f60 	.word	0x20000f60

080024f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <SystemInit+0x20>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <SystemInit+0x20>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <HAL_UART_RxCpltCallback>:
extern volatile int ULTRASONIC_on_flag;

extern void set_rtc(unsigned char* input);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) // comport master와 연결된 uart
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <HAL_UART_RxCpltCallback+0xd8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d15f      	bne.n	80025ec <HAL_UART_RxCpltCallback+0xd0>
	{
#if 1
		if (((rear + 1) % COMMAND_NUMBER != front))
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_UART_RxCpltCallback+0xdc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1c59      	adds	r1, r3, #1
 8002532:	4b32      	ldr	r3, [pc, #200]	; (80025fc <HAL_UART_RxCpltCallback+0xe0>)
 8002534:	fb83 2301 	smull	r2, r3, r3, r1
 8002538:	10da      	asrs	r2, r3, #3
 800253a:	17cb      	asrs	r3, r1, #31
 800253c:	1ad2      	subs	r2, r2, r3
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	1aca      	subs	r2, r1, r3
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HAL_UART_RxCpltCallback+0xe4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d048      	beq.n	80025e2 <HAL_UART_RxCpltCallback+0xc6>
		{
			if (rx_index < COMMAND_LENGTH)
 8002550:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <HAL_UART_RxCpltCallback+0xe8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b27      	cmp	r3, #39	; 0x27
 8002556:	dc3e      	bgt.n	80025d6 <HAL_UART_RxCpltCallback+0xba>
			{
				if (rx_data == '\n' || rx_data == '\r')
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_UART_RxCpltCallback+0xec>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b0a      	cmp	r3, #10
 800255e:	d003      	beq.n	8002568 <HAL_UART_RxCpltCallback+0x4c>
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_UART_RxCpltCallback+0xec>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b0d      	cmp	r3, #13
 8002566:	d123      	bne.n	80025b0 <HAL_UART_RxCpltCallback+0x94>
				{
					queue_rx_buff[rear][rx_index] = 0; // '\0'
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_UART_RxCpltCallback+0xdc>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_UART_RxCpltCallback+0xe8>)
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	4826      	ldr	r0, [pc, #152]	; (800260c <HAL_UART_RxCpltCallback+0xf0>)
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4403      	add	r3, r0
 800257c:	440b      	add	r3, r1
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
					newline_detect_flag = 1; // new line을 만났다는 flag를 set한다.
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_UART_RxCpltCallback+0xf4>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]
					rx_index = 0; // 초기화, 다음 message를 저장하기 위해서
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_UART_RxCpltCallback+0xe8>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
					rear = (rear + 1) % COMMAND_NUMBER;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_UART_RxCpltCallback+0xdc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_UART_RxCpltCallback+0xe0>)
 8002596:	fb83 2301 	smull	r2, r3, r3, r1
 800259a:	10da      	asrs	r2, r3, #3
 800259c:	17cb      	asrs	r3, r1, #31
 800259e:	1ad2      	subs	r2, r2, r3
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	1aca      	subs	r2, r1, r3
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_UART_RxCpltCallback+0xdc>)
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e018      	b.n	80025e2 <HAL_UART_RxCpltCallback+0xc6>
				}
				else
				{
					queue_rx_buff[rear][rx_index++] = rx_data;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_UART_RxCpltCallback+0xdc>)
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_UART_RxCpltCallback+0xe8>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	1c53      	adds	r3, r2, #1
 80025ba:	4812      	ldr	r0, [pc, #72]	; (8002604 <HAL_UART_RxCpltCallback+0xe8>)
 80025bc:	6003      	str	r3, [r0, #0]
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_UART_RxCpltCallback+0xec>)
 80025c0:	781c      	ldrb	r4, [r3, #0]
 80025c2:	4812      	ldr	r0, [pc, #72]	; (800260c <HAL_UART_RxCpltCallback+0xf0>)
 80025c4:	460b      	mov	r3, r1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4403      	add	r3, r0
 80025ce:	4413      	add	r3, r2
 80025d0:	4622      	mov	r2, r4
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e005      	b.n	80025e2 <HAL_UART_RxCpltCallback+0xc6>
				}
			}
			else
			{
				rx_index = 0;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_UART_RxCpltCallback+0xe8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 80025dc:	480d      	ldr	r0, [pc, #52]	; (8002614 <HAL_UART_RxCpltCallback+0xf8>)
 80025de:	f007 fd31 	bl	800a044 <puts>
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 inturrupt가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80025e2:	2201      	movs	r2, #1
 80025e4:	4908      	ldr	r1, [pc, #32]	; (8002608 <HAL_UART_RxCpltCallback+0xec>)
 80025e6:	4803      	ldr	r0, [pc, #12]	; (80025f4 <HAL_UART_RxCpltCallback+0xd8>)
 80025e8:	f006 f9f1 	bl	80089ce <HAL_UART_Receive_IT>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 inturrupt가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
	}
#endif
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	200005f8 	.word	0x200005f8
 80025f8:	20000ee4 	.word	0x20000ee4
 80025fc:	66666667 	.word	0x66666667
 8002600:	20000ee8 	.word	0x20000ee8
 8002604:	20000eec 	.word	0x20000eec
 8002608:	20000b8c 	.word	0x20000b8c
 800260c:	20000bc4 	.word	0x20000bc4
 8002610:	20000ef0 	.word	0x20000ef0
 8002614:	0800a97c 	.word	0x0800a97c

08002618 <HAL_TIM_IC_CaptureCallback>:
extern void delay_us(unsigned long us);
extern void lcd_string(uint8_t *str);
extern void move_cursor(uint8_t row, uint8_t column);

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a10      	ldr	r2, [pc, #64]	; (8002668 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d11a      	bne.n	8002660 <HAL_TIM_IC_CaptureCallback+0x48>
	{
		if (is_first_capture == 0) // 상승엣지
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_TIM_IC_CaptureCallback+0x54>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // clear H/W counter
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1;
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_TIM_IC_CaptureCallback+0x54>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
			is_first_capture = 0;
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재까지 count한 펄스 수를 읽어온다.
			ic_finish_flag = 1;
		}
	}
}
 8002642:	e00d      	b.n	8002660 <HAL_TIM_IC_CaptureCallback+0x48>
			is_first_capture = 0;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_TIM_IC_CaptureCallback+0x54>)
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재까지 count한 펄스 수를 읽어온다.
 800264a:	2100      	movs	r1, #0
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f005 fbb3 	bl	8007db8 <HAL_TIM_ReadCapturedValue>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002658:	601a      	str	r2, [r3, #0]
			ic_finish_flag = 1;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40000400 	.word	0x40000400
 800266c:	20000efc 	.word	0x20000efc
 8002670:	20000ef4 	.word	0x20000ef4
 8002674:	20000ef8 	.word	0x20000ef8

08002678 <ultrasonic_processing>:

int dist;
char ultra_buff[20];

void ultrasonic_processing(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	if (ULTRASONIC_on_flag)
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <ultrasonic_processing+0x80>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d030      	beq.n	80026e6 <ultrasonic_processing+0x6e>
	{
		if (TIM10_10ms_ultrasonic >= 100) // 1초가 되면
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <ultrasonic_processing+0x84>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b63      	cmp	r3, #99	; 0x63
 800268a:	dd2c      	ble.n	80026e6 <ultrasonic_processing+0x6e>
		{
			TIM10_10ms_ultrasonic = 0;
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <ultrasonic_processing+0x84>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
			make_trigger();
 8002692:	f000 f83b 	bl	800270c <make_trigger>
			if (ic_finish_flag) // 초음파 측정이 완료가 되면
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <ultrasonic_processing+0x88>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d023      	beq.n	80026e6 <ultrasonic_processing+0x6e>
			{
				ic_finish_flag = 0;
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <ultrasonic_processing+0x88>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
				dist = distance;
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <ultrasonic_processing+0x8c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a17      	ldr	r2, [pc, #92]	; (8002708 <ultrasonic_processing+0x90>)
 80026aa:	6013      	str	r3, [r2, #0]
				dist = dist * 0.034 / 2; // 1us 가 0.034cm 를 이동하기 때문
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <ultrasonic_processing+0x90>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd feef 	bl	8000494 <__aeabi_i2d>
 80026b6:	a30e      	add	r3, pc, #56	; (adr r3, 80026f0 <ultrasonic_processing+0x78>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fd ff54 	bl	8000568 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026d0:	f7fe f874 	bl	80007bc <__aeabi_ddiv>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f7fe f956 	bl	800098c <__aeabi_d2iz>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a09      	ldr	r2, [pc, #36]	; (8002708 <ultrasonic_processing+0x90>)
 80026e4:	6013      	str	r3, [r2, #0]
				}
*/
			}
		}
	}
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	f3af 8000 	nop.w
 80026f0:	b020c49c 	.word	0xb020c49c
 80026f4:	3fa16872 	.word	0x3fa16872
 80026f8:	20000118 	.word	0x20000118
 80026fc:	20000b98 	.word	0x20000b98
 8002700:	20000ef8 	.word	0x20000ef8
 8002704:	20000ef4 	.word	0x20000ef4
 8002708:	20000f00 	.word	0x20000f00

0800270c <make_trigger>:

void make_trigger(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002710:	2200      	movs	r2, #0
 8002712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002716:	480b      	ldr	r0, [pc, #44]	; (8002744 <make_trigger+0x38>)
 8002718:	f002 fca6 	bl	8005068 <HAL_GPIO_WritePin>
	delay_us(2);
 800271c:	2002      	movs	r0, #2
 800271e:	f7fe fc93 	bl	8001048 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_SET);
 8002722:	2201      	movs	r2, #1
 8002724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <make_trigger+0x38>)
 800272a:	f002 fc9d 	bl	8005068 <HAL_GPIO_WritePin>
	delay_us(10);
 800272e:	200a      	movs	r0, #10
 8002730:	f7fe fc8a 	bl	8001048 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002734:	2200      	movs	r2, #0
 8002736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800273a:	4802      	ldr	r0, [pc, #8]	; (8002744 <make_trigger+0x38>)
 800273c:	f002 fc94 	bl	8005068 <HAL_GPIO_WritePin>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021400 	.word	0x40021400

08002748 <all_reset>:
/*** end function declaration ***/

/*** function definition ***/
// main
void all_reset(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	laundry_flag_reset();
 800274c:	f000 f9b6 	bl	8002abc <laundry_flag_reset>
	rinsing_flag_reset();
 8002750:	f000 fd0c 	bl	800316c <rinsing_flag_reset>
	dehydration_flag_reset();
 8002754:	f001 f846 	bl	80037e4 <dehydration_flag_reset>
	washing_machine_flag = 0;
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <all_reset+0x3c>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
	forward_spin_flag = 0;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <all_reset+0x40>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
	reverse_spin_flag = 0;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <all_reset+0x44>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
	buzzer_flag = 0;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <all_reset+0x48>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
	alret_flag=0;
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <all_reset+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]

	pwm_init();
 8002776:	f000 f919 	bl	80029ac <pwm_init>
	buzzer_init();
 800277a:	f000 f8b1 	bl	80028e0 <buzzer_init>
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000f07 	.word	0x20000f07
 8002788:	20000f04 	.word	0x20000f04
 800278c:	20000f05 	.word	0x20000f05
 8002790:	20000f06 	.word	0x20000f06
 8002794:	20000f08 	.word	0x20000f08

08002798 <washing_machine_processing>:
void washing_machine_processing(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	// wasing_machine
	washing_machine();
 800279c:	f000 f91a 	bl	80029d4 <washing_machine>
	buzzer_start();
 80027a0:	f000 f8a8 	bl	80028f4 <buzzer_start>
	buzzer_alret();
 80027a4:	f000 f824 	bl	80027f0 <buzzer_alret>

	// laundry
	laundry_run();
 80027a8:	f000 f9b8 	bl	8002b1c <laundry_run>
	laundry_water_level_control();
 80027ac:	f000 fa3a 	bl	8002c24 <laundry_water_level_control>
	laundry_timer_setting();
 80027b0:	f000 fb06 	bl	8002dc0 <laundry_timer_setting>
	laundry_timer_clock();
 80027b4:	f000 fb6c 	bl	8002e90 <laundry_timer_clock>
	laundry_run_for_time_set();
 80027b8:	f000 fc12 	bl	8002fe0 <laundry_run_for_time_set>
	laundry_run_for_auto();
 80027bc:	f000 fc68 	bl	8003090 <laundry_run_for_auto>

	// rinsing
	rinsing_run();
 80027c0:	f000 fcfe 	bl	80031c0 <rinsing_run>
	rinsing_water_level_control();
 80027c4:	f000 fd80 	bl	80032c8 <rinsing_water_level_control>
	rinsing_timer_setting();
 80027c8:	f000 fe4c 	bl	8003464 <rinsing_timer_setting>
	rinsing_timer_clock();
 80027cc:	f000 feb4 	bl	8003538 <rinsing_timer_clock>
	rinsing_run_for_time_set();
 80027d0:	f000 ff5a 	bl	8003688 <rinsing_run_for_time_set>
	rinsing_run_for_auto();
 80027d4:	f000 ff9c 	bl	8003710 <rinsing_run_for_auto>

	// dehydration
	dehydration_run();
 80027d8:	f001 f82a 	bl	8003830 <dehydration_run>
	dehydration_speed_up();
 80027dc:	f001 f890 	bl	8003900 <dehydration_speed_up>
	dehydration_speed_down();
 80027e0:	f001 f91a 	bl	8003a18 <dehydration_speed_down>
	dehydration_spinning_fan();
 80027e4:	f001 f9a6 	bl	8003b34 <dehydration_spinning_fan>
	dehydration_timer_clock();
 80027e8:	f001 f9ca 	bl	8003b80 <dehydration_timer_clock>
//	dehydration_start();
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <buzzer_alret>:
// end main

// washing_machine
void buzzer_alret(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
	if(alret_flag==1)
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <buzzer_alret+0x60>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d124      	bne.n	8002846 <buzzer_alret+0x56>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / happy_birthday[0]);
 80027fc:	4b15      	ldr	r3, [pc, #84]	; (8002854 <buzzer_alret+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <buzzer_alret+0x68>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <buzzer_alret+0x6c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fbb1 f2f2 	udiv	r2, r1, r2
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <buzzer_alret+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <buzzer_alret+0x68>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	4a0f      	ldr	r2, [pc, #60]	; (800285c <buzzer_alret+0x6c>)
 8002820:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / happy_birthday[0] / 2);
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <buzzer_alret+0x64>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <buzzer_alret+0x68>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <buzzer_alret+0x6c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0852      	lsrs	r2, r2, #1
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
		if(dist > 5)
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <buzzer_alret+0x70>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b05      	cmp	r3, #5
 800283e:	dd02      	ble.n	8002846 <buzzer_alret+0x56>
		{
			alret_flag=0;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <buzzer_alret+0x60>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	20000f08 	.word	0x20000f08
 8002854:	20000008 	.word	0x20000008
 8002858:	2000000c 	.word	0x2000000c
 800285c:	20000520 	.word	0x20000520
 8002860:	20000f00 	.word	0x20000f00

08002864 <washing_machine_init>:

void washing_machine_init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	// washing machine flags
	washing_machine_flag = 1;
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <washing_machine_init+0x58>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]

	// laundry flags
	laundry_flag_reset();
 800286e:	f000 f925 	bl	8002abc <laundry_flag_reset>

	// rinsing flags
	rinsing_flag_reset();
 8002872:	f000 fc7b 	bl	800316c <rinsing_flag_reset>

	// dehydration flags
	dehydration_flag_reset();
 8002876:	f000 ffb5 	bl	80037e4 <dehydration_flag_reset>

	// timer
	laundry_timer = 0;
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <washing_machine_init+0x5c>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
	rinsing_timer = 0;
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <washing_machine_init+0x60>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
	dehydration_timer = 0;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <washing_machine_init+0x64>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]

	// led_bit
	led_bit = 0;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <washing_machine_init+0x68>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]

	// init state
	FND4digit_off();
 8002892:	f7fe fa9f 	bl	8000dd4 <FND4digit_off>
	pwm_init();
 8002896:	f000 f889 	bl	80029ac <pwm_init>
	buzzer_init();
 800289a:	f000 f821 	bl	80028e0 <buzzer_init>

	// spin
	forward_spin_flag = 0;
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <washing_machine_init+0x6c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
	reverse_spin_flag = 0;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <washing_machine_init+0x70>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]

	// buzzer
	buzzer_flag = 0;
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <washing_machine_init+0x74>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
	alret_flag=0;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <washing_machine_init+0x78>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000f07 	.word	0x20000f07
 80028c0:	20000f1c 	.word	0x20000f1c
 80028c4:	20000f1d 	.word	0x20000f1d
 80028c8:	20000f1e 	.word	0x20000f1e
 80028cc:	20000f1f 	.word	0x20000f1f
 80028d0:	20000f04 	.word	0x20000f04
 80028d4:	20000f05 	.word	0x20000f05
 80028d8:	20000f06 	.word	0x20000f06
 80028dc:	20000f08 	.word	0x20000f08

080028e0 <buzzer_init>:

void buzzer_init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80028e4:	210c      	movs	r1, #12
 80028e6:	4802      	ldr	r0, [pc, #8]	; (80028f0 <buzzer_init+0x10>)
 80028e8:	f004 fc3a 	bl	8007160 <HAL_TIM_PWM_Stop>
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000520 	.word	0x20000520

080028f4 <buzzer_start>:

void buzzer_start(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
	if (buzzer_flag==1)
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <buzzer_start+0xa4>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d146      	bne.n	8002990 <buzzer_start+0x9c>
	{
		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002902:	210c      	movs	r1, #12
 8002904:	4825      	ldr	r0, [pc, #148]	; (800299c <buzzer_start+0xa8>)
 8002906:	f004 fb63 	bl	8006fd0 <HAL_TIM_PWM_Start>

	    for (int i=0; i < 25; i++)
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	e033      	b.n	8002978 <buzzer_start+0x84>
	    {
			__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / happy_birthday[i]);
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <buzzer_start+0xac>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <buzzer_start+0xb0>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <buzzer_start+0xa8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fbb1 f2f2 	udiv	r2, r1, r2
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <buzzer_start+0xac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4619      	mov	r1, r3
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <buzzer_start+0xb0>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	fbb1 f3f3 	udiv	r3, r1, r3
 800293a:	4a18      	ldr	r2, [pc, #96]	; (800299c <buzzer_start+0xa8>)
 800293c:	60d3      	str	r3, [r2, #12]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / happy_birthday[i] / 2);
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <buzzer_start+0xac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <buzzer_start+0xb0>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	fbb1 f2f3 	udiv	r2, r1, r3
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <buzzer_start+0xa8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0852      	lsrs	r2, r2, #1
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(300*duration[i]);
 8002958:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <buzzer_start+0xb4>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fcc9 	bl	8004300 <HAL_Delay>
			noTone();
 800296e:	f7fe f9ef 	bl	8000d50 <noTone>
	    for (int i=0; i < 25; i++)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3301      	adds	r3, #1
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b18      	cmp	r3, #24
 800297c:	ddc8      	ble.n	8002910 <buzzer_start+0x1c>
	    }
	    buzzer_flag = 0;
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <buzzer_start+0xa4>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
	    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8002984:	210c      	movs	r1, #12
 8002986:	4805      	ldr	r0, [pc, #20]	; (800299c <buzzer_start+0xa8>)
 8002988:	f004 fbea 	bl	8007160 <HAL_TIM_PWM_Stop>
	    washing_machine_choice_lcd();
 800298c:	f001 f9b8 	bl	8003d00 <washing_machine_choice_lcd>
	}
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000f06 	.word	0x20000f06
 800299c:	20000520 	.word	0x20000520
 80029a0:	20000008 	.word	0x20000008
 80029a4:	2000000c 	.word	0x2000000c
 80029a8:	20000070 	.word	0x20000070

080029ac <pwm_init>:

void pwm_init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	pin_8_state = 1;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <pwm_init+0x1c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
	pin_7_state = 1;
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <pwm_init+0x20>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80029bc:	2100      	movs	r1, #0
 80029be:	4804      	ldr	r0, [pc, #16]	; (80029d0 <pwm_init+0x24>)
 80029c0:	f004 fbce 	bl	8007160 <HAL_TIM_PWM_Stop>
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000f20 	.word	0x20000f20
 80029cc:	20000f21 	.word	0x20000f21
 80029d0:	200004d8 	.word	0x200004d8

080029d4 <washing_machine>:

void washing_machine(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	if (washing_machine_flag==1)
 80029d8:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <washing_machine+0xd4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d153      	bne.n	8002a88 <washing_machine+0xb4>
	{
		// 세탁
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e6:	4831      	ldr	r0, [pc, #196]	; (8002aac <washing_machine+0xd8>)
 80029e8:	f7fe f97a 	bl	8000ce0 <get_button>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <washing_machine+0x36>
		{
			laundry_choice_lcd();
 80029f2:	f001 f99d 	bl	8003d30 <laundry_choice_lcd>
			laundry_flag = 1;
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <washing_machine+0xdc>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
			washing_machine_flag = 0;
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <washing_machine+0xd4>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
			rinsing_flag_reset();
 8002a02:	f000 fbb3 	bl	800316c <rinsing_flag_reset>
			dehydration_flag_reset();
 8002a06:	f000 feed 	bl	80037e4 <dehydration_flag_reset>
		}
		// 헹굼
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a10:	4826      	ldr	r0, [pc, #152]	; (8002aac <washing_machine+0xd8>)
 8002a12:	f7fe f965 	bl	8000ce0 <get_button>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <washing_machine+0x60>
		{
			rinsing_choice_lcd();
 8002a1c:	f001 fa54 	bl	8003ec8 <rinsing_choice_lcd>
			rinsing_flag = 1;
 8002a20:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <washing_machine+0xe0>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
			washing_machine_flag = 0;
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <washing_machine+0xd4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
			laundry_flag_reset();
 8002a2c:	f000 f846 	bl	8002abc <laundry_flag_reset>
			dehydration_flag_reset();
 8002a30:	f000 fed8 	bl	80037e4 <dehydration_flag_reset>
		}
		// 탈수
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002a34:	2202      	movs	r2, #2
 8002a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a3a:	481c      	ldr	r0, [pc, #112]	; (8002aac <washing_machine+0xd8>)
 8002a3c:	f7fe f950 	bl	8000ce0 <get_button>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <washing_machine+0x8a>
		{
			dehydration_begin_lcd();
 8002a46:	f001 fb27 	bl	8004098 <dehydration_begin_lcd>
			dehydration_flag = 1;
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <washing_machine+0xe4>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
			washing_machine_flag = 0;
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <washing_machine+0xd4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
			rinsing_flag_reset();
 8002a56:	f000 fb89 	bl	800316c <rinsing_flag_reset>
			laundry_flag_reset();
 8002a5a:	f000 f82f 	bl	8002abc <laundry_flag_reset>
		}
		//세탁기 종료
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002a5e:	2203      	movs	r2, #3
 8002a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a64:	4811      	ldr	r0, [pc, #68]	; (8002aac <washing_machine+0xd8>)
 8002a66:	f7fe f93b 	bl	8000ce0 <get_button>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d119      	bne.n	8002aa4 <washing_machine+0xd0>
		{
			washing_machine_end_lcd();
 8002a70:	f001 f92e 	bl	8003cd0 <washing_machine_end_lcd>
			washing_machine_flag = 0;
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <washing_machine+0xd4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
			laundry_flag_reset();
 8002a7a:	f000 f81f 	bl	8002abc <laundry_flag_reset>
			rinsing_flag_reset();
 8002a7e:	f000 fb75 	bl	800316c <rinsing_flag_reset>
			dehydration_flag_reset();
 8002a82:	f000 feaf 	bl	80037e4 <dehydration_flag_reset>
		{
			washing_machine_choice_lcd();
			washing_machine_flag = 1;
		}
	}
}
 8002a86:	e00d      	b.n	8002aa4 <washing_machine+0xd0>
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a8e:	4807      	ldr	r0, [pc, #28]	; (8002aac <washing_machine+0xd8>)
 8002a90:	f7fe f926 	bl	8000ce0 <get_button>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <washing_machine+0xd0>
			washing_machine_choice_lcd();
 8002a9a:	f001 f931 	bl	8003d00 <washing_machine_choice_lcd>
			washing_machine_flag = 1;
 8002a9e:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <washing_machine+0xd4>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000f07 	.word	0x20000f07
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	20000f09 	.word	0x20000f09
 8002ab4:	20000f10 	.word	0x20000f10
 8002ab8:	20000f17 	.word	0x20000f17

08002abc <laundry_flag_reset>:
// end washing_machine

// laundry

void laundry_flag_reset(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
	laundry_flag = 0;
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <laundry_flag_reset+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
	laundry_water_level_control_flag = 0;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <laundry_flag_reset+0x44>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
	laundry_timer_setting_flag = 0;
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <laundry_flag_reset+0x48>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
	laundry_timer_clock_flag = 0;
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <laundry_flag_reset+0x4c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
	laundry_run_for_time_set_flag = 0;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <laundry_flag_reset+0x50>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
	laundry_run_for_auto_flag = 0;
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <laundry_flag_reset+0x54>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
	laundry_timer_setting_complete_flag = 0;
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <laundry_flag_reset+0x58>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
	forward_spin_flag = 0;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <laundry_flag_reset+0x5c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000f09 	.word	0x20000f09
 8002b00:	20000f0a 	.word	0x20000f0a
 8002b04:	20000f0b 	.word	0x20000f0b
 8002b08:	20000f0c 	.word	0x20000f0c
 8002b0c:	20000f0d 	.word	0x20000f0d
 8002b10:	20000f0e 	.word	0x20000f0e
 8002b14:	20000f0f 	.word	0x20000f0f
 8002b18:	20000f04 	.word	0x20000f04

08002b1c <laundry_run>:


void laundry_run(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	if (laundry_flag==1)
 8002b20:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <laundry_run+0xdc>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d164      	bne.n	8002bf2 <laundry_run+0xd6>
	{
		// Water level control (using LED BAR)
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2e:	4833      	ldr	r0, [pc, #204]	; (8002bfc <laundry_run+0xe0>)
 8002b30:	f7fe f8d6 	bl	8000ce0 <get_button>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <laundry_run+0x2c>
		{
			laundry_water_level_control_lcd();
 8002b3a:	f001 f911 	bl	8003d60 <laundry_water_level_control_lcd>
			all_reset();
 8002b3e:	f7ff fe03 	bl	8002748 <all_reset>
			laundry_water_level_control_flag = 1;
 8002b42:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <laundry_run+0xe4>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
		}
		// Timer setting
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b4e:	482b      	ldr	r0, [pc, #172]	; (8002bfc <laundry_run+0xe0>)
 8002b50:	f7fe f8c6 	bl	8000ce0 <get_button>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <laundry_run+0x52>
		{
			laundry_timer_setting_lcd();
 8002b5a:	f001 f919 	bl	8003d90 <laundry_timer_setting_lcd>
			all_reset();
 8002b5e:	f7ff fdf3 	bl	8002748 <all_reset>
			laundry_timer_setting_flag = 1;
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <laundry_run+0xe8>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
			laundry_timer_clock_flag = 1;
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <laundry_run+0xec>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
		}
		// run for time set
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b74:	4821      	ldr	r0, [pc, #132]	; (8002bfc <laundry_run+0xe0>)
 8002b76:	f7fe f8b3 	bl	8000ce0 <get_button>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11a      	bne.n	8002bb6 <laundry_run+0x9a>
		{
			if(laundry_timer_setting_complete_flag)
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <laundry_run+0xf0>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d012      	beq.n	8002bae <laundry_run+0x92>
			{
				laundry_run_for_time_set_lcd();
 8002b88:	f001 f91a 	bl	8003dc0 <laundry_run_for_time_set_lcd>
				all_reset();
 8002b8c:	f7ff fddc 	bl	8002748 <all_reset>
				laundry_run_for_time_set_flag = 1;
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <laundry_run+0xf4>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
				laundry_timer_clock_flag = 1;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <laundry_run+0xec>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
				forward_spin_flag = 1;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <laundry_run+0xf8>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
				laundry_spinning_fan();
 8002ba2:	f000 fabd 	bl	8003120 <laundry_spinning_fan>
				laundry_timer_counter_10ms = 0;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <laundry_run+0xfc>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e003      	b.n	8002bb6 <laundry_run+0x9a>
			}
			else
			{
				laundry_time_has_not_been_set_lcd();
 8002bae:	f001 f96f 	bl	8003e90 <laundry_time_has_not_been_set_lcd>
				laundry_choice_lcd();
 8002bb2:	f001 f8bd 	bl	8003d30 <laundry_choice_lcd>
			}
		}
		// auto timer set & run
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bbc:	480f      	ldr	r0, [pc, #60]	; (8002bfc <laundry_run+0xe0>)
 8002bbe:	f7fe f88f 	bl	8000ce0 <get_button>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d114      	bne.n	8002bf2 <laundry_run+0xd6>
		{
			laundry_run_for_auto_lcd();
 8002bc8:	f001 f92e 	bl	8003e28 <laundry_run_for_auto_lcd>
			laundry_timer = 30;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <laundry_run+0x100>)
 8002bce:	221e      	movs	r2, #30
 8002bd0:	701a      	strb	r2, [r3, #0]
			all_reset();
 8002bd2:	f7ff fdb9 	bl	8002748 <all_reset>
			laundry_spinning_fan();
 8002bd6:	f000 faa3 	bl	8003120 <laundry_spinning_fan>
			laundry_timer_counter_10ms = 0;
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <laundry_run+0xfc>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
			laundry_run_for_auto_flag = 1;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <laundry_run+0x104>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
			laundry_timer_clock_flag = 1;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <laundry_run+0xec>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
			forward_spin_flag = 1;
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <laundry_run+0xf8>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000f09 	.word	0x20000f09
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	20000f0a 	.word	0x20000f0a
 8002c04:	20000f0b 	.word	0x20000f0b
 8002c08:	20000f0c 	.word	0x20000f0c
 8002c0c:	20000f0f 	.word	0x20000f0f
 8002c10:	20000f0d 	.word	0x20000f0d
 8002c14:	20000f04 	.word	0x20000f04
 8002c18:	20000ba0 	.word	0x20000ba0
 8002c1c:	20000f1c 	.word	0x20000f1c
 8002c20:	20000f0e 	.word	0x20000f0e

08002c24 <laundry_water_level_control>:

void laundry_water_level_control(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
	if(laundry_water_level_control_flag==1)
 8002c28:	4b60      	ldr	r3, [pc, #384]	; (8002dac <laundry_water_level_control+0x188>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 80bb 	bne.w	8002da8 <laundry_water_level_control+0x184>
	{
		// +10
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002c32:	2200      	movs	r2, #0
 8002c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c38:	485d      	ldr	r0, [pc, #372]	; (8002db0 <laundry_water_level_control+0x18c>)
 8002c3a:	f7fe f851 	bl	8000ce0 <get_button>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d12e      	bne.n	8002ca2 <laundry_water_level_control+0x7e>
		{
			if (led_bit <= 0)
 8002c44:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <laundry_water_level_control+0x40>
			{
				led_bit = 1;
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8002c52:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4856      	ldr	r0, [pc, #344]	; (8002db8 <laundry_water_level_control+0x194>)
 8002c5e:	f002 fa03 	bl	8005068 <HAL_GPIO_WritePin>
 8002c62:	e01e      	b.n	8002ca2 <laundry_water_level_control+0x7e>
			}
			else if (led_bit >= 0x80)
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da0b      	bge.n	8002c86 <laundry_water_level_control+0x62>
			{
				led_bit = 0x80;
 8002c6e:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	484e      	ldr	r0, [pc, #312]	; (8002db8 <laundry_water_level_control+0x194>)
 8002c80:	f002 f9f2 	bl	8005068 <HAL_GPIO_WritePin>
 8002c84:	e00d      	b.n	8002ca2 <laundry_water_level_control+0x7e>
			}
			else
			{
				led_bit <<= 1;
 8002c86:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c90:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <laundry_water_level_control+0x190>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4846      	ldr	r0, [pc, #280]	; (8002db8 <laundry_water_level_control+0x194>)
 8002c9e:	f002 f9e3 	bl	8005068 <HAL_GPIO_WritePin>
			}
		}
		// +20
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ca8:	4841      	ldr	r0, [pc, #260]	; (8002db0 <laundry_water_level_control+0x18c>)
 8002caa:	f7fe f819 	bl	8000ce0 <get_button>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d14b      	bne.n	8002d4c <laundry_water_level_control+0x128>
		{
			if (led_bit <= 0)
 8002cb4:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <laundry_water_level_control+0x190>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d115      	bne.n	8002ce8 <laundry_water_level_control+0xc4>
			{
				led_bit = 2;
 8002cbc:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <laundry_water_level_control+0x190>)
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <laundry_water_level_control+0x190>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4619      	mov	r1, r3
 8002ccc:	483a      	ldr	r0, [pc, #232]	; (8002db8 <laundry_water_level_control+0x194>)
 8002cce:	f002 f9cb 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, led_bit>>1, 1);
 8002cd2:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <laundry_water_level_control+0x190>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4835      	ldr	r0, [pc, #212]	; (8002db8 <laundry_water_level_control+0x194>)
 8002ce2:	f002 f9c1 	bl	8005068 <HAL_GPIO_WritePin>
 8002ce6:	e031      	b.n	8002d4c <laundry_water_level_control+0x128>
			}
			else if (led_bit >= 0x20)
 8002ce8:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <laundry_water_level_control+0x190>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b1f      	cmp	r3, #31
 8002cee:	d915      	bls.n	8002d1c <laundry_water_level_control+0xf8>
			{
				led_bit = 0x80;
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <laundry_water_level_control+0x190>)
 8002cf2:	2280      	movs	r2, #128	; 0x80
 8002cf4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <laundry_water_level_control+0x190>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4619      	mov	r1, r3
 8002d00:	482d      	ldr	r0, [pc, #180]	; (8002db8 <laundry_water_level_control+0x194>)
 8002d02:	f002 f9b1 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, led_bit>>1, 1);
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2201      	movs	r2, #1
 8002d12:	4619      	mov	r1, r3
 8002d14:	4828      	ldr	r0, [pc, #160]	; (8002db8 <laundry_water_level_control+0x194>)
 8002d16:	f002 f9a7 	bl	8005068 <HAL_GPIO_WritePin>
 8002d1a:	e017      	b.n	8002d4c <laundry_water_level_control+0x128>
			}
			else
			{
				led_bit <<= 2;
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d26:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4619      	mov	r1, r3
 8002d32:	4821      	ldr	r0, [pc, #132]	; (8002db8 <laundry_water_level_control+0x194>)
 8002d34:	f002 f998 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, led_bit>>1, 1);
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2201      	movs	r2, #1
 8002d44:	4619      	mov	r1, r3
 8002d46:	481c      	ldr	r0, [pc, #112]	; (8002db8 <laundry_water_level_control+0x194>)
 8002d48:	f002 f98e 	bl	8005068 <HAL_GPIO_WritePin>
			}
		}
		// -10
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d52:	4817      	ldr	r0, [pc, #92]	; (8002db0 <laundry_water_level_control+0x18c>)
 8002d54:	f7fd ffc4 	bl	8000ce0 <get_button>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <laundry_water_level_control+0x164>
		{
			HAL_GPIO_WritePin(GPIOD, led_bit, 0);
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	4619      	mov	r1, r3
 8002d68:	4813      	ldr	r0, [pc, #76]	; (8002db8 <laundry_water_level_control+0x194>)
 8002d6a:	f002 f97d 	bl	8005068 <HAL_GPIO_WritePin>
			led_bit >>= 1;
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d78:	701a      	strb	r2, [r3, #0]
			if (led_bit <= 0) led_bit = 0;
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <laundry_water_level_control+0x164>
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <laundry_water_level_control+0x190>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
		}
		// store
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d8e:	4808      	ldr	r0, [pc, #32]	; (8002db0 <laundry_water_level_control+0x18c>)
 8002d90:	f7fd ffa6 	bl	8000ce0 <get_button>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <laundry_water_level_control+0x184>
		{
			all_reset();
 8002d9a:	f7ff fcd5 	bl	8002748 <all_reset>
			laundry_flag = 1;
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <laundry_water_level_control+0x198>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
			laundry_choice_lcd();
 8002da4:	f000 ffc4 	bl	8003d30 <laundry_choice_lcd>
		}
	}
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000f0a 	.word	0x20000f0a
 8002db0:	40021000 	.word	0x40021000
 8002db4:	20000f1f 	.word	0x20000f1f
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	20000f09 	.word	0x20000f09

08002dc0 <laundry_timer_setting>:

void laundry_timer_setting(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	if (laundry_timer_setting_flag==1)
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <laundry_timer_setting+0xbc>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d155      	bne.n	8002e78 <laundry_timer_setting+0xb8>
	{
		// +1
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd2:	482b      	ldr	r0, [pc, #172]	; (8002e80 <laundry_timer_setting+0xc0>)
 8002dd4:	f7fd ff84 	bl	8000ce0 <get_button>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <laundry_timer_setting+0x38>
		{
			laundry_timer++;
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002de8:	701a      	strb	r2, [r3, #0]
			if (laundry_timer > 99) laundry_timer = 99;
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b63      	cmp	r3, #99	; 0x63
 8002df0:	d902      	bls.n	8002df8 <laundry_timer_setting+0x38>
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002df4:	2263      	movs	r2, #99	; 0x63
 8002df6:	701a      	strb	r2, [r3, #0]
		}
		// +10
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dfe:	4820      	ldr	r0, [pc, #128]	; (8002e80 <laundry_timer_setting+0xc0>)
 8002e00:	f7fd ff6e 	bl	8000ce0 <get_button>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <laundry_timer_setting+0x64>
		{
			laundry_timer += 10;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	330a      	adds	r3, #10
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002e14:	701a      	strb	r2, [r3, #0]
			if (laundry_timer > 99) laundry_timer = 99;
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b63      	cmp	r3, #99	; 0x63
 8002e1c:	d902      	bls.n	8002e24 <laundry_timer_setting+0x64>
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002e20:	2263      	movs	r2, #99	; 0x63
 8002e22:	701a      	strb	r2, [r3, #0]
		}
		// -10
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002e24:	2202      	movs	r2, #2
 8002e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e2a:	4815      	ldr	r0, [pc, #84]	; (8002e80 <laundry_timer_setting+0xc0>)
 8002e2c:	f7fd ff58 	bl	8000ce0 <get_button>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <laundry_timer_setting+0x92>
		{
			if (laundry_timer <= 10 )
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b0a      	cmp	r3, #10
 8002e3c:	d803      	bhi.n	8002e46 <laundry_timer_setting+0x86>
			{
				laundry_timer = 0;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e005      	b.n	8002e52 <laundry_timer_setting+0x92>
			}
			else
			{
				laundry_timer -= 10;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	3b0a      	subs	r3, #10
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <laundry_timer_setting+0xc4>)
 8002e50:	701a      	strb	r2, [r3, #0]
			}
		}
		// store
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002e52:	2203      	movs	r2, #3
 8002e54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e58:	4809      	ldr	r0, [pc, #36]	; (8002e80 <laundry_timer_setting+0xc0>)
 8002e5a:	f7fd ff41 	bl	8000ce0 <get_button>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <laundry_timer_setting+0xb8>
		{
			all_reset();
 8002e64:	f7ff fc70 	bl	8002748 <all_reset>
//			laundry_timer_setting_store_lcd();
			laundry_timer_setting_complete_flag = 1;
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <laundry_timer_setting+0xc8>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
			laundry_flag = 1;
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <laundry_timer_setting+0xcc>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
			laundry_choice_lcd();
 8002e74:	f000 ff5c 	bl	8003d30 <laundry_choice_lcd>
		}
	}
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000f0b 	.word	0x20000f0b
 8002e80:	40021000 	.word	0x40021000
 8002e84:	20000f1c 	.word	0x20000f1c
 8002e88:	20000f0f 	.word	0x20000f0f
 8002e8c:	20000f09 	.word	0x20000f09

08002e90 <laundry_timer_clock>:

void laundry_timer_clock(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	if (laundry_timer_clock_flag==1)
 8002e94:	4b46      	ldr	r3, [pc, #280]	; (8002fb0 <laundry_timer_clock+0x120>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f040 8086 	bne.w	8002faa <laundry_timer_clock+0x11a>

		static int position=0;     // FND position indicator
		static int position_running=0;

		// SYSTICK interrupt 방식
		if (fnd1ms_counter_timer >= 2)   // 2ms reached
 8002e9e:	4b45      	ldr	r3, [pc, #276]	; (8002fb4 <laundry_timer_clock+0x124>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	f340 8081 	ble.w	8002faa <laundry_timer_clock+0x11a>
		{
			ms_counter += 2;   // 2ms
 8002ea8:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <laundry_timer_clock+0x128>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3302      	adds	r3, #2
 8002eae:	4a42      	ldr	r2, [pc, #264]	; (8002fb8 <laundry_timer_clock+0x128>)
 8002eb0:	6013      	str	r3, [r2, #0]
			fnd1ms_counter_timer=0;
 8002eb2:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <laundry_timer_clock+0x124>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
			if (ms_counter > 1000)   // 1000ms reached
 8002eb8:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <laundry_timer_clock+0x128>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec0:	d917      	bls.n	8002ef2 <laundry_timer_clock+0x62>
			{
				ms_counter = 0;
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	; (8002fb8 <laundry_timer_clock+0x128>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
				FND_update(laundry_timer);
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <laundry_timer_clock+0x12c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd ff4d 	bl	8000d6c <FND_update>
				position_running++;
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <laundry_timer_clock+0x130>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	4a39      	ldr	r2, [pc, #228]	; (8002fc0 <laundry_timer_clock+0x130>)
 8002eda:	6013      	str	r3, [r2, #0]
				position_running %= 8;
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <laundry_timer_clock+0x130>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	425a      	negs	r2, r3
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	f002 0207 	and.w	r2, r2, #7
 8002eea:	bf58      	it	pl
 8002eec:	4253      	negpl	r3, r2
 8002eee:	4a34      	ldr	r2, [pc, #208]	; (8002fc0 <laundry_timer_clock+0x130>)
 8002ef0:	6013      	str	r3, [r2, #0]
			}

			FND4digit_off();
 8002ef2:	f7fd ff6f 	bl	8000dd4 <FND4digit_off>
			if (position == 2 || position == 3)
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <laundry_timer_clock+0x134>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d003      	beq.n	8002f06 <laundry_timer_clock+0x76>
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <laundry_timer_clock+0x134>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d114      	bne.n	8002f30 <laundry_timer_clock+0xa0>
			{
				HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[position], GPIO_PIN_SET);
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <laundry_timer_clock+0x134>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <laundry_timer_clock+0x138>)
 8002f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4619      	mov	r1, r3
 8002f14:	482d      	ldr	r0, [pc, #180]	; (8002fcc <laundry_timer_clock+0x13c>)
 8002f16:	f002 f8a7 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FND_DATA_PORT, FND[position], GPIO_PIN_RESET);
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <laundry_timer_clock+0x134>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <laundry_timer_clock+0x140>)
 8002f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f24:	2200      	movs	r2, #0
 8002f26:	4619      	mov	r1, r3
 8002f28:	482a      	ldr	r0, [pc, #168]	; (8002fd4 <laundry_timer_clock+0x144>)
 8002f2a:	f002 f89d 	bl	8005068 <HAL_GPIO_WritePin>
 8002f2e:	e02c      	b.n	8002f8a <laundry_timer_clock+0xfa>
			}
			else
			{
				if (forward_spin_flag)
 8002f30:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <laundry_timer_clock+0x148>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d028      	beq.n	8002f8a <laundry_timer_clock+0xfa>
				{
					if (position_running >= 1 && position_running <= 4)
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <laundry_timer_clock+0x130>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	dd14      	ble.n	8002f6a <laundry_timer_clock+0xda>
 8002f40:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <laundry_timer_clock+0x130>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	dc10      	bgt.n	8002f6a <laundry_timer_clock+0xda>
					{
						HAL_GPIO_WritePin(FND_COM_PORT,FND_d1, GPIO_PIN_SET);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f4e:	481f      	ldr	r0, [pc, #124]	; (8002fcc <laundry_timer_clock+0x13c>)
 8002f50:	f002 f88a 	bl	8005068 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(FND_DATA_PORT, FND_forward_running[position_running], GPIO_PIN_RESET);
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <laundry_timer_clock+0x130>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <laundry_timer_clock+0x14c>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4619      	mov	r1, r3
 8002f62:	481c      	ldr	r0, [pc, #112]	; (8002fd4 <laundry_timer_clock+0x144>)
 8002f64:	f002 f880 	bl	8005068 <HAL_GPIO_WritePin>
 8002f68:	e00f      	b.n	8002f8a <laundry_timer_clock+0xfa>
					}
					else
					{
						HAL_GPIO_WritePin(FND_COM_PORT,FND_d10, GPIO_PIN_SET);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f70:	4816      	ldr	r0, [pc, #88]	; (8002fcc <laundry_timer_clock+0x13c>)
 8002f72:	f002 f879 	bl	8005068 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(FND_DATA_PORT, FND_forward_running[position_running], GPIO_PIN_RESET);
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <laundry_timer_clock+0x130>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <laundry_timer_clock+0x14c>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2200      	movs	r2, #0
 8002f82:	4619      	mov	r1, r3
 8002f84:	4813      	ldr	r0, [pc, #76]	; (8002fd4 <laundry_timer_clock+0x144>)
 8002f86:	f002 f86f 	bl	8005068 <HAL_GPIO_WritePin>
					}
				}
			}
			position++;   // 다음 display할 FND를 가리킨다.
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <laundry_timer_clock+0x134>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <laundry_timer_clock+0x134>)
 8002f92:	6013      	str	r3, [r2, #0]
			position %= 4;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <laundry_timer_clock+0x134>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	425a      	negs	r2, r3
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	bf58      	it	pl
 8002fa4:	4253      	negpl	r3, r2
 8002fa6:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <laundry_timer_clock+0x134>)
 8002fa8:	6013      	str	r3, [r2, #0]
		}
	}
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000f0c 	.word	0x20000f0c
 8002fb4:	20000bb0 	.word	0x20000bb0
 8002fb8:	20000f24 	.word	0x20000f24
 8002fbc:	20000f1c 	.word	0x20000f1c
 8002fc0:	20000f28 	.word	0x20000f28
 8002fc4:	20000f2c 	.word	0x20000f2c
 8002fc8:	200000d4 	.word	0x200000d4
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	200001a4 	.word	0x200001a4
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	20000f04 	.word	0x20000f04
 8002fdc:	200000dc 	.word	0x200000dc

08002fe0 <laundry_run_for_time_set>:

void laundry_run_for_time_set(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	if (laundry_run_for_time_set_flag==1)
 8002fe4:	4b21      	ldr	r3, [pc, #132]	; (800306c <laundry_run_for_time_set+0x8c>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d13c      	bne.n	8003066 <laundry_run_for_time_set+0x86>
	{
		if (dist <= 5)
 8002fec:	4b20      	ldr	r3, [pc, #128]	; (8003070 <laundry_run_for_time_set+0x90>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	dc05      	bgt.n	8003000 <laundry_run_for_time_set+0x20>
		{
			laundry_run_for_time_set_flag=0;
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <laundry_run_for_time_set+0x8c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
			alret_flag=1;
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <laundry_run_for_time_set+0x94>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
		}

		// led blink
		if (led_blink_counter_1ms >= 50)
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <laundry_run_for_time_set+0x98>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b31      	cmp	r3, #49	; 0x31
 8003006:	dd07      	ble.n	8003018 <laundry_run_for_time_set+0x38>
		{
			led_blink_counter_1ms = 0;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <laundry_run_for_time_set+0x98>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_15);
 800300e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003012:	481a      	ldr	r0, [pc, #104]	; (800307c <laundry_run_for_time_set+0x9c>)
 8003014:	f002 f841 	bl	800509a <HAL_GPIO_TogglePin>
		}

		// 1초마다 laundry_timer 1씩 감소
		if (laundry_timer_counter_10ms >= 100)
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <laundry_run_for_time_set+0xa0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b63      	cmp	r3, #99	; 0x63
 800301e:	dd08      	ble.n	8003032 <laundry_run_for_time_set+0x52>
		{
			laundry_timer_counter_10ms = 0;
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <laundry_run_for_time_set+0xa0>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
			laundry_timer--;
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <laundry_run_for_time_set+0xa4>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	3b01      	subs	r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <laundry_run_for_time_set+0xa4>)
 8003030:	701a      	strb	r2, [r3, #0]
		}

		// count가 종료되면 헹굼으로 넘어간다.
		if (laundry_timer <= 0)
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <laundry_run_for_time_set+0xa4>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d115      	bne.n	8003066 <laundry_run_for_time_set+0x86>
		{
			laundry_run_for_time_finish_lcd();
 800303a:	f000 fed9 	bl	8003df0 <laundry_run_for_time_finish_lcd>
			rinsing_choice_lcd();
 800303e:	f000 ff43 	bl	8003ec8 <rinsing_choice_lcd>
			all_reset();
 8003042:	f7ff fb81 	bl	8002748 <all_reset>
			pwm_init();
 8003046:	f7ff fcb1 	bl	80029ac <pwm_init>
			washing_machine_flag = 1;
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <laundry_run_for_time_set+0xa8>)
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
			FND4digit_off();
 8003050:	f7fd fec0 	bl	8000dd4 <FND4digit_off>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305a:	4808      	ldr	r0, [pc, #32]	; (800307c <laundry_run_for_time_set+0x9c>)
 800305c:	f002 f804 	bl	8005068 <HAL_GPIO_WritePin>
			buzzer_flag = 1;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <laundry_run_for_time_set+0xac>)
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000f0d 	.word	0x20000f0d
 8003070:	20000f00 	.word	0x20000f00
 8003074:	20000f08 	.word	0x20000f08
 8003078:	20000b9c 	.word	0x20000b9c
 800307c:	40021400 	.word	0x40021400
 8003080:	20000ba0 	.word	0x20000ba0
 8003084:	20000f1c 	.word	0x20000f1c
 8003088:	20000f07 	.word	0x20000f07
 800308c:	20000f06 	.word	0x20000f06

08003090 <laundry_run_for_auto>:

void laundry_run_for_auto(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	if (laundry_run_for_auto_flag==1)
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <laundry_run_for_auto+0x74>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d130      	bne.n	80030fe <laundry_run_for_auto+0x6e>
	{
		// led blink
		if (led_blink_counter_1ms >= 50)
 800309c:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <laundry_run_for_auto+0x78>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b31      	cmp	r3, #49	; 0x31
 80030a2:	dd07      	ble.n	80030b4 <laundry_run_for_auto+0x24>
		{
			led_blink_counter_1ms = 0;
 80030a4:	4b18      	ldr	r3, [pc, #96]	; (8003108 <laundry_run_for_auto+0x78>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_15);
 80030aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ae:	4817      	ldr	r0, [pc, #92]	; (800310c <laundry_run_for_auto+0x7c>)
 80030b0:	f001 fff3 	bl	800509a <HAL_GPIO_TogglePin>
		}

		// 1초마다 laundry_timer 1씩 감소
		if (laundry_timer_counter_10ms >= 100)
 80030b4:	4b16      	ldr	r3, [pc, #88]	; (8003110 <laundry_run_for_auto+0x80>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b63      	cmp	r3, #99	; 0x63
 80030ba:	dd08      	ble.n	80030ce <laundry_run_for_auto+0x3e>
		{
			laundry_timer_counter_10ms = 0;
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <laundry_run_for_auto+0x80>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
			laundry_timer--;
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <laundry_run_for_auto+0x84>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <laundry_run_for_auto+0x84>)
 80030cc:	701a      	strb	r2, [r3, #0]
		}

		// count가 종료되면 헹굼으로 넘어간다.
		if (laundry_timer <= 0)
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <laundry_run_for_auto+0x84>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d113      	bne.n	80030fe <laundry_run_for_auto+0x6e>
		{
			laundry_run_auto_finish_lcd();
 80030d6:	f000 febf 	bl	8003e58 <laundry_run_auto_finish_lcd>
			all_reset();
 80030da:	f7ff fb35 	bl	8002748 <all_reset>
			pwm_init();
 80030de:	f7ff fc65 	bl	80029ac <pwm_init>
			washing_machine_flag = 1;
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <laundry_run_for_auto+0x88>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
			FND4digit_off();
 80030e8:	f7fd fe74 	bl	8000dd4 <FND4digit_off>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 80030ec:	2200      	movs	r2, #0
 80030ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f2:	4806      	ldr	r0, [pc, #24]	; (800310c <laundry_run_for_auto+0x7c>)
 80030f4:	f001 ffb8 	bl	8005068 <HAL_GPIO_WritePin>
			buzzer_flag = 1;
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <laundry_run_for_auto+0x8c>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000f0e 	.word	0x20000f0e
 8003108:	20000b9c 	.word	0x20000b9c
 800310c:	40021400 	.word	0x40021400
 8003110:	20000ba0 	.word	0x20000ba0
 8003114:	20000f1c 	.word	0x20000f1c
 8003118:	20000f07 	.word	0x20000f07
 800311c:	20000f06 	.word	0x20000f06

08003120 <laundry_spinning_fan>:

void laundry_spinning_fan(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	// forward spin
	pin_8_state = 1;
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <laundry_spinning_fan+0x3c>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
	pin_7_state = 0;
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <laundry_spinning_fan+0x40>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003130:	2100      	movs	r1, #0
 8003132:	480c      	ldr	r0, [pc, #48]	; (8003164 <laundry_spinning_fan+0x44>)
 8003134:	f003 ff4c 	bl	8006fd0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, pin_8_state);
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <laundry_spinning_fan+0x3c>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003142:	4809      	ldr	r0, [pc, #36]	; (8003168 <laundry_spinning_fan+0x48>)
 8003144:	f001 ff90 	bl	8005068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, pin_7_state);
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <laundry_spinning_fan+0x40>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	4805      	ldr	r0, [pc, #20]	; (8003168 <laundry_spinning_fan+0x48>)
 8003152:	f001 ff89 	bl	8005068 <HAL_GPIO_WritePin>
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000f20 	.word	0x20000f20
 8003160:	20000f21 	.word	0x20000f21
 8003164:	200004d8 	.word	0x200004d8
 8003168:	40021000 	.word	0x40021000

0800316c <rinsing_flag_reset>:
// end laundry

// rinsing

 void rinsing_flag_reset(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
	rinsing_flag = 0;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <rinsing_flag_reset+0x38>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
	rinsing_water_level_control_flag = 0;
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <rinsing_flag_reset+0x3c>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
	rinsing_timer_setting_flag = 0;
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <rinsing_flag_reset+0x40>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
	rinsing_timer_clock_flag = 0;
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <rinsing_flag_reset+0x44>)
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
	rinsing_run_for_time_set_flag = 0;
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <rinsing_flag_reset+0x48>)
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
	rinsing_run_for_auto_flag = 0;
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <rinsing_flag_reset+0x4c>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
	rinsing_timer_setting_complete_flag = 0;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <rinsing_flag_reset+0x50>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000f10 	.word	0x20000f10
 80031a8:	20000f12 	.word	0x20000f12
 80031ac:	20000f11 	.word	0x20000f11
 80031b0:	20000f13 	.word	0x20000f13
 80031b4:	20000f14 	.word	0x20000f14
 80031b8:	20000f15 	.word	0x20000f15
 80031bc:	20000f16 	.word	0x20000f16

080031c0 <rinsing_run>:


void rinsing_run(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	if (rinsing_flag==1)
 80031c4:	4b35      	ldr	r3, [pc, #212]	; (800329c <rinsing_run+0xdc>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d164      	bne.n	8003296 <rinsing_run+0xd6>
	{
		// Water level control (using LED BAR)
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d2:	4833      	ldr	r0, [pc, #204]	; (80032a0 <rinsing_run+0xe0>)
 80031d4:	f7fd fd84 	bl	8000ce0 <get_button>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <rinsing_run+0x2c>
		{
			rinsing_water_level_control_lcd();
 80031de:	f000 fe8b 	bl	8003ef8 <rinsing_water_level_control_lcd>
			all_reset();
 80031e2:	f7ff fab1 	bl	8002748 <all_reset>
			rinsing_water_level_control_flag = 1;
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <rinsing_run+0xe4>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
		}
		// Timer setting
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80031ec:	2201      	movs	r2, #1
 80031ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031f2:	482b      	ldr	r0, [pc, #172]	; (80032a0 <rinsing_run+0xe0>)
 80031f4:	f7fd fd74 	bl	8000ce0 <get_button>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <rinsing_run+0x52>
		{
			rinsing_timer_setting_lcd();
 80031fe:	f000 fe93 	bl	8003f28 <rinsing_timer_setting_lcd>
			all_reset();
 8003202:	f7ff faa1 	bl	8002748 <all_reset>
			rinsing_timer_setting_flag = 1;
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <rinsing_run+0xe8>)
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
			rinsing_timer_clock_flag = 1;
 800320c:	4b27      	ldr	r3, [pc, #156]	; (80032ac <rinsing_run+0xec>)
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
		}
		// run for time set
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8003212:	2202      	movs	r2, #2
 8003214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003218:	4821      	ldr	r0, [pc, #132]	; (80032a0 <rinsing_run+0xe0>)
 800321a:	f7fd fd61 	bl	8000ce0 <get_button>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11a      	bne.n	800325a <rinsing_run+0x9a>
		{
			if(rinsing_timer_setting_complete_flag)
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <rinsing_run+0xf0>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <rinsing_run+0x92>
			{
				rinsing_run_for_time_set_lcd();
 800322c:	f000 feb0 	bl	8003f90 <rinsing_run_for_time_set_lcd>
				all_reset();
 8003230:	f7ff fa8a 	bl	8002748 <all_reset>
				rinsing_run_for_time_set_flag = 1;
 8003234:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <rinsing_run+0xf4>)
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
				rinsing_timer_clock_flag = 1;
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <rinsing_run+0xec>)
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
				reverse_spin_flag = 1;
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <rinsing_run+0xf8>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
				rinsing_spinning_fan();
 8003246:	f000 faa7 	bl	8003798 <rinsing_spinning_fan>
				rinsing_timer_counter_10ms = 0;
 800324a:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <rinsing_run+0xfc>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e003      	b.n	800325a <rinsing_run+0x9a>
			}
			else
			{
				rinsing_time_has_not_been_set_lcd();
 8003252:	f000 ff05 	bl	8004060 <rinsing_time_has_not_been_set_lcd>
				rinsing_choice_lcd();
 8003256:	f000 fe37 	bl	8003ec8 <rinsing_choice_lcd>
			}
		}
		// auto timer set & run
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 800325a:	2203      	movs	r2, #3
 800325c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003260:	480f      	ldr	r0, [pc, #60]	; (80032a0 <rinsing_run+0xe0>)
 8003262:	f7fd fd3d 	bl	8000ce0 <get_button>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d114      	bne.n	8003296 <rinsing_run+0xd6>
		{
			washing_machine_init();
 800326c:	f7ff fafa 	bl	8002864 <washing_machine_init>
			rinsing_run_for_auto_lcd();
 8003270:	f000 fec2 	bl	8003ff8 <rinsing_run_for_auto_lcd>
			rinsing_timer = 30;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <rinsing_run+0x100>)
 8003276:	221e      	movs	r2, #30
 8003278:	701a      	strb	r2, [r3, #0]
			rinsing_run_for_auto_flag = 1;
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <rinsing_run+0x104>)
 800327c:	2201      	movs	r2, #1
 800327e:	701a      	strb	r2, [r3, #0]
			rinsing_timer_clock_flag = 1;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <rinsing_run+0xec>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
			reverse_spin_flag = 1;
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <rinsing_run+0xf8>)
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
			rinsing_spinning_fan();
 800328c:	f000 fa84 	bl	8003798 <rinsing_spinning_fan>
			rinsing_timer_counter_10ms = 0;
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <rinsing_run+0xfc>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000f10 	.word	0x20000f10
 80032a0:	40021000 	.word	0x40021000
 80032a4:	20000f12 	.word	0x20000f12
 80032a8:	20000f11 	.word	0x20000f11
 80032ac:	20000f13 	.word	0x20000f13
 80032b0:	20000f16 	.word	0x20000f16
 80032b4:	20000f14 	.word	0x20000f14
 80032b8:	20000f05 	.word	0x20000f05
 80032bc:	20000ba4 	.word	0x20000ba4
 80032c0:	20000f1d 	.word	0x20000f1d
 80032c4:	20000f15 	.word	0x20000f15

080032c8 <rinsing_water_level_control>:

void rinsing_water_level_control(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
	if (rinsing_water_level_control_flag==1)
 80032cc:	4b60      	ldr	r3, [pc, #384]	; (8003450 <rinsing_water_level_control+0x188>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	f040 80bb 	bne.w	800344c <rinsing_water_level_control+0x184>
	{
		// +10
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80032d6:	2200      	movs	r2, #0
 80032d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032dc:	485d      	ldr	r0, [pc, #372]	; (8003454 <rinsing_water_level_control+0x18c>)
 80032de:	f7fd fcff 	bl	8000ce0 <get_button>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12e      	bne.n	8003346 <rinsing_water_level_control+0x7e>
		{
			if (led_bit <= 0)
 80032e8:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <rinsing_water_level_control+0x190>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <rinsing_water_level_control+0x40>
			{
				led_bit = 1;
 80032f0:	4b59      	ldr	r3, [pc, #356]	; (8003458 <rinsing_water_level_control+0x190>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 80032f6:	4b58      	ldr	r3, [pc, #352]	; (8003458 <rinsing_water_level_control+0x190>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2201      	movs	r2, #1
 80032fe:	4619      	mov	r1, r3
 8003300:	4856      	ldr	r0, [pc, #344]	; (800345c <rinsing_water_level_control+0x194>)
 8003302:	f001 feb1 	bl	8005068 <HAL_GPIO_WritePin>
 8003306:	e01e      	b.n	8003346 <rinsing_water_level_control+0x7e>
			}
			else if (led_bit >= 0x80)
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <rinsing_water_level_control+0x190>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b25b      	sxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	da0b      	bge.n	800332a <rinsing_water_level_control+0x62>
			{
				led_bit = 0x80;
 8003312:	4b51      	ldr	r3, [pc, #324]	; (8003458 <rinsing_water_level_control+0x190>)
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <rinsing_water_level_control+0x190>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	2201      	movs	r2, #1
 8003320:	4619      	mov	r1, r3
 8003322:	484e      	ldr	r0, [pc, #312]	; (800345c <rinsing_water_level_control+0x194>)
 8003324:	f001 fea0 	bl	8005068 <HAL_GPIO_WritePin>
 8003328:	e00d      	b.n	8003346 <rinsing_water_level_control+0x7e>
			}
			else
			{
				led_bit <<= 1;
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <rinsing_water_level_control+0x190>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <rinsing_water_level_control+0x190>)
 8003334:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8003336:	4b48      	ldr	r3, [pc, #288]	; (8003458 <rinsing_water_level_control+0x190>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	2201      	movs	r2, #1
 800333e:	4619      	mov	r1, r3
 8003340:	4846      	ldr	r0, [pc, #280]	; (800345c <rinsing_water_level_control+0x194>)
 8003342:	f001 fe91 	bl	8005068 <HAL_GPIO_WritePin>
			}
		}
		// +20
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8003346:	2201      	movs	r2, #1
 8003348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800334c:	4841      	ldr	r0, [pc, #260]	; (8003454 <rinsing_water_level_control+0x18c>)
 800334e:	f7fd fcc7 	bl	8000ce0 <get_button>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d14b      	bne.n	80033f0 <rinsing_water_level_control+0x128>
		{
			if (led_bit <= 0)
 8003358:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <rinsing_water_level_control+0x190>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d115      	bne.n	800338c <rinsing_water_level_control+0xc4>
			{
				led_bit = 2;
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <rinsing_water_level_control+0x190>)
 8003362:	2202      	movs	r2, #2
 8003364:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 8003366:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <rinsing_water_level_control+0x190>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	2201      	movs	r2, #1
 800336e:	4619      	mov	r1, r3
 8003370:	483a      	ldr	r0, [pc, #232]	; (800345c <rinsing_water_level_control+0x194>)
 8003372:	f001 fe79 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, led_bit>>1, 1);
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <rinsing_water_level_control+0x190>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	b29b      	uxth	r3, r3
 8003380:	2201      	movs	r2, #1
 8003382:	4619      	mov	r1, r3
 8003384:	4835      	ldr	r0, [pc, #212]	; (800345c <rinsing_water_level_control+0x194>)
 8003386:	f001 fe6f 	bl	8005068 <HAL_GPIO_WritePin>
 800338a:	e031      	b.n	80033f0 <rinsing_water_level_control+0x128>
			}
			else if (led_bit >= 0x20)
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <rinsing_water_level_control+0x190>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b1f      	cmp	r3, #31
 8003392:	d915      	bls.n	80033c0 <rinsing_water_level_control+0xf8>
			{
				led_bit = 0x80;
 8003394:	4b30      	ldr	r3, [pc, #192]	; (8003458 <rinsing_water_level_control+0x190>)
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <rinsing_water_level_control+0x190>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2201      	movs	r2, #1
 80033a2:	4619      	mov	r1, r3
 80033a4:	482d      	ldr	r0, [pc, #180]	; (800345c <rinsing_water_level_control+0x194>)
 80033a6:	f001 fe5f 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, led_bit>>1, 1);
 80033aa:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <rinsing_water_level_control+0x190>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2201      	movs	r2, #1
 80033b6:	4619      	mov	r1, r3
 80033b8:	4828      	ldr	r0, [pc, #160]	; (800345c <rinsing_water_level_control+0x194>)
 80033ba:	f001 fe55 	bl	8005068 <HAL_GPIO_WritePin>
 80033be:	e017      	b.n	80033f0 <rinsing_water_level_control+0x128>
			}
			else
			{
				led_bit <<= 2;
 80033c0:	4b25      	ldr	r3, [pc, #148]	; (8003458 <rinsing_water_level_control+0x190>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <rinsing_water_level_control+0x190>)
 80033ca:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, led_bit, 1);
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <rinsing_water_level_control+0x190>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2201      	movs	r2, #1
 80033d4:	4619      	mov	r1, r3
 80033d6:	4821      	ldr	r0, [pc, #132]	; (800345c <rinsing_water_level_control+0x194>)
 80033d8:	f001 fe46 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, led_bit>>1, 1);
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <rinsing_water_level_control+0x190>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2201      	movs	r2, #1
 80033e8:	4619      	mov	r1, r3
 80033ea:	481c      	ldr	r0, [pc, #112]	; (800345c <rinsing_water_level_control+0x194>)
 80033ec:	f001 fe3c 	bl	8005068 <HAL_GPIO_WritePin>
			}
		}
		// -10
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80033f0:	2202      	movs	r2, #2
 80033f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033f6:	4817      	ldr	r0, [pc, #92]	; (8003454 <rinsing_water_level_control+0x18c>)
 80033f8:	f7fd fc72 	bl	8000ce0 <get_button>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d114      	bne.n	800342c <rinsing_water_level_control+0x164>
		{
			HAL_GPIO_WritePin(GPIOD, led_bit, 0);
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <rinsing_water_level_control+0x190>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	2200      	movs	r2, #0
 800340a:	4619      	mov	r1, r3
 800340c:	4813      	ldr	r0, [pc, #76]	; (800345c <rinsing_water_level_control+0x194>)
 800340e:	f001 fe2b 	bl	8005068 <HAL_GPIO_WritePin>
			led_bit >>= 1;
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <rinsing_water_level_control+0x190>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <rinsing_water_level_control+0x190>)
 800341c:	701a      	strb	r2, [r3, #0]
			if (led_bit <= 0) led_bit = 0;
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <rinsing_water_level_control+0x190>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <rinsing_water_level_control+0x164>
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <rinsing_water_level_control+0x190>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
		}
		// store
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 800342c:	2203      	movs	r2, #3
 800342e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003432:	4808      	ldr	r0, [pc, #32]	; (8003454 <rinsing_water_level_control+0x18c>)
 8003434:	f7fd fc54 	bl	8000ce0 <get_button>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <rinsing_water_level_control+0x184>
		{
			washing_machine_init();
 800343e:	f7ff fa11 	bl	8002864 <washing_machine_init>
			rinsing_flag = 1;
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <rinsing_water_level_control+0x198>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
			rinsing_choice_lcd();
 8003448:	f000 fd3e 	bl	8003ec8 <rinsing_choice_lcd>
		}
	}
}
 800344c:	bf00      	nop
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000f12 	.word	0x20000f12
 8003454:	40021000 	.word	0x40021000
 8003458:	20000f1f 	.word	0x20000f1f
 800345c:	40020c00 	.word	0x40020c00
 8003460:	20000f10 	.word	0x20000f10

08003464 <rinsing_timer_setting>:

void rinsing_timer_setting(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
	if (rinsing_timer_setting_flag==1)
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <rinsing_timer_setting+0xc0>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d157      	bne.n	8003520 <rinsing_timer_setting+0xbc>
	{
		// +1
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8003470:	2200      	movs	r2, #0
 8003472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003476:	482c      	ldr	r0, [pc, #176]	; (8003528 <rinsing_timer_setting+0xc4>)
 8003478:	f7fd fc32 	bl	8000ce0 <get_button>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <rinsing_timer_setting+0x38>
		{
			rinsing_timer++;
 8003482:	4b2a      	ldr	r3, [pc, #168]	; (800352c <rinsing_timer_setting+0xc8>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4b28      	ldr	r3, [pc, #160]	; (800352c <rinsing_timer_setting+0xc8>)
 800348c:	701a      	strb	r2, [r3, #0]
			if (rinsing_timer > 99) rinsing_timer = 99;
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <rinsing_timer_setting+0xc8>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b63      	cmp	r3, #99	; 0x63
 8003494:	d902      	bls.n	800349c <rinsing_timer_setting+0x38>
 8003496:	4b25      	ldr	r3, [pc, #148]	; (800352c <rinsing_timer_setting+0xc8>)
 8003498:	2263      	movs	r2, #99	; 0x63
 800349a:	701a      	strb	r2, [r3, #0]
		}
		// +10
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800349c:	2201      	movs	r2, #1
 800349e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034a2:	4821      	ldr	r0, [pc, #132]	; (8003528 <rinsing_timer_setting+0xc4>)
 80034a4:	f7fd fc1c 	bl	8000ce0 <get_button>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <rinsing_timer_setting+0x64>
		{
			rinsing_timer += 10;
 80034ae:	4b1f      	ldr	r3, [pc, #124]	; (800352c <rinsing_timer_setting+0xc8>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	330a      	adds	r3, #10
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <rinsing_timer_setting+0xc8>)
 80034b8:	701a      	strb	r2, [r3, #0]
			if (rinsing_timer > 99) rinsing_timer = 99;
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <rinsing_timer_setting+0xc8>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b63      	cmp	r3, #99	; 0x63
 80034c0:	d902      	bls.n	80034c8 <rinsing_timer_setting+0x64>
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <rinsing_timer_setting+0xc8>)
 80034c4:	2263      	movs	r2, #99	; 0x63
 80034c6:	701a      	strb	r2, [r3, #0]
		}
		// -10
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80034c8:	2202      	movs	r2, #2
 80034ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034ce:	4816      	ldr	r0, [pc, #88]	; (8003528 <rinsing_timer_setting+0xc4>)
 80034d0:	f7fd fc06 	bl	8000ce0 <get_button>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10d      	bne.n	80034f6 <rinsing_timer_setting+0x92>
		{
			if (rinsing_timer <= 10 )
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <rinsing_timer_setting+0xc8>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b0a      	cmp	r3, #10
 80034e0:	d803      	bhi.n	80034ea <rinsing_timer_setting+0x86>
			{
				rinsing_timer = 0;
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <rinsing_timer_setting+0xc8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e005      	b.n	80034f6 <rinsing_timer_setting+0x92>
			}
			else
			{
				rinsing_timer -= 10;
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <rinsing_timer_setting+0xc8>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	3b0a      	subs	r3, #10
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <rinsing_timer_setting+0xc8>)
 80034f4:	701a      	strb	r2, [r3, #0]
			}
		}
		// store
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80034f6:	2203      	movs	r2, #3
 80034f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034fc:	480a      	ldr	r0, [pc, #40]	; (8003528 <rinsing_timer_setting+0xc4>)
 80034fe:	f7fd fbef 	bl	8000ce0 <get_button>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <rinsing_timer_setting+0xbc>
		{
			rinsing_timer_setting_store_lcd();
 8003508:	f000 fd26 	bl	8003f58 <rinsing_timer_setting_store_lcd>
			washing_machine_init();
 800350c:	f7ff f9aa 	bl	8002864 <washing_machine_init>
			rinsing_timer_setting_complete_flag = 1;
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <rinsing_timer_setting+0xcc>)
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
			rinsing_flag = 1;
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <rinsing_timer_setting+0xd0>)
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
			rinsing_choice_lcd();
 800351c:	f000 fcd4 	bl	8003ec8 <rinsing_choice_lcd>
		}
	}
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000f11 	.word	0x20000f11
 8003528:	40021000 	.word	0x40021000
 800352c:	20000f1d 	.word	0x20000f1d
 8003530:	20000f16 	.word	0x20000f16
 8003534:	20000f10 	.word	0x20000f10

08003538 <rinsing_timer_clock>:

void rinsing_timer_clock(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	if (rinsing_timer_clock_flag==1)
 800353c:	4b46      	ldr	r3, [pc, #280]	; (8003658 <rinsing_timer_clock+0x120>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	f040 8086 	bne.w	8003652 <rinsing_timer_clock+0x11a>

		static int position=0;     // FND position indicator
		static int position_running=0;

		// SYSTICK interrupt 방식
		if (fnd1ms_counter_timer >= 2)   // 2ms reached
 8003546:	4b45      	ldr	r3, [pc, #276]	; (800365c <rinsing_timer_clock+0x124>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	f340 8081 	ble.w	8003652 <rinsing_timer_clock+0x11a>
		{
			ms_counter += 2;   // 2ms
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <rinsing_timer_clock+0x128>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3302      	adds	r3, #2
 8003556:	4a42      	ldr	r2, [pc, #264]	; (8003660 <rinsing_timer_clock+0x128>)
 8003558:	6013      	str	r3, [r2, #0]
			fnd1ms_counter_timer=0;
 800355a:	4b40      	ldr	r3, [pc, #256]	; (800365c <rinsing_timer_clock+0x124>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
			if (ms_counter > 1000)   // 1000ms reached
 8003560:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <rinsing_timer_clock+0x128>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003568:	d917      	bls.n	800359a <rinsing_timer_clock+0x62>
			{
				ms_counter = 0;
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <rinsing_timer_clock+0x128>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
				FND_update(rinsing_timer);
 8003570:	4b3c      	ldr	r3, [pc, #240]	; (8003664 <rinsing_timer_clock+0x12c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd fbf9 	bl	8000d6c <FND_update>
				position_running++;
 800357a:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <rinsing_timer_clock+0x130>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a39      	ldr	r2, [pc, #228]	; (8003668 <rinsing_timer_clock+0x130>)
 8003582:	6013      	str	r3, [r2, #0]
				position_running %= 8;
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <rinsing_timer_clock+0x130>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	425a      	negs	r2, r3
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	f002 0207 	and.w	r2, r2, #7
 8003592:	bf58      	it	pl
 8003594:	4253      	negpl	r3, r2
 8003596:	4a34      	ldr	r2, [pc, #208]	; (8003668 <rinsing_timer_clock+0x130>)
 8003598:	6013      	str	r3, [r2, #0]
			}

			FND4digit_off();
 800359a:	f7fd fc1b 	bl	8000dd4 <FND4digit_off>
			if (position == 2 || position == 3)
 800359e:	4b33      	ldr	r3, [pc, #204]	; (800366c <rinsing_timer_clock+0x134>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d003      	beq.n	80035ae <rinsing_timer_clock+0x76>
 80035a6:	4b31      	ldr	r3, [pc, #196]	; (800366c <rinsing_timer_clock+0x134>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d114      	bne.n	80035d8 <rinsing_timer_clock+0xa0>
			{
				HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[position], GPIO_PIN_SET);
 80035ae:	4b2f      	ldr	r3, [pc, #188]	; (800366c <rinsing_timer_clock+0x134>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <rinsing_timer_clock+0x138>)
 80035b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035b8:	2201      	movs	r2, #1
 80035ba:	4619      	mov	r1, r3
 80035bc:	482d      	ldr	r0, [pc, #180]	; (8003674 <rinsing_timer_clock+0x13c>)
 80035be:	f001 fd53 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FND_DATA_PORT, FND[position], GPIO_PIN_RESET);
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <rinsing_timer_clock+0x134>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <rinsing_timer_clock+0x140>)
 80035c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035cc:	2200      	movs	r2, #0
 80035ce:	4619      	mov	r1, r3
 80035d0:	482a      	ldr	r0, [pc, #168]	; (800367c <rinsing_timer_clock+0x144>)
 80035d2:	f001 fd49 	bl	8005068 <HAL_GPIO_WritePin>
 80035d6:	e02c      	b.n	8003632 <rinsing_timer_clock+0xfa>
			}
			else
			{
				if (reverse_spin_flag)
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <rinsing_timer_clock+0x148>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d028      	beq.n	8003632 <rinsing_timer_clock+0xfa>
				{
					if (position_running <= 7 && position_running >= 4)
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <rinsing_timer_clock+0x130>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	dc14      	bgt.n	8003612 <rinsing_timer_clock+0xda>
 80035e8:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <rinsing_timer_clock+0x130>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	dd10      	ble.n	8003612 <rinsing_timer_clock+0xda>
					{
						HAL_GPIO_WritePin(FND_COM_PORT,FND_d1, GPIO_PIN_SET);
 80035f0:	2201      	movs	r2, #1
 80035f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035f6:	481f      	ldr	r0, [pc, #124]	; (8003674 <rinsing_timer_clock+0x13c>)
 80035f8:	f001 fd36 	bl	8005068 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(FND_DATA_PORT, FND_reverse_running[position_running], GPIO_PIN_RESET);
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <rinsing_timer_clock+0x130>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <rinsing_timer_clock+0x14c>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	b29b      	uxth	r3, r3
 8003606:	2200      	movs	r2, #0
 8003608:	4619      	mov	r1, r3
 800360a:	481c      	ldr	r0, [pc, #112]	; (800367c <rinsing_timer_clock+0x144>)
 800360c:	f001 fd2c 	bl	8005068 <HAL_GPIO_WritePin>
 8003610:	e00f      	b.n	8003632 <rinsing_timer_clock+0xfa>
					}
					else
					{
						HAL_GPIO_WritePin(FND_COM_PORT,FND_d10, GPIO_PIN_SET);
 8003612:	2201      	movs	r2, #1
 8003614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003618:	4816      	ldr	r0, [pc, #88]	; (8003674 <rinsing_timer_clock+0x13c>)
 800361a:	f001 fd25 	bl	8005068 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(FND_DATA_PORT, FND_reverse_running[position_running], GPIO_PIN_RESET);
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <rinsing_timer_clock+0x130>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <rinsing_timer_clock+0x14c>)
 8003624:	5cd3      	ldrb	r3, [r2, r3]
 8003626:	b29b      	uxth	r3, r3
 8003628:	2200      	movs	r2, #0
 800362a:	4619      	mov	r1, r3
 800362c:	4813      	ldr	r0, [pc, #76]	; (800367c <rinsing_timer_clock+0x144>)
 800362e:	f001 fd1b 	bl	8005068 <HAL_GPIO_WritePin>
					}
				}
			}
			position++;   // 다음 display할 FND를 가리킨다.
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <rinsing_timer_clock+0x134>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a0c      	ldr	r2, [pc, #48]	; (800366c <rinsing_timer_clock+0x134>)
 800363a:	6013      	str	r3, [r2, #0]
			position %= 4;
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <rinsing_timer_clock+0x134>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	425a      	negs	r2, r3
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	f002 0203 	and.w	r2, r2, #3
 800364a:	bf58      	it	pl
 800364c:	4253      	negpl	r3, r2
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <rinsing_timer_clock+0x134>)
 8003650:	6013      	str	r3, [r2, #0]
		}
	}
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000f13 	.word	0x20000f13
 800365c:	20000bb0 	.word	0x20000bb0
 8003660:	20000f30 	.word	0x20000f30
 8003664:	20000f1d 	.word	0x20000f1d
 8003668:	20000f34 	.word	0x20000f34
 800366c:	20000f38 	.word	0x20000f38
 8003670:	200000d4 	.word	0x200000d4
 8003674:	40020800 	.word	0x40020800
 8003678:	200001a4 	.word	0x200001a4
 800367c:	40020400 	.word	0x40020400
 8003680:	20000f05 	.word	0x20000f05
 8003684:	200000e4 	.word	0x200000e4

08003688 <rinsing_run_for_time_set>:

void rinsing_run_for_time_set(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	if (rinsing_run_for_time_set_flag==1)
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <rinsing_run_for_time_set+0x6c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d12c      	bne.n	80036ee <rinsing_run_for_time_set+0x66>
	{
		// led blink
		if (led_blink_counter_1ms >= 50)
 8003694:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <rinsing_run_for_time_set+0x70>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b31      	cmp	r3, #49	; 0x31
 800369a:	dd07      	ble.n	80036ac <rinsing_run_for_time_set+0x24>
		{
			led_blink_counter_1ms = 0;
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <rinsing_run_for_time_set+0x70>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 80036a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036a6:	4815      	ldr	r0, [pc, #84]	; (80036fc <rinsing_run_for_time_set+0x74>)
 80036a8:	f001 fcf7 	bl	800509a <HAL_GPIO_TogglePin>
		}

		// 1초마다 laundry_timer 1씩 감소
		if (rinsing_timer_counter_10ms >= 100)
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <rinsing_run_for_time_set+0x78>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b63      	cmp	r3, #99	; 0x63
 80036b2:	dd08      	ble.n	80036c6 <rinsing_run_for_time_set+0x3e>
		{
			rinsing_timer_counter_10ms = 0;
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <rinsing_run_for_time_set+0x78>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
			rinsing_timer--;
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <rinsing_run_for_time_set+0x7c>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	3b01      	subs	r3, #1
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <rinsing_run_for_time_set+0x7c>)
 80036c4:	701a      	strb	r2, [r3, #0]
		}

		// count가 종료되면 헹굼으로 넘어간다.
		if (rinsing_timer <= 0)
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <rinsing_run_for_time_set+0x7c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10f      	bne.n	80036ee <rinsing_run_for_time_set+0x66>
		{
			rinsing_run_for_time_finish_lcd();
 80036ce:	f000 fc77 	bl	8003fc0 <rinsing_run_for_time_finish_lcd>
			washing_machine_init();
 80036d2:	f7ff f8c7 	bl	8002864 <washing_machine_init>
			washing_machine_flag = 1;
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <rinsing_run_for_time_set+0x80>)
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036e2:	4806      	ldr	r0, [pc, #24]	; (80036fc <rinsing_run_for_time_set+0x74>)
 80036e4:	f001 fcc0 	bl	8005068 <HAL_GPIO_WritePin>
			buzzer_flag = 1;
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <rinsing_run_for_time_set+0x84>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000f14 	.word	0x20000f14
 80036f8:	20000b9c 	.word	0x20000b9c
 80036fc:	40021000 	.word	0x40021000
 8003700:	20000ba4 	.word	0x20000ba4
 8003704:	20000f1d 	.word	0x20000f1d
 8003708:	20000f07 	.word	0x20000f07
 800370c:	20000f06 	.word	0x20000f06

08003710 <rinsing_run_for_auto>:

void rinsing_run_for_auto(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
	if (rinsing_run_for_auto_flag==1)
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <rinsing_run_for_auto+0x6c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d12c      	bne.n	8003776 <rinsing_run_for_auto+0x66>
	{
		// led blink
		if (led_blink_counter_1ms >= 50)
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <rinsing_run_for_auto+0x70>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b31      	cmp	r3, #49	; 0x31
 8003722:	dd07      	ble.n	8003734 <rinsing_run_for_auto+0x24>
		{
			led_blink_counter_1ms = 0;
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <rinsing_run_for_auto+0x70>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 800372a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800372e:	4815      	ldr	r0, [pc, #84]	; (8003784 <rinsing_run_for_auto+0x74>)
 8003730:	f001 fcb3 	bl	800509a <HAL_GPIO_TogglePin>
		}

		// 1초마다 laundry_timer 1씩 감소
		if (rinsing_timer_counter_10ms >= 100)
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <rinsing_run_for_auto+0x78>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b63      	cmp	r3, #99	; 0x63
 800373a:	dd08      	ble.n	800374e <rinsing_run_for_auto+0x3e>
		{
			rinsing_timer_counter_10ms = 0;
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <rinsing_run_for_auto+0x78>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
			rinsing_timer--;
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <rinsing_run_for_auto+0x7c>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	3b01      	subs	r3, #1
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <rinsing_run_for_auto+0x7c>)
 800374c:	701a      	strb	r2, [r3, #0]
		}

		// count가 종료되면 헹굼으로 넘어간다.
		if (rinsing_timer <= 0)
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <rinsing_run_for_auto+0x7c>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <rinsing_run_for_auto+0x66>
		{
			rinsing_run_auto_finish_lcd();
 8003756:	f000 fc67 	bl	8004028 <rinsing_run_auto_finish_lcd>
			washing_machine_init();
 800375a:	f7ff f883 	bl	8002864 <washing_machine_init>
			washing_machine_flag = 1;
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <rinsing_run_for_auto+0x80>)
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800376a:	4806      	ldr	r0, [pc, #24]	; (8003784 <rinsing_run_for_auto+0x74>)
 800376c:	f001 fc7c 	bl	8005068 <HAL_GPIO_WritePin>
			buzzer_flag = 1;
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <rinsing_run_for_auto+0x84>)
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000f15 	.word	0x20000f15
 8003780:	20000b9c 	.word	0x20000b9c
 8003784:	40021000 	.word	0x40021000
 8003788:	20000ba4 	.word	0x20000ba4
 800378c:	20000f1d 	.word	0x20000f1d
 8003790:	20000f07 	.word	0x20000f07
 8003794:	20000f06 	.word	0x20000f06

08003798 <rinsing_spinning_fan>:

void rinsing_spinning_fan(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
	// reverse spin
	pin_8_state = 0;
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <rinsing_spinning_fan+0x3c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
	pin_7_state = 1;
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <rinsing_spinning_fan+0x40>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80037a8:	2100      	movs	r1, #0
 80037aa:	480c      	ldr	r0, [pc, #48]	; (80037dc <rinsing_spinning_fan+0x44>)
 80037ac:	f003 fc10 	bl	8006fd0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, pin_8_state);
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <rinsing_spinning_fan+0x3c>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037ba:	4809      	ldr	r0, [pc, #36]	; (80037e0 <rinsing_spinning_fan+0x48>)
 80037bc:	f001 fc54 	bl	8005068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, pin_7_state);
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <rinsing_spinning_fan+0x40>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	4805      	ldr	r0, [pc, #20]	; (80037e0 <rinsing_spinning_fan+0x48>)
 80037ca:	f001 fc4d 	bl	8005068 <HAL_GPIO_WritePin>
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000f20 	.word	0x20000f20
 80037d8:	20000f21 	.word	0x20000f21
 80037dc:	200004d8 	.word	0x200004d8
 80037e0:	40021000 	.word	0x40021000

080037e4 <dehydration_flag_reset>:
// end rinsing

// dehydration

void dehydration_flag_reset(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
	dehydration_flag = 0;
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <dehydration_flag_reset+0x34>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
	dehydration_start_flag = 0;
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <dehydration_flag_reset+0x38>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
	dehydration_speed_up_flag = 0;
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <dehydration_flag_reset+0x3c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
	dehydration_speed_down_flag = 0;
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <dehydration_flag_reset+0x40>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
	dehydration_timer_clock_flag = 0;
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <dehydration_flag_reset+0x44>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
	reverse_spin_flag = 0;
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <dehydration_flag_reset+0x48>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000f17 	.word	0x20000f17
 800381c:	20000f1a 	.word	0x20000f1a
 8003820:	20000f18 	.word	0x20000f18
 8003824:	20000f19 	.word	0x20000f19
 8003828:	20000f1b 	.word	0x20000f1b
 800382c:	20000f05 	.word	0x20000f05

08003830 <dehydration_run>:


void dehydration_run(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
	if (dehydration_flag==1)
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <dehydration_run+0xac>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d14c      	bne.n	80038d6 <dehydration_run+0xa6>
	{
		// speed up
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800383c:	2200      	movs	r2, #0
 800383e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003842:	4827      	ldr	r0, [pc, #156]	; (80038e0 <dehydration_run+0xb0>)
 8003844:	f7fd fa4c 	bl	8000ce0 <get_button>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <dehydration_run+0x2c>
		{
			dehydration_speed_up_lcd();
 800384e:	f000 fc3b 	bl	80040c8 <dehydration_speed_up_lcd>
			all_reset();
 8003852:	f7fe ff79 	bl	8002748 <all_reset>
			dehydration_speed_up_flag = 1;
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <dehydration_run+0xb4>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
		}
		// speed down
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800385c:	2201      	movs	r2, #1
 800385e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003862:	481f      	ldr	r0, [pc, #124]	; (80038e0 <dehydration_run+0xb0>)
 8003864:	f7fd fa3c 	bl	8000ce0 <get_button>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <dehydration_run+0x4c>
		{
			dehydration_speed_down_lcd();
 800386e:	f000 fc43 	bl	80040f8 <dehydration_speed_down_lcd>
			all_reset();
 8003872:	f7fe ff69 	bl	8002748 <all_reset>
			dehydration_speed_down_flag = 1;
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <dehydration_run+0xb8>)
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
		}
		// start
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 800387c:	2202      	movs	r2, #2
 800387e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003882:	4817      	ldr	r0, [pc, #92]	; (80038e0 <dehydration_run+0xb0>)
 8003884:	f7fd fa2c 	bl	8000ce0 <get_button>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d111      	bne.n	80038b2 <dehydration_run+0x82>
		{
			dehydration_start_lcd();
 800388e:	f000 fc4b 	bl	8004128 <dehydration_start_lcd>
			dehydration_spinning_fan();
 8003892:	f000 f94f 	bl	8003b34 <dehydration_spinning_fan>
			all_reset();
 8003896:	f7fe ff57 	bl	8002748 <all_reset>
			dehydration_timer = 10;
 800389a:	4b14      	ldr	r3, [pc, #80]	; (80038ec <dehydration_run+0xbc>)
 800389c:	220a      	movs	r2, #10
 800389e:	701a      	strb	r2, [r3, #0]
			reverse_spin_flag = 1;
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <dehydration_run+0xc0>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
			dehydration_timer_clock_flag = 1;
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <dehydration_run+0xc4>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
			dehydration_start_flag = 1;
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <dehydration_run+0xc8>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
		}
		// end dehydration
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80038b2:	2203      	movs	r2, #3
 80038b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038b8:	4809      	ldr	r0, [pc, #36]	; (80038e0 <dehydration_run+0xb0>)
 80038ba:	f7fd fa11 	bl	8000ce0 <get_button>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d108      	bne.n	80038d6 <dehydration_run+0xa6>
		{
			dehydration_stop_lcd();
 80038c4:	f000 fc48 	bl	8004158 <dehydration_stop_lcd>
			all_reset();
 80038c8:	f7fe ff3e 	bl	8002748 <all_reset>
			washing_machine_flag = 1;
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <dehydration_run+0xcc>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
			washing_machine_choice_lcd();
 80038d2:	f000 fa15 	bl	8003d00 <washing_machine_choice_lcd>
		}
	}
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000f17 	.word	0x20000f17
 80038e0:	40021000 	.word	0x40021000
 80038e4:	20000f18 	.word	0x20000f18
 80038e8:	20000f19 	.word	0x20000f19
 80038ec:	20000f1e 	.word	0x20000f1e
 80038f0:	20000f05 	.word	0x20000f05
 80038f4:	20000f1b 	.word	0x20000f1b
 80038f8:	20000f1a 	.word	0x20000f1a
 80038fc:	20000f07 	.word	0x20000f07

08003900 <dehydration_speed_up>:

void dehydration_speed_up(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	if (dehydration_speed_up_flag==1)
 8003904:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <dehydration_speed_up+0x100>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d177      	bne.n	80039fc <dehydration_speed_up+0xfc>
	{
		// +1
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800390c:	2200      	movs	r2, #0
 800390e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003912:	483c      	ldr	r0, [pc, #240]	; (8003a04 <dehydration_speed_up+0x104>)
 8003914:	f7fd f9e4 	bl	8000ce0 <get_button>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <dehydration_speed_up+0x4c>
		{
			speed_up_value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 800391e:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <dehydration_speed_up+0x108>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <dehydration_speed_up+0x10c>)
 8003928:	701a      	strb	r2, [r3, #0]
			speed_up_value++;
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <dehydration_speed_up+0x10c>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <dehydration_speed_up+0x10c>)
 8003934:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // LED1
 8003936:	2101      	movs	r1, #1
 8003938:	4835      	ldr	r0, [pc, #212]	; (8003a10 <dehydration_speed_up+0x110>)
 800393a:	f001 fbae 	bl	800509a <HAL_GPIO_TogglePin>
			if (speed_up_value > 100) speed_up_value = 100;
 800393e:	4b33      	ldr	r3, [pc, #204]	; (8003a0c <dehydration_speed_up+0x10c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d902      	bls.n	800394c <dehydration_speed_up+0x4c>
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <dehydration_speed_up+0x10c>)
 8003948:	2264      	movs	r2, #100	; 0x64
 800394a:	701a      	strb	r2, [r3, #0]
		}

		// +5
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800394c:	2201      	movs	r2, #1
 800394e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003952:	482c      	ldr	r0, [pc, #176]	; (8003a04 <dehydration_speed_up+0x104>)
 8003954:	f7fd f9c4 	bl	8000ce0 <get_button>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <dehydration_speed_up+0x8c>
		{
			speed_up_value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 800395e:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <dehydration_speed_up+0x108>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <dehydration_speed_up+0x10c>)
 8003968:	701a      	strb	r2, [r3, #0]
			speed_up_value += 5;
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <dehydration_speed_up+0x10c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	3305      	adds	r3, #5
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <dehydration_speed_up+0x10c>)
 8003974:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // LED2
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	4825      	ldr	r0, [pc, #148]	; (8003a10 <dehydration_speed_up+0x110>)
 800397a:	f001 fb8e 	bl	800509a <HAL_GPIO_TogglePin>
			if (speed_up_value > 100) speed_up_value = 100;
 800397e:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <dehydration_speed_up+0x10c>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d902      	bls.n	800398c <dehydration_speed_up+0x8c>
 8003986:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <dehydration_speed_up+0x10c>)
 8003988:	2264      	movs	r2, #100	; 0x64
 800398a:	701a      	strb	r2, [r3, #0]
		}

		// +10
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 800398c:	2202      	movs	r2, #2
 800398e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003992:	481c      	ldr	r0, [pc, #112]	; (8003a04 <dehydration_speed_up+0x104>)
 8003994:	f7fd f9a4 	bl	8000ce0 <get_button>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d117      	bne.n	80039ce <dehydration_speed_up+0xce>
		{
			speed_up_value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <dehydration_speed_up+0x108>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <dehydration_speed_up+0x10c>)
 80039a8:	701a      	strb	r2, [r3, #0]
			speed_up_value += 5;
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <dehydration_speed_up+0x10c>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	3305      	adds	r3, #5
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <dehydration_speed_up+0x10c>)
 80039b4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // LED3
 80039b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039ba:	4815      	ldr	r0, [pc, #84]	; (8003a10 <dehydration_speed_up+0x110>)
 80039bc:	f001 fb6d 	bl	800509a <HAL_GPIO_TogglePin>
			if (speed_up_value > 100) speed_up_value = 100;
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <dehydration_speed_up+0x10c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b64      	cmp	r3, #100	; 0x64
 80039c6:	d902      	bls.n	80039ce <dehydration_speed_up+0xce>
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <dehydration_speed_up+0x10c>)
 80039ca:	2264      	movs	r2, #100	; 0x64
 80039cc:	701a      	strb	r2, [r3, #0]
		}

		// store
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80039ce:	2203      	movs	r2, #3
 80039d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039d4:	480b      	ldr	r0, [pc, #44]	; (8003a04 <dehydration_speed_up+0x104>)
 80039d6:	f7fd f983 	bl	8000ce0 <get_button>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <dehydration_speed_up+0xfc>
		{
			dehydration_store_lcd();
 80039e0:	f000 fbd6 	bl	8004190 <dehydration_store_lcd>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, speed_up_value);
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <dehydration_speed_up+0x10c>)
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <dehydration_speed_up+0x108>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	635a      	str	r2, [r3, #52]	; 0x34
			all_reset();
 80039ee:	f7fe feab 	bl	8002748 <all_reset>
			dehydration_flag = 1;
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <dehydration_speed_up+0x114>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
			dehydration_begin_lcd();
 80039f8:	f000 fb4e 	bl	8004098 <dehydration_begin_lcd>
		}
	}
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000f18 	.word	0x20000f18
 8003a04:	40021000 	.word	0x40021000
 8003a08:	200004d8 	.word	0x200004d8
 8003a0c:	20000f22 	.word	0x20000f22
 8003a10:	40020400 	.word	0x40020400
 8003a14:	20000f17 	.word	0x20000f17

08003a18 <dehydration_speed_down>:

void dehydration_speed_down(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	if (dehydration_speed_down_flag==1)
 8003a1c:	4b3e      	ldr	r3, [pc, #248]	; (8003b18 <dehydration_speed_down+0x100>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d177      	bne.n	8003b14 <dehydration_speed_down+0xfc>
	{
		// -1
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a2a:	483c      	ldr	r0, [pc, #240]	; (8003b1c <dehydration_speed_down+0x104>)
 8003a2c:	f7fd f958 	bl	8000ce0 <get_button>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d116      	bne.n	8003a64 <dehydration_speed_down+0x4c>
		{
			speed_down_value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8003a36:	4b3a      	ldr	r3, [pc, #232]	; (8003b20 <dehydration_speed_down+0x108>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a40:	701a      	strb	r2, [r3, #0]
			speed_down_value--;
 8003a42:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a4c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // LED1
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4835      	ldr	r0, [pc, #212]	; (8003b28 <dehydration_speed_down+0x110>)
 8003a52:	f001 fb22 	bl	800509a <HAL_GPIO_TogglePin>
			if (speed_down_value < 30) speed_down_value = 30;
 8003a56:	4b33      	ldr	r3, [pc, #204]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b1d      	cmp	r3, #29
 8003a5c:	d802      	bhi.n	8003a64 <dehydration_speed_down+0x4c>
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a60:	221e      	movs	r2, #30
 8003a62:	701a      	strb	r2, [r3, #0]
		}

		// -5
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8003a64:	2201      	movs	r2, #1
 8003a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a6a:	482c      	ldr	r0, [pc, #176]	; (8003b1c <dehydration_speed_down+0x104>)
 8003a6c:	f7fd f938 	bl	8000ce0 <get_button>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d116      	bne.n	8003aa4 <dehydration_speed_down+0x8c>
		{
			speed_down_value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8003a76:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <dehydration_speed_down+0x108>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a80:	701a      	strb	r2, [r3, #0]
			speed_down_value -= 5;
 8003a82:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	3b05      	subs	r3, #5
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a8c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // LED2
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	4825      	ldr	r0, [pc, #148]	; (8003b28 <dehydration_speed_down+0x110>)
 8003a92:	f001 fb02 	bl	800509a <HAL_GPIO_TogglePin>
			if (speed_down_value < 30) speed_down_value = 30;
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b1d      	cmp	r3, #29
 8003a9c:	d802      	bhi.n	8003aa4 <dehydration_speed_down+0x8c>
 8003a9e:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003aa0:	221e      	movs	r2, #30
 8003aa2:	701a      	strb	r2, [r3, #0]
		}

		// -10
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aaa:	481c      	ldr	r0, [pc, #112]	; (8003b1c <dehydration_speed_down+0x104>)
 8003aac:	f7fd f918 	bl	8000ce0 <get_button>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d117      	bne.n	8003ae6 <dehydration_speed_down+0xce>
		{
			speed_down_value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <dehydration_speed_down+0x108>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003ac0:	701a      	strb	r2, [r3, #0]
			speed_down_value -= 10;
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	3b0a      	subs	r3, #10
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003acc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // LED3
 8003ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ad2:	4815      	ldr	r0, [pc, #84]	; (8003b28 <dehydration_speed_down+0x110>)
 8003ad4:	f001 fae1 	bl	800509a <HAL_GPIO_TogglePin>
			if (speed_down_value < 30) speed_down_value = 30;
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b1d      	cmp	r3, #29
 8003ade:	d802      	bhi.n	8003ae6 <dehydration_speed_down+0xce>
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <dehydration_speed_down+0x10c>)
 8003ae2:	221e      	movs	r2, #30
 8003ae4:	701a      	strb	r2, [r3, #0]
		}

		// store
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003aec:	480b      	ldr	r0, [pc, #44]	; (8003b1c <dehydration_speed_down+0x104>)
 8003aee:	f7fd f8f7 	bl	8000ce0 <get_button>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10d      	bne.n	8003b14 <dehydration_speed_down+0xfc>
		{
			dehydration_store_lcd();
 8003af8:	f000 fb4a 	bl	8004190 <dehydration_store_lcd>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, speed_up_value);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <dehydration_speed_down+0x114>)
 8003afe:	781a      	ldrb	r2, [r3, #0]
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <dehydration_speed_down+0x108>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	635a      	str	r2, [r3, #52]	; 0x34
			all_reset();
 8003b06:	f7fe fe1f 	bl	8002748 <all_reset>
			dehydration_flag = 1;
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <dehydration_speed_down+0x118>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
			dehydration_begin_lcd();
 8003b10:	f000 fac2 	bl	8004098 <dehydration_begin_lcd>
		}
	}
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000f19 	.word	0x20000f19
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	200004d8 	.word	0x200004d8
 8003b24:	20000f23 	.word	0x20000f23
 8003b28:	40020400 	.word	0x40020400
 8003b2c:	20000f22 	.word	0x20000f22
 8003b30:	20000f17 	.word	0x20000f17

08003b34 <dehydration_spinning_fan>:

void dehydration_spinning_fan(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
	// reverse spin
	pin_8_state = 0;
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <dehydration_spinning_fan+0x3c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
	pin_7_state = 1;
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <dehydration_spinning_fan+0x40>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003b44:	2100      	movs	r1, #0
 8003b46:	480c      	ldr	r0, [pc, #48]	; (8003b78 <dehydration_spinning_fan+0x44>)
 8003b48:	f003 fa42 	bl	8006fd0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, pin_8_state);
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <dehydration_spinning_fan+0x3c>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b56:	4809      	ldr	r0, [pc, #36]	; (8003b7c <dehydration_spinning_fan+0x48>)
 8003b58:	f001 fa86 	bl	8005068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, pin_7_state);
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <dehydration_spinning_fan+0x40>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	4805      	ldr	r0, [pc, #20]	; (8003b7c <dehydration_spinning_fan+0x48>)
 8003b66:	f001 fa7f 	bl	8005068 <HAL_GPIO_WritePin>
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000f20 	.word	0x20000f20
 8003b74:	20000f21 	.word	0x20000f21
 8003b78:	200004d8 	.word	0x200004d8
 8003b7c:	40021000 	.word	0x40021000

08003b80 <dehydration_timer_clock>:

void dehydration_timer_clock(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	if (dehydration_timer_clock_flag==1)
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <dehydration_timer_clock+0x120>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 8086 	bne.w	8003c9a <dehydration_timer_clock+0x11a>

		static int position=0;     // FND position indicator
		static int position_running=0;

		// SYSTICK interrupt 방식
		if (fnd1ms_counter_timer >= 2)   // 2ms reached
 8003b8e:	4b45      	ldr	r3, [pc, #276]	; (8003ca4 <dehydration_timer_clock+0x124>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	f340 8081 	ble.w	8003c9a <dehydration_timer_clock+0x11a>
		{
			ms_counter += 2;   // 2ms
 8003b98:	4b43      	ldr	r3, [pc, #268]	; (8003ca8 <dehydration_timer_clock+0x128>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	4a42      	ldr	r2, [pc, #264]	; (8003ca8 <dehydration_timer_clock+0x128>)
 8003ba0:	6013      	str	r3, [r2, #0]
			fnd1ms_counter_timer=0;
 8003ba2:	4b40      	ldr	r3, [pc, #256]	; (8003ca4 <dehydration_timer_clock+0x124>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
			if (ms_counter > 1000)   // 1000ms reached
 8003ba8:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <dehydration_timer_clock+0x128>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb0:	d917      	bls.n	8003be2 <dehydration_timer_clock+0x62>
			{
				ms_counter = 0;
 8003bb2:	4b3d      	ldr	r3, [pc, #244]	; (8003ca8 <dehydration_timer_clock+0x128>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
				FND_update(dehydration_timer);
 8003bb8:	4b3c      	ldr	r3, [pc, #240]	; (8003cac <dehydration_timer_clock+0x12c>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd f8d5 	bl	8000d6c <FND_update>
				position_running++;
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <dehydration_timer_clock+0x130>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	4a39      	ldr	r2, [pc, #228]	; (8003cb0 <dehydration_timer_clock+0x130>)
 8003bca:	6013      	str	r3, [r2, #0]
				position_running %= 8;
 8003bcc:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <dehydration_timer_clock+0x130>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	425a      	negs	r2, r3
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	f002 0207 	and.w	r2, r2, #7
 8003bda:	bf58      	it	pl
 8003bdc:	4253      	negpl	r3, r2
 8003bde:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <dehydration_timer_clock+0x130>)
 8003be0:	6013      	str	r3, [r2, #0]
			}

			FND4digit_off();
 8003be2:	f7fd f8f7 	bl	8000dd4 <FND4digit_off>
			if (position == 2 || position == 3)
 8003be6:	4b33      	ldr	r3, [pc, #204]	; (8003cb4 <dehydration_timer_clock+0x134>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d003      	beq.n	8003bf6 <dehydration_timer_clock+0x76>
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <dehydration_timer_clock+0x134>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d114      	bne.n	8003c20 <dehydration_timer_clock+0xa0>
			{
				HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[position], GPIO_PIN_SET);
 8003bf6:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <dehydration_timer_clock+0x134>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2f      	ldr	r2, [pc, #188]	; (8003cb8 <dehydration_timer_clock+0x138>)
 8003bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c00:	2201      	movs	r2, #1
 8003c02:	4619      	mov	r1, r3
 8003c04:	482d      	ldr	r0, [pc, #180]	; (8003cbc <dehydration_timer_clock+0x13c>)
 8003c06:	f001 fa2f 	bl	8005068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FND_DATA_PORT, FND[position], GPIO_PIN_RESET);
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <dehydration_timer_clock+0x134>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <dehydration_timer_clock+0x140>)
 8003c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c14:	2200      	movs	r2, #0
 8003c16:	4619      	mov	r1, r3
 8003c18:	482a      	ldr	r0, [pc, #168]	; (8003cc4 <dehydration_timer_clock+0x144>)
 8003c1a:	f001 fa25 	bl	8005068 <HAL_GPIO_WritePin>
 8003c1e:	e02c      	b.n	8003c7a <dehydration_timer_clock+0xfa>
			}
			else
			{
				if (reverse_spin_flag)
 8003c20:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <dehydration_timer_clock+0x148>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d028      	beq.n	8003c7a <dehydration_timer_clock+0xfa>
				{
					if (position_running <= 7 && position_running >= 4)
 8003c28:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <dehydration_timer_clock+0x130>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b07      	cmp	r3, #7
 8003c2e:	dc14      	bgt.n	8003c5a <dehydration_timer_clock+0xda>
 8003c30:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <dehydration_timer_clock+0x130>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	dd10      	ble.n	8003c5a <dehydration_timer_clock+0xda>
					{
						HAL_GPIO_WritePin(FND_COM_PORT,FND_d1, GPIO_PIN_SET);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c3e:	481f      	ldr	r0, [pc, #124]	; (8003cbc <dehydration_timer_clock+0x13c>)
 8003c40:	f001 fa12 	bl	8005068 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(FND_DATA_PORT, FND_reverse_running[position_running], GPIO_PIN_RESET);
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <dehydration_timer_clock+0x130>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a20      	ldr	r2, [pc, #128]	; (8003ccc <dehydration_timer_clock+0x14c>)
 8003c4a:	5cd3      	ldrb	r3, [r2, r3]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4619      	mov	r1, r3
 8003c52:	481c      	ldr	r0, [pc, #112]	; (8003cc4 <dehydration_timer_clock+0x144>)
 8003c54:	f001 fa08 	bl	8005068 <HAL_GPIO_WritePin>
 8003c58:	e00f      	b.n	8003c7a <dehydration_timer_clock+0xfa>
					}
					else
					{
						HAL_GPIO_WritePin(FND_COM_PORT,FND_d10, GPIO_PIN_SET);
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c60:	4816      	ldr	r0, [pc, #88]	; (8003cbc <dehydration_timer_clock+0x13c>)
 8003c62:	f001 fa01 	bl	8005068 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(FND_DATA_PORT, FND_reverse_running[position_running], GPIO_PIN_RESET);
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <dehydration_timer_clock+0x130>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <dehydration_timer_clock+0x14c>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	4619      	mov	r1, r3
 8003c74:	4813      	ldr	r0, [pc, #76]	; (8003cc4 <dehydration_timer_clock+0x144>)
 8003c76:	f001 f9f7 	bl	8005068 <HAL_GPIO_WritePin>
					}
				}
			}
			position++;   // 다음 display할 FND를 가리킨다.
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <dehydration_timer_clock+0x134>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <dehydration_timer_clock+0x134>)
 8003c82:	6013      	str	r3, [r2, #0]
			position %= 4;
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <dehydration_timer_clock+0x134>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	425a      	negs	r2, r3
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	f002 0203 	and.w	r2, r2, #3
 8003c92:	bf58      	it	pl
 8003c94:	4253      	negpl	r3, r2
 8003c96:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <dehydration_timer_clock+0x134>)
 8003c98:	6013      	str	r3, [r2, #0]
		}
	}
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000f1b 	.word	0x20000f1b
 8003ca4:	20000bb0 	.word	0x20000bb0
 8003ca8:	20000f3c 	.word	0x20000f3c
 8003cac:	20000f1e 	.word	0x20000f1e
 8003cb0:	20000f40 	.word	0x20000f40
 8003cb4:	20000f44 	.word	0x20000f44
 8003cb8:	200000d4 	.word	0x200000d4
 8003cbc:	40020800 	.word	0x40020800
 8003cc0:	200001a4 	.word	0x200001a4
 8003cc4:	40020400 	.word	0x40020400
 8003cc8:	20000f05 	.word	0x20000f05
 8003ccc:	200000e4 	.word	0x200000e4

08003cd0 <washing_machine_end_lcd>:
/*** lcd output ***/


// washing machine
void washing_machine_end_lcd(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003cd4:	f7fd f902 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003cd8:	2100      	movs	r1, #0
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f7fd f92c 	bl	8000f38 <move_cursor>
	lcd_string("Washing Machine");
 8003ce0:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <washing_machine_end_lcd+0x28>)
 8003ce2:	f7fd f914 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7fd f925 	bl	8000f38 <move_cursor>
	lcd_string("OFF");
 8003cee:	4803      	ldr	r0, [pc, #12]	; (8003cfc <washing_machine_end_lcd+0x2c>)
 8003cf0:	f7fd f90d 	bl	8000f0e <lcd_string>
}
 8003cf4:	bf00      	nop
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	0800aa08 	.word	0x0800aa08
 8003cfc:	0800aa18 	.word	0x0800aa18

08003d00 <washing_machine_choice_lcd>:

void washing_machine_choice_lcd(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003d04:	f7fd f8ea 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003d08:	2100      	movs	r1, #0
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f7fd f914 	bl	8000f38 <move_cursor>
	lcd_string("0 laund 1 rinse");
 8003d10:	4805      	ldr	r0, [pc, #20]	; (8003d28 <washing_machine_choice_lcd+0x28>)
 8003d12:	f7fd f8fc 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003d16:	2100      	movs	r1, #0
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7fd f90d 	bl	8000f38 <move_cursor>
	lcd_string("2 dehyd 3 ON/OFF");
 8003d1e:	4803      	ldr	r0, [pc, #12]	; (8003d2c <washing_machine_choice_lcd+0x2c>)
 8003d20:	f7fd f8f5 	bl	8000f0e <lcd_string>
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	0800aa1c 	.word	0x0800aa1c
 8003d2c:	0800aa2c 	.word	0x0800aa2c

08003d30 <laundry_choice_lcd>:
// end washing machine

// laundry
void laundry_choice_lcd(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003d34:	f7fd f8d2 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003d38:	2100      	movs	r1, #0
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f7fd f8fc 	bl	8000f38 <move_cursor>
	lcd_string("0 waterLev 1 TIM");
 8003d40:	4805      	ldr	r0, [pc, #20]	; (8003d58 <laundry_choice_lcd+0x28>)
 8003d42:	f7fd f8e4 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003d46:	2100      	movs	r1, #0
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f7fd f8f5 	bl	8000f38 <move_cursor>
	lcd_string("2 RUN 3 RUN AUTO");
 8003d4e:	4803      	ldr	r0, [pc, #12]	; (8003d5c <laundry_choice_lcd+0x2c>)
 8003d50:	f7fd f8dd 	bl	8000f0e <lcd_string>
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	0800aa40 	.word	0x0800aa40
 8003d5c:	0800aa54 	.word	0x0800aa54

08003d60 <laundry_water_level_control_lcd>:

void laundry_water_level_control_lcd(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003d64:	f7fd f8ba 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7fd f8e4 	bl	8000f38 <move_cursor>
	lcd_string("0 +10  1 +20");
 8003d70:	4805      	ldr	r0, [pc, #20]	; (8003d88 <laundry_water_level_control_lcd+0x28>)
 8003d72:	f7fd f8cc 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003d76:	2100      	movs	r1, #0
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f7fd f8dd 	bl	8000f38 <move_cursor>
	lcd_string("2 -10  3 store");
 8003d7e:	4803      	ldr	r0, [pc, #12]	; (8003d8c <laundry_water_level_control_lcd+0x2c>)
 8003d80:	f7fd f8c5 	bl	8000f0e <lcd_string>
}
 8003d84:	bf00      	nop
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	0800aa68 	.word	0x0800aa68
 8003d8c:	0800aa78 	.word	0x0800aa78

08003d90 <laundry_timer_setting_lcd>:

void laundry_timer_setting_lcd(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003d94:	f7fd f8a2 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003d98:	2100      	movs	r1, #0
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f7fd f8cc 	bl	8000f38 <move_cursor>
	lcd_string("0 +1  1 +10");
 8003da0:	4805      	ldr	r0, [pc, #20]	; (8003db8 <laundry_timer_setting_lcd+0x28>)
 8003da2:	f7fd f8b4 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003da6:	2100      	movs	r1, #0
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7fd f8c5 	bl	8000f38 <move_cursor>
	lcd_string("2 -1  3 store");
 8003dae:	4803      	ldr	r0, [pc, #12]	; (8003dbc <laundry_timer_setting_lcd+0x2c>)
 8003db0:	f7fd f8ad 	bl	8000f0e <lcd_string>
}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	0800aa88 	.word	0x0800aa88
 8003dbc:	0800aa94 	.word	0x0800aa94

08003dc0 <laundry_run_for_time_set_lcd>:
	lcd_string("Complete!!!");
	HAL_Delay(1000);
}

void laundry_run_for_time_set_lcd(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003dc4:	f7fd f88a 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f7fd f8b4 	bl	8000f38 <move_cursor>
	lcd_string("Laundry");
 8003dd0:	4805      	ldr	r0, [pc, #20]	; (8003de8 <laundry_run_for_time_set_lcd+0x28>)
 8003dd2:	f7fd f89c 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7fd f8ad 	bl	8000f38 <move_cursor>
	lcd_string("Running!!!");
 8003dde:	4803      	ldr	r0, [pc, #12]	; (8003dec <laundry_run_for_time_set_lcd+0x2c>)
 8003de0:	f7fd f895 	bl	8000f0e <lcd_string>
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	0800aac0 	.word	0x0800aac0
 8003dec:	0800aac8 	.word	0x0800aac8

08003df0 <laundry_run_for_time_finish_lcd>:

void laundry_run_for_time_finish_lcd(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003df4:	f7fd f872 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003df8:	2100      	movs	r1, #0
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7fd f89c 	bl	8000f38 <move_cursor>
	lcd_string("Laundry Set Time");
 8003e00:	4807      	ldr	r0, [pc, #28]	; (8003e20 <laundry_run_for_time_finish_lcd+0x30>)
 8003e02:	f7fd f884 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003e06:	2100      	movs	r1, #0
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7fd f895 	bl	8000f38 <move_cursor>
	lcd_string("Finish!!!");
 8003e0e:	4805      	ldr	r0, [pc, #20]	; (8003e24 <laundry_run_for_time_finish_lcd+0x34>)
 8003e10:	f7fd f87d 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 8003e14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e18:	f000 fa72 	bl	8004300 <HAL_Delay>
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	0800aad4 	.word	0x0800aad4
 8003e24:	0800aae8 	.word	0x0800aae8

08003e28 <laundry_run_for_auto_lcd>:

void laundry_run_for_auto_lcd(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003e2c:	f7fd f856 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003e30:	2100      	movs	r1, #0
 8003e32:	2000      	movs	r0, #0
 8003e34:	f7fd f880 	bl	8000f38 <move_cursor>
	lcd_string("Laundry");
 8003e38:	4805      	ldr	r0, [pc, #20]	; (8003e50 <laundry_run_for_auto_lcd+0x28>)
 8003e3a:	f7fd f868 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2001      	movs	r0, #1
 8003e42:	f7fd f879 	bl	8000f38 <move_cursor>
	lcd_string("AUTO Running!!!");
 8003e46:	4803      	ldr	r0, [pc, #12]	; (8003e54 <laundry_run_for_auto_lcd+0x2c>)
 8003e48:	f7fd f861 	bl	8000f0e <lcd_string>
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	0800aac0 	.word	0x0800aac0
 8003e54:	0800aaf4 	.word	0x0800aaf4

08003e58 <laundry_run_auto_finish_lcd>:

void laundry_run_auto_finish_lcd(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003e5c:	f7fd f83e 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003e60:	2100      	movs	r1, #0
 8003e62:	2000      	movs	r0, #0
 8003e64:	f7fd f868 	bl	8000f38 <move_cursor>
	lcd_string("Laundry AutoTime");
 8003e68:	4807      	ldr	r0, [pc, #28]	; (8003e88 <laundry_run_auto_finish_lcd+0x30>)
 8003e6a:	f7fd f850 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003e6e:	2100      	movs	r1, #0
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7fd f861 	bl	8000f38 <move_cursor>
	lcd_string("Finish!!!");
 8003e76:	4805      	ldr	r0, [pc, #20]	; (8003e8c <laundry_run_auto_finish_lcd+0x34>)
 8003e78:	f7fd f849 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 8003e7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e80:	f000 fa3e 	bl	8004300 <HAL_Delay>
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	0800ab04 	.word	0x0800ab04
 8003e8c:	0800aae8 	.word	0x0800aae8

08003e90 <laundry_time_has_not_been_set_lcd>:

void laundry_time_has_not_been_set_lcd(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003e94:	f7fd f822 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7fd f84c 	bl	8000f38 <move_cursor>
	lcd_string("Time has not");
 8003ea0:	4807      	ldr	r0, [pc, #28]	; (8003ec0 <laundry_time_has_not_been_set_lcd+0x30>)
 8003ea2:	f7fd f834 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	f7fd f845 	bl	8000f38 <move_cursor>
	lcd_string("been set!!!");
 8003eae:	4805      	ldr	r0, [pc, #20]	; (8003ec4 <laundry_time_has_not_been_set_lcd+0x34>)
 8003eb0:	f7fd f82d 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 8003eb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003eb8:	f000 fa22 	bl	8004300 <HAL_Delay>
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	0800ab18 	.word	0x0800ab18
 8003ec4:	0800ab28 	.word	0x0800ab28

08003ec8 <rinsing_choice_lcd>:
// end laundry //

// rinsing
void rinsing_choice_lcd(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003ecc:	f7fd f806 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fd f830 	bl	8000f38 <move_cursor>
	lcd_string("0 waterLev 1 TIM");
 8003ed8:	4805      	ldr	r0, [pc, #20]	; (8003ef0 <rinsing_choice_lcd+0x28>)
 8003eda:	f7fd f818 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003ede:	2100      	movs	r1, #0
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f7fd f829 	bl	8000f38 <move_cursor>
	lcd_string("2 RUN 3 RUN AUTO");
 8003ee6:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <rinsing_choice_lcd+0x2c>)
 8003ee8:	f7fd f811 	bl	8000f0e <lcd_string>
}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	0800aa40 	.word	0x0800aa40
 8003ef4:	0800aa54 	.word	0x0800aa54

08003ef8 <rinsing_water_level_control_lcd>:

void rinsing_water_level_control_lcd(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003efc:	f7fc ffee 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003f00:	2100      	movs	r1, #0
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7fd f818 	bl	8000f38 <move_cursor>
	lcd_string("0 +10  1 +20");
 8003f08:	4805      	ldr	r0, [pc, #20]	; (8003f20 <rinsing_water_level_control_lcd+0x28>)
 8003f0a:	f7fd f800 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	2001      	movs	r0, #1
 8003f12:	f7fd f811 	bl	8000f38 <move_cursor>
	lcd_string("2 -10  3 store");
 8003f16:	4803      	ldr	r0, [pc, #12]	; (8003f24 <rinsing_water_level_control_lcd+0x2c>)
 8003f18:	f7fc fff9 	bl	8000f0e <lcd_string>
}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	0800aa68 	.word	0x0800aa68
 8003f24:	0800aa78 	.word	0x0800aa78

08003f28 <rinsing_timer_setting_lcd>:

void rinsing_timer_setting_lcd(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003f2c:	f7fc ffd6 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003f30:	2100      	movs	r1, #0
 8003f32:	2000      	movs	r0, #0
 8003f34:	f7fd f800 	bl	8000f38 <move_cursor>
	lcd_string("0 +1  1 +10");
 8003f38:	4805      	ldr	r0, [pc, #20]	; (8003f50 <rinsing_timer_setting_lcd+0x28>)
 8003f3a:	f7fc ffe8 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003f3e:	2100      	movs	r1, #0
 8003f40:	2001      	movs	r0, #1
 8003f42:	f7fc fff9 	bl	8000f38 <move_cursor>
	lcd_string("2 -1  3 store");
 8003f46:	4803      	ldr	r0, [pc, #12]	; (8003f54 <rinsing_timer_setting_lcd+0x2c>)
 8003f48:	f7fc ffe1 	bl	8000f0e <lcd_string>
}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	0800aa88 	.word	0x0800aa88
 8003f54:	0800aa94 	.word	0x0800aa94

08003f58 <rinsing_timer_setting_store_lcd>:

void rinsing_timer_setting_store_lcd(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003f5c:	f7fc ffbe 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003f60:	2100      	movs	r1, #0
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7fc ffe8 	bl	8000f38 <move_cursor>
	lcd_string("Timer Setting");
 8003f68:	4807      	ldr	r0, [pc, #28]	; (8003f88 <rinsing_timer_setting_store_lcd+0x30>)
 8003f6a:	f7fc ffd0 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003f6e:	2100      	movs	r1, #0
 8003f70:	2001      	movs	r0, #1
 8003f72:	f7fc ffe1 	bl	8000f38 <move_cursor>
	lcd_string("Complete!!!");
 8003f76:	4805      	ldr	r0, [pc, #20]	; (8003f8c <rinsing_timer_setting_store_lcd+0x34>)
 8003f78:	f7fc ffc9 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 8003f7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f80:	f000 f9be 	bl	8004300 <HAL_Delay>
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	0800aaa4 	.word	0x0800aaa4
 8003f8c:	0800aab4 	.word	0x0800aab4

08003f90 <rinsing_run_for_time_set_lcd>:

void rinsing_run_for_time_set_lcd(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003f94:	f7fc ffa2 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f7fc ffcc 	bl	8000f38 <move_cursor>
	lcd_string("Rinsing");
 8003fa0:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <rinsing_run_for_time_set_lcd+0x28>)
 8003fa2:	f7fc ffb4 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	2001      	movs	r0, #1
 8003faa:	f7fc ffc5 	bl	8000f38 <move_cursor>
	lcd_string("Running!!!");
 8003fae:	4803      	ldr	r0, [pc, #12]	; (8003fbc <rinsing_run_for_time_set_lcd+0x2c>)
 8003fb0:	f7fc ffad 	bl	8000f0e <lcd_string>
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	0800ab34 	.word	0x0800ab34
 8003fbc:	0800aac8 	.word	0x0800aac8

08003fc0 <rinsing_run_for_time_finish_lcd>:

void rinsing_run_for_time_finish_lcd(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003fc4:	f7fc ff8a 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f7fc ffb4 	bl	8000f38 <move_cursor>
	lcd_string("rinsing Set Time");
 8003fd0:	4807      	ldr	r0, [pc, #28]	; (8003ff0 <rinsing_run_for_time_finish_lcd+0x30>)
 8003fd2:	f7fc ff9c 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f7fc ffad 	bl	8000f38 <move_cursor>
	lcd_string("Finish!!!");
 8003fde:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <rinsing_run_for_time_finish_lcd+0x34>)
 8003fe0:	f7fc ff95 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 8003fe4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003fe8:	f000 f98a 	bl	8004300 <HAL_Delay>
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	0800ab3c 	.word	0x0800ab3c
 8003ff4:	0800aae8 	.word	0x0800aae8

08003ff8 <rinsing_run_for_auto_lcd>:

void rinsing_run_for_auto_lcd(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8003ffc:	f7fc ff6e 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8004000:	2100      	movs	r1, #0
 8004002:	2000      	movs	r0, #0
 8004004:	f7fc ff98 	bl	8000f38 <move_cursor>
	lcd_string("rinsing");
 8004008:	4805      	ldr	r0, [pc, #20]	; (8004020 <rinsing_run_for_auto_lcd+0x28>)
 800400a:	f7fc ff80 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 800400e:	2100      	movs	r1, #0
 8004010:	2001      	movs	r0, #1
 8004012:	f7fc ff91 	bl	8000f38 <move_cursor>
	lcd_string("AUTO Running!!!");
 8004016:	4803      	ldr	r0, [pc, #12]	; (8004024 <rinsing_run_for_auto_lcd+0x2c>)
 8004018:	f7fc ff79 	bl	8000f0e <lcd_string>
}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	0800ab50 	.word	0x0800ab50
 8004024:	0800aaf4 	.word	0x0800aaf4

08004028 <rinsing_run_auto_finish_lcd>:

void rinsing_run_auto_finish_lcd(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 800402c:	f7fc ff56 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8004030:	2100      	movs	r1, #0
 8004032:	2000      	movs	r0, #0
 8004034:	f7fc ff80 	bl	8000f38 <move_cursor>
	lcd_string("rinsing AutoTime");
 8004038:	4807      	ldr	r0, [pc, #28]	; (8004058 <rinsing_run_auto_finish_lcd+0x30>)
 800403a:	f7fc ff68 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 800403e:	2100      	movs	r1, #0
 8004040:	2001      	movs	r0, #1
 8004042:	f7fc ff79 	bl	8000f38 <move_cursor>
	lcd_string("Finish!!!");
 8004046:	4805      	ldr	r0, [pc, #20]	; (800405c <rinsing_run_auto_finish_lcd+0x34>)
 8004048:	f7fc ff61 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 800404c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004050:	f000 f956 	bl	8004300 <HAL_Delay>
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}
 8004058:	0800ab58 	.word	0x0800ab58
 800405c:	0800aae8 	.word	0x0800aae8

08004060 <rinsing_time_has_not_been_set_lcd>:

void rinsing_time_has_not_been_set_lcd(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8004064:	f7fc ff3a 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8004068:	2100      	movs	r1, #0
 800406a:	2000      	movs	r0, #0
 800406c:	f7fc ff64 	bl	8000f38 <move_cursor>
	lcd_string("Time has not");
 8004070:	4807      	ldr	r0, [pc, #28]	; (8004090 <rinsing_time_has_not_been_set_lcd+0x30>)
 8004072:	f7fc ff4c 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 8004076:	2100      	movs	r1, #0
 8004078:	2001      	movs	r0, #1
 800407a:	f7fc ff5d 	bl	8000f38 <move_cursor>
	lcd_string("been set!!!");
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <rinsing_time_has_not_been_set_lcd+0x34>)
 8004080:	f7fc ff45 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 8004084:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004088:	f000 f93a 	bl	8004300 <HAL_Delay>
}
 800408c:	bf00      	nop
 800408e:	bd80      	pop	{r7, pc}
 8004090:	0800ab18 	.word	0x0800ab18
 8004094:	0800ab28 	.word	0x0800ab28

08004098 <dehydration_begin_lcd>:
// end rinsing //

// dehydration
void dehydration_begin_lcd(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 800409c:	f7fc ff1e 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 80040a0:	2100      	movs	r1, #0
 80040a2:	2000      	movs	r0, #0
 80040a4:	f7fc ff48 	bl	8000f38 <move_cursor>
	lcd_string("SPEED 0UP 1DOWN");
 80040a8:	4805      	ldr	r0, [pc, #20]	; (80040c0 <dehydration_begin_lcd+0x28>)
 80040aa:	f7fc ff30 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 80040ae:	2100      	movs	r1, #0
 80040b0:	2001      	movs	r0, #1
 80040b2:	f7fc ff41 	bl	8000f38 <move_cursor>
	lcd_string("2 RUN 3 STOP");
 80040b6:	4803      	ldr	r0, [pc, #12]	; (80040c4 <dehydration_begin_lcd+0x2c>)
 80040b8:	f7fc ff29 	bl	8000f0e <lcd_string>
}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	0800ab6c 	.word	0x0800ab6c
 80040c4:	0800ab7c 	.word	0x0800ab7c

080040c8 <dehydration_speed_up_lcd>:

void dehydration_speed_up_lcd(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 80040cc:	f7fc ff06 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 80040d0:	2100      	movs	r1, #0
 80040d2:	2000      	movs	r0, #0
 80040d4:	f7fc ff30 	bl	8000f38 <move_cursor>
	lcd_string("0 +1  1 +5");
 80040d8:	4805      	ldr	r0, [pc, #20]	; (80040f0 <dehydration_speed_up_lcd+0x28>)
 80040da:	f7fc ff18 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 80040de:	2100      	movs	r1, #0
 80040e0:	2001      	movs	r0, #1
 80040e2:	f7fc ff29 	bl	8000f38 <move_cursor>
	lcd_string("2 +10  3 store");
 80040e6:	4803      	ldr	r0, [pc, #12]	; (80040f4 <dehydration_speed_up_lcd+0x2c>)
 80040e8:	f7fc ff11 	bl	8000f0e <lcd_string>
}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	0800ab8c 	.word	0x0800ab8c
 80040f4:	0800ab98 	.word	0x0800ab98

080040f8 <dehydration_speed_down_lcd>:

void dehydration_speed_down_lcd(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 80040fc:	f7fc feee 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8004100:	2100      	movs	r1, #0
 8004102:	2000      	movs	r0, #0
 8004104:	f7fc ff18 	bl	8000f38 <move_cursor>
	lcd_string("0 -1  1 -5");
 8004108:	4805      	ldr	r0, [pc, #20]	; (8004120 <dehydration_speed_down_lcd+0x28>)
 800410a:	f7fc ff00 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 800410e:	2100      	movs	r1, #0
 8004110:	2001      	movs	r0, #1
 8004112:	f7fc ff11 	bl	8000f38 <move_cursor>
	lcd_string("2 -10  3 store");
 8004116:	4803      	ldr	r0, [pc, #12]	; (8004124 <dehydration_speed_down_lcd+0x2c>)
 8004118:	f7fc fef9 	bl	8000f0e <lcd_string>
}
 800411c:	bf00      	nop
 800411e:	bd80      	pop	{r7, pc}
 8004120:	0800aba8 	.word	0x0800aba8
 8004124:	0800aa78 	.word	0x0800aa78

08004128 <dehydration_start_lcd>:

void dehydration_start_lcd(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 800412c:	f7fc fed6 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8004130:	2100      	movs	r1, #0
 8004132:	2000      	movs	r0, #0
 8004134:	f7fc ff00 	bl	8000f38 <move_cursor>
	lcd_string("dehydration");
 8004138:	4805      	ldr	r0, [pc, #20]	; (8004150 <dehydration_start_lcd+0x28>)
 800413a:	f7fc fee8 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 800413e:	2100      	movs	r1, #0
 8004140:	2001      	movs	r0, #1
 8004142:	f7fc fef9 	bl	8000f38 <move_cursor>
	lcd_string("Start!!!");
 8004146:	4803      	ldr	r0, [pc, #12]	; (8004154 <dehydration_start_lcd+0x2c>)
 8004148:	f7fc fee1 	bl	8000f0e <lcd_string>
}
 800414c:	bf00      	nop
 800414e:	bd80      	pop	{r7, pc}
 8004150:	0800abb4 	.word	0x0800abb4
 8004154:	0800abc0 	.word	0x0800abc0

08004158 <dehydration_stop_lcd>:

void dehydration_stop_lcd(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 800415c:	f7fc febe 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8004160:	2100      	movs	r1, #0
 8004162:	2000      	movs	r0, #0
 8004164:	f7fc fee8 	bl	8000f38 <move_cursor>
	lcd_string("dehydration");
 8004168:	4807      	ldr	r0, [pc, #28]	; (8004188 <dehydration_stop_lcd+0x30>)
 800416a:	f7fc fed0 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 800416e:	2100      	movs	r1, #0
 8004170:	2001      	movs	r0, #1
 8004172:	f7fc fee1 	bl	8000f38 <move_cursor>
	lcd_string("Stop!!!");
 8004176:	4805      	ldr	r0, [pc, #20]	; (800418c <dehydration_stop_lcd+0x34>)
 8004178:	f7fc fec9 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 800417c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004180:	f000 f8be 	bl	8004300 <HAL_Delay>
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}
 8004188:	0800abb4 	.word	0x0800abb4
 800418c:	0800abcc 	.word	0x0800abcc

08004190 <dehydration_store_lcd>:

void dehydration_store_lcd(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 8004194:	f7fc fea2 	bl	8000edc <i2c_lcd_init>
	move_cursor(0, 0);
 8004198:	2100      	movs	r1, #0
 800419a:	2000      	movs	r0, #0
 800419c:	f7fc fecc 	bl	8000f38 <move_cursor>
	lcd_string("Speed Setting");
 80041a0:	4807      	ldr	r0, [pc, #28]	; (80041c0 <dehydration_store_lcd+0x30>)
 80041a2:	f7fc feb4 	bl	8000f0e <lcd_string>
	move_cursor(1, 0);
 80041a6:	2100      	movs	r1, #0
 80041a8:	2001      	movs	r0, #1
 80041aa:	f7fc fec5 	bl	8000f38 <move_cursor>
	lcd_string("Complete!!!");
 80041ae:	4805      	ldr	r0, [pc, #20]	; (80041c4 <dehydration_store_lcd+0x34>)
 80041b0:	f7fc fead 	bl	8000f0e <lcd_string>
	HAL_Delay(2000);
 80041b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80041b8:	f000 f8a2 	bl	8004300 <HAL_Delay>
}
 80041bc:	bf00      	nop
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	0800abd4 	.word	0x0800abd4
 80041c4:	0800aab4 	.word	0x0800aab4

080041c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80041c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004200 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041ce:	490e      	ldr	r1, [pc, #56]	; (8004208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041d0:	4a0e      	ldr	r2, [pc, #56]	; (800420c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041d4:	e002      	b.n	80041dc <LoopCopyDataInit>

080041d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041da:	3304      	adds	r3, #4

080041dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041e0:	d3f9      	bcc.n	80041d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041e2:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041e4:	4c0b      	ldr	r4, [pc, #44]	; (8004214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041e8:	e001      	b.n	80041ee <LoopFillZerobss>

080041ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041ec:	3204      	adds	r2, #4

080041ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041f0:	d3fb      	bcc.n	80041ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041f2:	f7fe f981 	bl	80024f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041f6:	f005 fe8b 	bl	8009f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041fa:	f7fc ff3d 	bl	8001078 <main>
  bx  lr    
 80041fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004200:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004208:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800420c:	0800ac70 	.word	0x0800ac70
  ldr r2, =_sbss
 8004210:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8004214:	20000f5c 	.word	0x20000f5c

08004218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004218:	e7fe      	b.n	8004218 <ADC_IRQHandler>
	...

0800421c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004220:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_Init+0x40>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <HAL_Init+0x40>)
 8004226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_Init+0x40>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_Init+0x40>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_Init+0x40>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_Init+0x40>)
 800423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004244:	2003      	movs	r0, #3
 8004246:	f000 f94f 	bl	80044e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800424a:	2000      	movs	r0, #0
 800424c:	f000 f808 	bl	8004260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004250:	f7fd fc6c 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023c00 	.word	0x40023c00

08004260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_InitTick+0x54>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_InitTick+0x58>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	4619      	mov	r1, r3
 8004272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004276:	fbb3 f3f1 	udiv	r3, r3, r1
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f967 	bl	8004552 <HAL_SYSTICK_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e00e      	b.n	80042ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b0f      	cmp	r3, #15
 8004292:	d80a      	bhi.n	80042aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004294:	2200      	movs	r2, #0
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f000 f92f 	bl	80044fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042a0:	4a06      	ldr	r2, [pc, #24]	; (80042bc <HAL_InitTick+0x5c>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000114 	.word	0x20000114
 80042b8:	20000120 	.word	0x20000120
 80042bc:	2000011c 	.word	0x2000011c

080042c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_IncTick+0x20>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_IncTick+0x24>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4413      	add	r3, r2
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_IncTick+0x24>)
 80042d2:	6013      	str	r3, [r2, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000120 	.word	0x20000120
 80042e4:	20000f48 	.word	0x20000f48

080042e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return uwTick;
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_GetTick+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000f48 	.word	0x20000f48

08004300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004308:	f7ff ffee 	bl	80042e8 <HAL_GetTick>
 800430c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d005      	beq.n	8004326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <HAL_Delay+0x44>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004326:	bf00      	nop
 8004328:	f7ff ffde 	bl	80042e8 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	429a      	cmp	r2, r3
 8004336:	d8f7      	bhi.n	8004328 <HAL_Delay+0x28>
  {
  }
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000120 	.word	0x20000120

08004348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <__NVIC_SetPriorityGrouping+0x44>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004364:	4013      	ands	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437a:	4a04      	ldr	r2, [pc, #16]	; (800438c <__NVIC_SetPriorityGrouping+0x44>)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	60d3      	str	r3, [r2, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	f003 0307 	and.w	r3, r3, #7
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000ed00 	.word	0xe000ed00

080043ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	db0b      	blt.n	80043d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	f003 021f 	and.w	r2, r3, #31
 80043c4:	4907      	ldr	r1, [pc, #28]	; (80043e4 <__NVIC_EnableIRQ+0x38>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2001      	movs	r0, #1
 80043ce:	fa00 f202 	lsl.w	r2, r0, r2
 80043d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000e100 	.word	0xe000e100

080043e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	6039      	str	r1, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	db0a      	blt.n	8004412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	490c      	ldr	r1, [pc, #48]	; (8004434 <__NVIC_SetPriority+0x4c>)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	0112      	lsls	r2, r2, #4
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	440b      	add	r3, r1
 800440c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004410:	e00a      	b.n	8004428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4908      	ldr	r1, [pc, #32]	; (8004438 <__NVIC_SetPriority+0x50>)
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	3b04      	subs	r3, #4
 8004420:	0112      	lsls	r2, r2, #4
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	440b      	add	r3, r1
 8004426:	761a      	strb	r2, [r3, #24]
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000e100 	.word	0xe000e100
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f1c3 0307 	rsb	r3, r3, #7
 8004456:	2b04      	cmp	r3, #4
 8004458:	bf28      	it	cs
 800445a:	2304      	movcs	r3, #4
 800445c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3304      	adds	r3, #4
 8004462:	2b06      	cmp	r3, #6
 8004464:	d902      	bls.n	800446c <NVIC_EncodePriority+0x30>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3b03      	subs	r3, #3
 800446a:	e000      	b.n	800446e <NVIC_EncodePriority+0x32>
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	f04f 32ff 	mov.w	r2, #4294967295
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	401a      	ands	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004484:	f04f 31ff 	mov.w	r1, #4294967295
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	43d9      	mvns	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	4313      	orrs	r3, r2
         );
}
 8004496:	4618      	mov	r0, r3
 8004498:	3724      	adds	r7, #36	; 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044b4:	d301      	bcc.n	80044ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044b6:	2301      	movs	r3, #1
 80044b8:	e00f      	b.n	80044da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <SysTick_Config+0x40>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3b01      	subs	r3, #1
 80044c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044c2:	210f      	movs	r1, #15
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	f7ff ff8e 	bl	80043e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <SysTick_Config+0x40>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <SysTick_Config+0x40>)
 80044d4:	2207      	movs	r2, #7
 80044d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	e000e010 	.word	0xe000e010

080044e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff29 	bl	8004348 <__NVIC_SetPriorityGrouping>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004510:	f7ff ff3e 	bl	8004390 <__NVIC_GetPriorityGrouping>
 8004514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	6978      	ldr	r0, [r7, #20]
 800451c:	f7ff ff8e 	bl	800443c <NVIC_EncodePriority>
 8004520:	4602      	mov	r2, r0
 8004522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004526:	4611      	mov	r1, r2
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ff5d 	bl	80043e8 <__NVIC_SetPriority>
}
 800452e:	bf00      	nop
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	4603      	mov	r3, r0
 800453e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff ff31 	bl	80043ac <__NVIC_EnableIRQ>
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff ffa2 	bl	80044a4 <SysTick_Config>
 8004560:	4603      	mov	r3, r0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004578:	f7ff feb6 	bl	80042e8 <HAL_GetTick>
 800457c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d008      	beq.n	800459c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2280      	movs	r2, #128	; 0x80
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e052      	b.n	8004642 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0216 	bic.w	r2, r2, #22
 80045aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d103      	bne.n	80045cc <HAL_DMA_Abort+0x62>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0208 	bic.w	r2, r2, #8
 80045da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ec:	e013      	b.n	8004616 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ee:	f7ff fe7b 	bl	80042e8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b05      	cmp	r3, #5
 80045fa:	d90c      	bls.n	8004616 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2203      	movs	r2, #3
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e015      	b.n	8004642 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e4      	bne.n	80045ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	223f      	movs	r2, #63	; 0x3f
 800462a:	409a      	lsls	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d004      	beq.n	8004668 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e00c      	b.n	8004682 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2205      	movs	r2, #5
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e06c      	b.n	800477c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2223      	movs	r2, #35	; 0x23
 80046b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fd fa61 	bl	8001b7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	4b31      	ldr	r3, [pc, #196]	; (8004784 <HAL_ETH_Init+0xf4>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	4a30      	ldr	r2, [pc, #192]	; (8004784 <HAL_ETH_Init+0xf4>)
 80046c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ca:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <HAL_ETH_Init+0xf4>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <HAL_ETH_Init+0xf8>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4a2b      	ldr	r2, [pc, #172]	; (8004788 <HAL_ETH_Init+0xf8>)
 80046dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80046e2:	4b29      	ldr	r3, [pc, #164]	; (8004788 <HAL_ETH_Init+0xf8>)
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4927      	ldr	r1, [pc, #156]	; (8004788 <HAL_ETH_Init+0xf8>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80046f0:	4b25      	ldr	r3, [pc, #148]	; (8004788 <HAL_ETH_Init+0xf8>)
 80046f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800470a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800470c:	f7ff fdec 	bl	80042e8 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004712:	e011      	b.n	8004738 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004714:	f7ff fde8 	bl	80042e8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004722:	d909      	bls.n	8004738 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2204      	movs	r2, #4
 8004728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	22e0      	movs	r2, #224	; 0xe0
 8004730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e021      	b.n	800477c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e4      	bne.n	8004714 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f958 	bl	8004a00 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f9ff 	bl	8004b54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fa55 	bl	8004c06 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	461a      	mov	r2, r3
 8004762:	2100      	movs	r1, #0
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f9bd 	bl	8004ae4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2210      	movs	r2, #16
 8004776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	40013800 	.word	0x40013800

0800478c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4b51      	ldr	r3, [pc, #324]	; (80048e8 <ETH_SetMACConfig+0x15c>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	7c1b      	ldrb	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <ETH_SetMACConfig+0x28>
 80047ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047b2:	e000      	b.n	80047b6 <ETH_SetMACConfig+0x2a>
 80047b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	7c5b      	ldrb	r3, [r3, #17]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <ETH_SetMACConfig+0x38>
 80047be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047c2:	e000      	b.n	80047c6 <ETH_SetMACConfig+0x3a>
 80047c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80047c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80047cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	7fdb      	ldrb	r3, [r3, #31]
 80047d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80047d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80047da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	7f92      	ldrb	r2, [r2, #30]
 80047e0:	2a00      	cmp	r2, #0
 80047e2:	d102      	bne.n	80047ea <ETH_SetMACConfig+0x5e>
 80047e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047e8:	e000      	b.n	80047ec <ETH_SetMACConfig+0x60>
 80047ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80047ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	7f1b      	ldrb	r3, [r3, #28]
 80047f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80047f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80047fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	791b      	ldrb	r3, [r3, #4]
 8004800:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004802:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	f892 2020 	ldrb.w	r2, [r2, #32]
 800480a:	2a00      	cmp	r2, #0
 800480c:	d102      	bne.n	8004814 <ETH_SetMACConfig+0x88>
 800480e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004812:	e000      	b.n	8004816 <ETH_SetMACConfig+0x8a>
 8004814:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004816:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	7bdb      	ldrb	r3, [r3, #15]
 800481c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800481e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004824:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800482e:	4313      	orrs	r3, r2
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004846:	2001      	movs	r0, #1
 8004848:	f7ff fd5a 	bl	8004300 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004862:	4013      	ands	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004872:	2a00      	cmp	r2, #0
 8004874:	d101      	bne.n	800487a <ETH_SetMACConfig+0xee>
 8004876:	2280      	movs	r2, #128	; 0x80
 8004878:	e000      	b.n	800487c <ETH_SetMACConfig+0xf0>
 800487a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800487c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004882:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800488a:	2a01      	cmp	r2, #1
 800488c:	d101      	bne.n	8004892 <ETH_SetMACConfig+0x106>
 800488e:	2208      	movs	r2, #8
 8004890:	e000      	b.n	8004894 <ETH_SetMACConfig+0x108>
 8004892:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004894:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800489c:	2a01      	cmp	r2, #1
 800489e:	d101      	bne.n	80048a4 <ETH_SetMACConfig+0x118>
 80048a0:	2204      	movs	r2, #4
 80048a2:	e000      	b.n	80048a6 <ETH_SetMACConfig+0x11a>
 80048a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80048a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80048ae:	2a01      	cmp	r2, #1
 80048b0:	d101      	bne.n	80048b6 <ETH_SetMACConfig+0x12a>
 80048b2:	2202      	movs	r2, #2
 80048b4:	e000      	b.n	80048b8 <ETH_SetMACConfig+0x12c>
 80048b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048b8:	4313      	orrs	r3, r2
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f7ff fd15 	bl	8004300 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	619a      	str	r2, [r3, #24]
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	ff20810f 	.word	0xff20810f

080048ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4b3d      	ldr	r3, [pc, #244]	; (80049fc <ETH_SetDMAConfig+0x110>)
 8004906:	4013      	ands	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	7b1b      	ldrb	r3, [r3, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <ETH_SetDMAConfig+0x2c>
 8004912:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004916:	e000      	b.n	800491a <ETH_SetDMAConfig+0x2e>
 8004918:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	7b5b      	ldrb	r3, [r3, #13]
 800491e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004920:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	7f52      	ldrb	r2, [r2, #29]
 8004926:	2a00      	cmp	r2, #0
 8004928:	d102      	bne.n	8004930 <ETH_SetDMAConfig+0x44>
 800492a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800492e:	e000      	b.n	8004932 <ETH_SetDMAConfig+0x46>
 8004930:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004932:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	7b9b      	ldrb	r3, [r3, #14]
 8004938:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800493a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004940:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	7f1b      	ldrb	r3, [r3, #28]
 8004946:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004948:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	7f9b      	ldrb	r3, [r3, #30]
 800494e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004950:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004956:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800495e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004960:	4313      	orrs	r3, r2
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004970:	461a      	mov	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004982:	2001      	movs	r0, #1
 8004984:	f7ff fcbc 	bl	8004300 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004990:	461a      	mov	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	791b      	ldrb	r3, [r3, #4]
 800499a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80049a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80049b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80049c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049e0:	2001      	movs	r0, #1
 80049e2:	f7ff fc8d 	bl	8004300 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ee:	461a      	mov	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	f8de3f23 	.word	0xf8de3f23

08004a00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b0a6      	sub	sp, #152	; 0x98
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004a14:	2300      	movs	r3, #0
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fe86 	bl	800478c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004aba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ac0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ad0:	f107 0308 	add.w	r3, r7, #8
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ff08 	bl	80048ec <ETH_SetDMAConfig>
}
 8004adc:	bf00      	nop
 8004ade:	3798      	adds	r7, #152	; 0x98
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3305      	adds	r3, #5
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	3204      	adds	r2, #4
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <ETH_MACAddressConfig+0x68>)
 8004b06:	4413      	add	r3, r2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3303      	adds	r3, #3
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	061a      	lsls	r2, r3, #24
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3302      	adds	r3, #2
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3301      	adds	r3, #1
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <ETH_MACAddressConfig+0x6c>)
 8004b36:	4413      	add	r3, r2
 8004b38:	461a      	mov	r2, r3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	6013      	str	r3, [r2, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40028040 	.word	0x40028040
 8004b50:	40028044 	.word	0x40028044

08004b54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e03e      	b.n	8004be0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68d9      	ldr	r1, [r3, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	440b      	add	r3, r1
 8004b72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	3206      	adds	r2, #6
 8004b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d80c      	bhi.n	8004bc4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68d9      	ldr	r1, [r3, #12]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	440b      	add	r3, r1
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	e004      	b.n	8004bce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d9bd      	bls.n	8004b62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf8:	611a      	str	r2, [r3, #16]
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e046      	b.n	8004ca2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6919      	ldr	r1, [r3, #16]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	440b      	add	r3, r1
 8004c24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2200      	movs	r2, #0
 8004c42:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c50:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004c58:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	3212      	adds	r2, #18
 8004c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d80c      	bhi.n	8004c92 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6919      	ldr	r1, [r3, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	440b      	add	r3, r1
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	60da      	str	r2, [r3, #12]
 8004c90:	e004      	b.n	8004c9c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d9b5      	bls.n	8004c14 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd2:	60da      	str	r2, [r3, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	e177      	b.n	8004fec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	f040 8166 	bne.w	8004fe6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d005      	beq.n	8004d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d130      	bne.n	8004d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4013      	ands	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d68:	2201      	movs	r2, #1
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 0201 	and.w	r2, r3, #1
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d017      	beq.n	8004dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	2203      	movs	r2, #3
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d123      	bne.n	8004e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	08da      	lsrs	r2, r3, #3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3208      	adds	r2, #8
 8004de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	220f      	movs	r2, #15
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	08da      	lsrs	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3208      	adds	r2, #8
 8004e1e:	69b9      	ldr	r1, [r7, #24]
 8004e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	2203      	movs	r2, #3
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 0203 	and.w	r2, r3, #3
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80c0 	beq.w	8004fe6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	4b66      	ldr	r3, [pc, #408]	; (8005004 <HAL_GPIO_Init+0x324>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	4a65      	ldr	r2, [pc, #404]	; (8005004 <HAL_GPIO_Init+0x324>)
 8004e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e74:	6453      	str	r3, [r2, #68]	; 0x44
 8004e76:	4b63      	ldr	r3, [pc, #396]	; (8005004 <HAL_GPIO_Init+0x324>)
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e82:	4a61      	ldr	r2, [pc, #388]	; (8005008 <HAL_GPIO_Init+0x328>)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	3302      	adds	r3, #2
 8004e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	220f      	movs	r2, #15
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a58      	ldr	r2, [pc, #352]	; (800500c <HAL_GPIO_Init+0x32c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d037      	beq.n	8004f1e <HAL_GPIO_Init+0x23e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a57      	ldr	r2, [pc, #348]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d031      	beq.n	8004f1a <HAL_GPIO_Init+0x23a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a56      	ldr	r2, [pc, #344]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d02b      	beq.n	8004f16 <HAL_GPIO_Init+0x236>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a55      	ldr	r2, [pc, #340]	; (8005018 <HAL_GPIO_Init+0x338>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d025      	beq.n	8004f12 <HAL_GPIO_Init+0x232>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a54      	ldr	r2, [pc, #336]	; (800501c <HAL_GPIO_Init+0x33c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01f      	beq.n	8004f0e <HAL_GPIO_Init+0x22e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a53      	ldr	r2, [pc, #332]	; (8005020 <HAL_GPIO_Init+0x340>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d019      	beq.n	8004f0a <HAL_GPIO_Init+0x22a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a52      	ldr	r2, [pc, #328]	; (8005024 <HAL_GPIO_Init+0x344>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_GPIO_Init+0x226>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a51      	ldr	r2, [pc, #324]	; (8005028 <HAL_GPIO_Init+0x348>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00d      	beq.n	8004f02 <HAL_GPIO_Init+0x222>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a50      	ldr	r2, [pc, #320]	; (800502c <HAL_GPIO_Init+0x34c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d007      	beq.n	8004efe <HAL_GPIO_Init+0x21e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a4f      	ldr	r2, [pc, #316]	; (8005030 <HAL_GPIO_Init+0x350>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d101      	bne.n	8004efa <HAL_GPIO_Init+0x21a>
 8004ef6:	2309      	movs	r3, #9
 8004ef8:	e012      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004efa:	230a      	movs	r3, #10
 8004efc:	e010      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004efe:	2308      	movs	r3, #8
 8004f00:	e00e      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004f02:	2307      	movs	r3, #7
 8004f04:	e00c      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004f06:	2306      	movs	r3, #6
 8004f08:	e00a      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004f0a:	2305      	movs	r3, #5
 8004f0c:	e008      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004f0e:	2304      	movs	r3, #4
 8004f10:	e006      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004f12:	2303      	movs	r3, #3
 8004f14:	e004      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e002      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_GPIO_Init+0x240>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	f002 0203 	and.w	r2, r2, #3
 8004f26:	0092      	lsls	r2, r2, #2
 8004f28:	4093      	lsls	r3, r2
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f30:	4935      	ldr	r1, [pc, #212]	; (8005008 <HAL_GPIO_Init+0x328>)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	089b      	lsrs	r3, r3, #2
 8004f36:	3302      	adds	r3, #2
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f3e:	4b3d      	ldr	r3, [pc, #244]	; (8005034 <HAL_GPIO_Init+0x354>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f62:	4a34      	ldr	r2, [pc, #208]	; (8005034 <HAL_GPIO_Init+0x354>)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f68:	4b32      	ldr	r3, [pc, #200]	; (8005034 <HAL_GPIO_Init+0x354>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f8c:	4a29      	ldr	r2, [pc, #164]	; (8005034 <HAL_GPIO_Init+0x354>)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f92:	4b28      	ldr	r3, [pc, #160]	; (8005034 <HAL_GPIO_Init+0x354>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fb6:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <HAL_GPIO_Init+0x354>)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <HAL_GPIO_Init+0x354>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fe0:	4a14      	ldr	r2, [pc, #80]	; (8005034 <HAL_GPIO_Init+0x354>)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	f67f ae84 	bls.w	8004cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	3724      	adds	r7, #36	; 0x24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800
 8005008:	40013800 	.word	0x40013800
 800500c:	40020000 	.word	0x40020000
 8005010:	40020400 	.word	0x40020400
 8005014:	40020800 	.word	0x40020800
 8005018:	40020c00 	.word	0x40020c00
 800501c:	40021000 	.word	0x40021000
 8005020:	40021400 	.word	0x40021400
 8005024:	40021800 	.word	0x40021800
 8005028:	40021c00 	.word	0x40021c00
 800502c:	40022000 	.word	0x40022000
 8005030:	40022400 	.word	0x40022400
 8005034:	40013c00 	.word	0x40013c00

08005038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	887b      	ldrh	r3, [r7, #2]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005050:	2301      	movs	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
 8005054:	e001      	b.n	800505a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	807b      	strh	r3, [r7, #2]
 8005074:	4613      	mov	r3, r2
 8005076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005078:	787b      	ldrb	r3, [r7, #1]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005084:	e003      	b.n	800508e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005086:	887b      	ldrh	r3, [r7, #2]
 8005088:	041a      	lsls	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	619a      	str	r2, [r3, #24]
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050ac:	887a      	ldrh	r2, [r7, #2]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4013      	ands	r3, r2
 80050b2:	041a      	lsls	r2, r3, #16
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	43d9      	mvns	r1, r3
 80050b8:	887b      	ldrh	r3, [r7, #2]
 80050ba:	400b      	ands	r3, r1
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	619a      	str	r2, [r3, #24]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e12b      	b.n	800533a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fe06 	bl	8001d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005134:	f001 fa20 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 8005138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4a81      	ldr	r2, [pc, #516]	; (8005344 <HAL_I2C_Init+0x274>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d807      	bhi.n	8005154 <HAL_I2C_Init+0x84>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a80      	ldr	r2, [pc, #512]	; (8005348 <HAL_I2C_Init+0x278>)
 8005148:	4293      	cmp	r3, r2
 800514a:	bf94      	ite	ls
 800514c:	2301      	movls	r3, #1
 800514e:	2300      	movhi	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e006      	b.n	8005162 <HAL_I2C_Init+0x92>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a7d      	ldr	r2, [pc, #500]	; (800534c <HAL_I2C_Init+0x27c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	bf94      	ite	ls
 800515c:	2301      	movls	r3, #1
 800515e:	2300      	movhi	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e0e7      	b.n	800533a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a78      	ldr	r2, [pc, #480]	; (8005350 <HAL_I2C_Init+0x280>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0c9b      	lsrs	r3, r3, #18
 8005174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	4a6a      	ldr	r2, [pc, #424]	; (8005344 <HAL_I2C_Init+0x274>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d802      	bhi.n	80051a4 <HAL_I2C_Init+0xd4>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	3301      	adds	r3, #1
 80051a2:	e009      	b.n	80051b8 <HAL_I2C_Init+0xe8>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	4a69      	ldr	r2, [pc, #420]	; (8005354 <HAL_I2C_Init+0x284>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	099b      	lsrs	r3, r3, #6
 80051b6:	3301      	adds	r3, #1
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	430b      	orrs	r3, r1
 80051be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	495c      	ldr	r1, [pc, #368]	; (8005344 <HAL_I2C_Init+0x274>)
 80051d4:	428b      	cmp	r3, r1
 80051d6:	d819      	bhi.n	800520c <HAL_I2C_Init+0x13c>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1e59      	subs	r1, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051ec:	400b      	ands	r3, r1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_I2C_Init+0x138>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1e59      	subs	r1, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005200:	3301      	adds	r3, #1
 8005202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005206:	e051      	b.n	80052ac <HAL_I2C_Init+0x1dc>
 8005208:	2304      	movs	r3, #4
 800520a:	e04f      	b.n	80052ac <HAL_I2C_Init+0x1dc>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d111      	bne.n	8005238 <HAL_I2C_Init+0x168>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1e58      	subs	r0, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	440b      	add	r3, r1
 8005222:	fbb0 f3f3 	udiv	r3, r0, r3
 8005226:	3301      	adds	r3, #1
 8005228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e012      	b.n	800525e <HAL_I2C_Init+0x18e>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1e58      	subs	r0, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6859      	ldr	r1, [r3, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	0099      	lsls	r1, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	fbb0 f3f3 	udiv	r3, r0, r3
 800524e:	3301      	adds	r3, #1
 8005250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_Init+0x196>
 8005262:	2301      	movs	r3, #1
 8005264:	e022      	b.n	80052ac <HAL_I2C_Init+0x1dc>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10e      	bne.n	800528c <HAL_I2C_Init+0x1bc>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1e58      	subs	r0, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	460b      	mov	r3, r1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	440b      	add	r3, r1
 800527c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005280:	3301      	adds	r3, #1
 8005282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528a:	e00f      	b.n	80052ac <HAL_I2C_Init+0x1dc>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1e58      	subs	r0, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	0099      	lsls	r1, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	6809      	ldr	r1, [r1, #0]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6911      	ldr	r1, [r2, #16]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68d2      	ldr	r2, [r2, #12]
 80052e6:	4311      	orrs	r1, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	000186a0 	.word	0x000186a0
 8005348:	001e847f 	.word	0x001e847f
 800534c:	003d08ff 	.word	0x003d08ff
 8005350:	431bde83 	.word	0x431bde83
 8005354:	10624dd3 	.word	0x10624dd3

08005358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	461a      	mov	r2, r3
 8005364:	460b      	mov	r3, r1
 8005366:	817b      	strh	r3, [r7, #10]
 8005368:	4613      	mov	r3, r2
 800536a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800536c:	f7fe ffbc 	bl	80042e8 <HAL_GetTick>
 8005370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b20      	cmp	r3, #32
 800537c:	f040 80e0 	bne.w	8005540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	2319      	movs	r3, #25
 8005386:	2201      	movs	r2, #1
 8005388:	4970      	ldr	r1, [pc, #448]	; (800554c <HAL_I2C_Master_Transmit+0x1f4>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f964 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	e0d3      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_I2C_Master_Transmit+0x50>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0cc      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d007      	beq.n	80053ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2221      	movs	r2, #33	; 0x21
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2210      	movs	r2, #16
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	893a      	ldrh	r2, [r7, #8]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a50      	ldr	r2, [pc, #320]	; (8005550 <HAL_I2C_Master_Transmit+0x1f8>)
 800540e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005410:	8979      	ldrh	r1, [r7, #10]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f89c 	bl	8005554 <I2C_MasterRequestWrite>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e08d      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800543c:	e066      	b.n	800550c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	6a39      	ldr	r1, [r7, #32]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f9de 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b04      	cmp	r3, #4
 8005454:	d107      	bne.n	8005466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e06b      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d11b      	bne.n	80054e0 <HAL_I2C_Master_Transmit+0x188>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d017      	beq.n	80054e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	6a39      	ldr	r1, [r7, #32]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f9ce 	bl	8005886 <I2C_WaitOnBTFFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00d      	beq.n	800550c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d107      	bne.n	8005508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e01a      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	d194      	bne.n	800543e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	e000      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
  }
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	00100002 	.word	0x00100002
 8005550:	ffff0000 	.word	0xffff0000

08005554 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	460b      	mov	r3, r1
 8005562:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d006      	beq.n	800557e <I2C_MasterRequestWrite+0x2a>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d003      	beq.n	800557e <I2C_MasterRequestWrite+0x2a>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800557c:	d108      	bne.n	8005590 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e00b      	b.n	80055a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	2b12      	cmp	r3, #18
 8005596:	d107      	bne.n	80055a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f84f 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00d      	beq.n	80055dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	d103      	bne.n	80055d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e035      	b.n	8005648 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e4:	d108      	bne.n	80055f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055e6:	897b      	ldrh	r3, [r7, #10]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	e01b      	b.n	8005630 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055f8:	897b      	ldrh	r3, [r7, #10]
 80055fa:	11db      	asrs	r3, r3, #7
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 0306 	and.w	r3, r3, #6
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f063 030f 	orn	r3, r3, #15
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	490e      	ldr	r1, [pc, #56]	; (8005650 <I2C_MasterRequestWrite+0xfc>)
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f875 	bl	8005706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e010      	b.n	8005648 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005626:	897b      	ldrh	r3, [r7, #10]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4907      	ldr	r1, [pc, #28]	; (8005654 <I2C_MasterRequestWrite+0x100>)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f865 	bl	8005706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	00010008 	.word	0x00010008
 8005654:	00010002 	.word	0x00010002

08005658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005668:	e025      	b.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d021      	beq.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005672:	f7fe fe39 	bl	80042e8 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d116      	bne.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e023      	b.n	80056fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d10d      	bne.n	80056dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	43da      	mvns	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4013      	ands	r3, r2
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	e00c      	b.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	43da      	mvns	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d0b6      	beq.n	800566a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005714:	e051      	b.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005724:	d123      	bne.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005734:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800573e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f043 0204 	orr.w	r2, r3, #4
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e046      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d021      	beq.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fe fdb7 	bl	80042e8 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d116      	bne.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e020      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10c      	bne.n	80057de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	43da      	mvns	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e00b      	b.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	43da      	mvns	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d18d      	bne.n	8005716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005810:	e02d      	b.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f878 	bl	8005908 <I2C_IsAcknowledgeFailed>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e02d      	b.n	800587e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d021      	beq.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fe fd5d 	bl	80042e8 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d116      	bne.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e007      	b.n	800587e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	2b80      	cmp	r3, #128	; 0x80
 800587a:	d1ca      	bne.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005892:	e02d      	b.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f837 	bl	8005908 <I2C_IsAcknowledgeFailed>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e02d      	b.n	8005900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d021      	beq.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ac:	f7fe fd1c 	bl	80042e8 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e007      	b.n	8005900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d1ca      	bne.n	8005894 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591e:	d11b      	bne.n	8005958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	f043 0204 	orr.w	r2, r3, #4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b20      	cmp	r3, #32
 800597a:	d129      	bne.n	80059d0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2224      	movs	r2, #36	; 0x24
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0210 	bic.w	r2, r2, #16
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d12a      	bne.n	8005a4e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2224      	movs	r2, #36	; 0x24
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005a18:	89fb      	ldrh	r3, [r7, #14]
 8005a1a:	f023 030f 	bic.w	r3, r3, #15
 8005a1e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	89fa      	ldrh	r2, [r7, #14]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5e:	b08f      	sub	sp, #60	; 0x3c
 8005a60:	af0a      	add	r7, sp, #40	; 0x28
 8005a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e10f      	b.n	8005c8e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d106      	bne.n	8005a8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7fc fbbb 	bl	8002204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2203      	movs	r2, #3
 8005a92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f003 ff88 	bl	80099c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	687e      	ldr	r6, [r7, #4]
 8005aba:	466d      	mov	r5, sp
 8005abc:	f106 0410 	add.w	r4, r6, #16
 8005ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ac8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005acc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ad0:	1d33      	adds	r3, r6, #4
 8005ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ad4:	6838      	ldr	r0, [r7, #0]
 8005ad6:	f003 ff13 	bl	8009900 <USB_CoreInit>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0d0      	b.n	8005c8e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f003 ff76 	bl	80099e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
 8005afc:	e04a      	b.n	8005b94 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005afe:	7bfa      	ldrb	r2, [r7, #15]
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	333d      	adds	r3, #61	; 0x3d
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	333c      	adds	r3, #60	; 0x3c
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b26:	7bfa      	ldrb	r2, [r7, #15]
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	b298      	uxth	r0, r3
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	3344      	adds	r3, #68	; 0x44
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3340      	adds	r3, #64	; 0x40
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b52:	7bfa      	ldrb	r2, [r7, #15]
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	3348      	adds	r3, #72	; 0x48
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b66:	7bfa      	ldrb	r2, [r7, #15]
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	334c      	adds	r3, #76	; 0x4c
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b7a:	7bfa      	ldrb	r2, [r7, #15]
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3354      	adds	r3, #84	; 0x54
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	3301      	adds	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d3af      	bcc.n	8005afe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
 8005ba2:	e044      	b.n	8005c2e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ba4:	7bfa      	ldrb	r2, [r7, #15]
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bba:	7bfa      	ldrb	r2, [r7, #15]
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bd0:	7bfa      	ldrb	r2, [r7, #15]
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005be6:	7bfa      	ldrb	r2, [r7, #15]
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bfc:	7bfa      	ldrb	r2, [r7, #15]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
 8005c2e:	7bfa      	ldrb	r2, [r7, #15]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3b5      	bcc.n	8005ba4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	687e      	ldr	r6, [r7, #4]
 8005c40:	466d      	mov	r5, sp
 8005c42:	f106 0410 	add.w	r4, r6, #16
 8005c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c52:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c56:	1d33      	adds	r3, r6, #4
 8005c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c5a:	6838      	ldr	r0, [r7, #0]
 8005c5c:	f003 ff0e 	bl	8009a7c <USB_DevInit>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e00d      	b.n	8005c8e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f004 f8d9 	bl	8009e3e <USB_DevDisconnect>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e267      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d075      	beq.n	8005da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cb6:	4b88      	ldr	r3, [pc, #544]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d00c      	beq.n	8005cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cc2:	4b85      	ldr	r3, [pc, #532]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d112      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cce:	4b82      	ldr	r3, [pc, #520]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cda:	d10b      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cdc:	4b7e      	ldr	r3, [pc, #504]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05b      	beq.n	8005da0 <HAL_RCC_OscConfig+0x108>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d157      	bne.n	8005da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e242      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d106      	bne.n	8005d0c <HAL_RCC_OscConfig+0x74>
 8005cfe:	4b76      	ldr	r3, [pc, #472]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a75      	ldr	r2, [pc, #468]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e01d      	b.n	8005d48 <HAL_RCC_OscConfig+0xb0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d14:	d10c      	bne.n	8005d30 <HAL_RCC_OscConfig+0x98>
 8005d16:	4b70      	ldr	r3, [pc, #448]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a6f      	ldr	r2, [pc, #444]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	4b6d      	ldr	r3, [pc, #436]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a6c      	ldr	r2, [pc, #432]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e00b      	b.n	8005d48 <HAL_RCC_OscConfig+0xb0>
 8005d30:	4b69      	ldr	r3, [pc, #420]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a68      	ldr	r2, [pc, #416]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	4b66      	ldr	r3, [pc, #408]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a65      	ldr	r2, [pc, #404]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d013      	beq.n	8005d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fe faca 	bl	80042e8 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d58:	f7fe fac6 	bl	80042e8 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b64      	cmp	r3, #100	; 0x64
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e207      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6a:	4b5b      	ldr	r3, [pc, #364]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCC_OscConfig+0xc0>
 8005d76:	e014      	b.n	8005da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fe fab6 	bl	80042e8 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d80:	f7fe fab2 	bl	80042e8 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b64      	cmp	r3, #100	; 0x64
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e1f3      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d92:	4b51      	ldr	r3, [pc, #324]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0xe8>
 8005d9e:	e000      	b.n	8005da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d063      	beq.n	8005e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dae:	4b4a      	ldr	r3, [pc, #296]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dba:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d11c      	bne.n	8005e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc6:	4b44      	ldr	r3, [pc, #272]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d116      	bne.n	8005e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd2:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_RCC_OscConfig+0x152>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e1c7      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dea:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4937      	ldr	r1, [pc, #220]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfe:	e03a      	b.n	8005e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d020      	beq.n	8005e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e08:	4b34      	ldr	r3, [pc, #208]	; (8005edc <HAL_RCC_OscConfig+0x244>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0e:	f7fe fa6b 	bl	80042e8 <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e16:	f7fe fa67 	bl	80042e8 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e1a8      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e28:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e34:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4925      	ldr	r1, [pc, #148]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]
 8005e48:	e015      	b.n	8005e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <HAL_RCC_OscConfig+0x244>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fe fa4a 	bl	80042e8 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e58:	f7fe fa46 	bl	80042e8 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e187      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d036      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e8a:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <HAL_RCC_OscConfig+0x248>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fe fa2a 	bl	80042e8 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e98:	f7fe fa26 	bl	80042e8 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e167      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x200>
 8005eb6:	e01b      	b.n	8005ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb8:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <HAL_RCC_OscConfig+0x248>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ebe:	f7fe fa13 	bl	80042e8 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec4:	e00e      	b.n	8005ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec6:	f7fe fa0f 	bl	80042e8 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d907      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e150      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	42470000 	.word	0x42470000
 8005ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee4:	4b88      	ldr	r3, [pc, #544]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1ea      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8097 	beq.w	800602c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f02:	4b81      	ldr	r3, [pc, #516]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10f      	bne.n	8005f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	4b7d      	ldr	r3, [pc, #500]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	4a7c      	ldr	r2, [pc, #496]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f1e:	4b7a      	ldr	r3, [pc, #488]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2e:	4b77      	ldr	r3, [pc, #476]	; (800610c <HAL_RCC_OscConfig+0x474>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d118      	bne.n	8005f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f3a:	4b74      	ldr	r3, [pc, #464]	; (800610c <HAL_RCC_OscConfig+0x474>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a73      	ldr	r2, [pc, #460]	; (800610c <HAL_RCC_OscConfig+0x474>)
 8005f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f46:	f7fe f9cf 	bl	80042e8 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4e:	f7fe f9cb 	bl	80042e8 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e10c      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f60:	4b6a      	ldr	r3, [pc, #424]	; (800610c <HAL_RCC_OscConfig+0x474>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d106      	bne.n	8005f82 <HAL_RCC_OscConfig+0x2ea>
 8005f74:	4b64      	ldr	r3, [pc, #400]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f78:	4a63      	ldr	r2, [pc, #396]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f80:	e01c      	b.n	8005fbc <HAL_RCC_OscConfig+0x324>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x30c>
 8005f8a:	4b5f      	ldr	r3, [pc, #380]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	4a5e      	ldr	r2, [pc, #376]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	6713      	str	r3, [r2, #112]	; 0x70
 8005f96:	4b5c      	ldr	r3, [pc, #368]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9a:	4a5b      	ldr	r2, [pc, #364]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa2:	e00b      	b.n	8005fbc <HAL_RCC_OscConfig+0x324>
 8005fa4:	4b58      	ldr	r3, [pc, #352]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a57      	ldr	r2, [pc, #348]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb0:	4b55      	ldr	r3, [pc, #340]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	4a54      	ldr	r2, [pc, #336]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	f023 0304 	bic.w	r3, r3, #4
 8005fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d015      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fe f990 	bl	80042e8 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fcc:	f7fe f98c 	bl	80042e8 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e0cb      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe2:	4b49      	ldr	r3, [pc, #292]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0ee      	beq.n	8005fcc <HAL_RCC_OscConfig+0x334>
 8005fee:	e014      	b.n	800601a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff0:	f7fe f97a 	bl	80042e8 <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff8:	f7fe f976 	bl	80042e8 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e0b5      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600e:	4b3e      	ldr	r3, [pc, #248]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ee      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d105      	bne.n	800602c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006020:	4b39      	ldr	r3, [pc, #228]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	4a38      	ldr	r2, [pc, #224]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8006026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80a1 	beq.w	8006178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006036:	4b34      	ldr	r3, [pc, #208]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 030c 	and.w	r3, r3, #12
 800603e:	2b08      	cmp	r3, #8
 8006040:	d05c      	beq.n	80060fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d141      	bne.n	80060ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604a:	4b31      	ldr	r3, [pc, #196]	; (8006110 <HAL_RCC_OscConfig+0x478>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fe f94a 	bl	80042e8 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006058:	f7fe f946 	bl	80042e8 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e087      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606a:	4b27      	ldr	r3, [pc, #156]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	3b01      	subs	r3, #1
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	491b      	ldr	r1, [pc, #108]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <HAL_RCC_OscConfig+0x478>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a6:	f7fe f91f 	bl	80042e8 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ae:	f7fe f91b 	bl	80042e8 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e05c      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c0:	4b11      	ldr	r3, [pc, #68]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0f0      	beq.n	80060ae <HAL_RCC_OscConfig+0x416>
 80060cc:	e054      	b.n	8006178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <HAL_RCC_OscConfig+0x478>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fe f908 	bl	80042e8 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fe f904 	bl	80042e8 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e045      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x444>
 80060fa:	e03d      	b.n	8006178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d107      	bne.n	8006114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e038      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
 8006108:	40023800 	.word	0x40023800
 800610c:	40007000 	.word	0x40007000
 8006110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCC_OscConfig+0x4ec>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d028      	beq.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d121      	bne.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613a:	429a      	cmp	r2, r3
 800613c:	d11a      	bne.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800614a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800614c:	4293      	cmp	r3, r2
 800614e:	d111      	bne.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	3b01      	subs	r3, #1
 800615e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d107      	bne.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40023800 	.word	0x40023800

08006188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0cc      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800619c:	4b68      	ldr	r3, [pc, #416]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d90c      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b65      	ldr	r3, [pc, #404]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b63      	ldr	r3, [pc, #396]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d001      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0b8      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d020      	beq.n	8006212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061dc:	4b59      	ldr	r3, [pc, #356]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4a58      	ldr	r2, [pc, #352]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061f4:	4b53      	ldr	r3, [pc, #332]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a52      	ldr	r2, [pc, #328]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006200:	4b50      	ldr	r3, [pc, #320]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	494d      	ldr	r1, [pc, #308]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d044      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d119      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e07f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d003      	beq.n	8006246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006242:	2b03      	cmp	r3, #3
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006246:	4b3f      	ldr	r3, [pc, #252]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e06f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006256:	4b3b      	ldr	r3, [pc, #236]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e067      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006266:	4b37      	ldr	r3, [pc, #220]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 0203 	bic.w	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	4934      	ldr	r1, [pc, #208]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	4313      	orrs	r3, r2
 8006276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006278:	f7fe f836 	bl	80042e8 <HAL_GetTick>
 800627c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627e:	e00a      	b.n	8006296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006280:	f7fe f832 	bl	80042e8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	f241 3288 	movw	r2, #5000	; 0x1388
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e04f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 020c 	and.w	r2, r3, #12
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d1eb      	bne.n	8006280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d20c      	bcs.n	80062d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	4b20      	ldr	r3, [pc, #128]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e032      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062dc:	4b19      	ldr	r3, [pc, #100]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4916      	ldr	r1, [pc, #88]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	490e      	ldr	r1, [pc, #56]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800630e:	f000 f821 	bl	8006354 <HAL_RCC_GetSysClockFreq>
 8006312:	4602      	mov	r2, r0
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	490a      	ldr	r1, [pc, #40]	; (8006348 <HAL_RCC_ClockConfig+0x1c0>)
 8006320:	5ccb      	ldrb	r3, [r1, r3]
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 8006328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fd ff96 	bl	8004260 <HAL_InitTick>

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40023c00 	.word	0x40023c00
 8006344:	40023800 	.word	0x40023800
 8006348:	0800abe4 	.word	0x0800abe4
 800634c:	20000114 	.word	0x20000114
 8006350:	2000011c 	.word	0x2000011c

08006354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006358:	b094      	sub	sp, #80	; 0x50
 800635a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	647b      	str	r3, [r7, #68]	; 0x44
 8006360:	2300      	movs	r3, #0
 8006362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006364:	2300      	movs	r3, #0
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800636c:	4b79      	ldr	r3, [pc, #484]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 030c 	and.w	r3, r3, #12
 8006374:	2b08      	cmp	r3, #8
 8006376:	d00d      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0x40>
 8006378:	2b08      	cmp	r3, #8
 800637a:	f200 80e1 	bhi.w	8006540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_RCC_GetSysClockFreq+0x34>
 8006382:	2b04      	cmp	r3, #4
 8006384:	d003      	beq.n	800638e <HAL_RCC_GetSysClockFreq+0x3a>
 8006386:	e0db      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006388:	4b73      	ldr	r3, [pc, #460]	; (8006558 <HAL_RCC_GetSysClockFreq+0x204>)
 800638a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800638c:	e0db      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800638e:	4b73      	ldr	r3, [pc, #460]	; (800655c <HAL_RCC_GetSysClockFreq+0x208>)
 8006390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006392:	e0d8      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006394:	4b6f      	ldr	r3, [pc, #444]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800639c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800639e:	4b6d      	ldr	r3, [pc, #436]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d063      	beq.n	8006472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063aa:	4b6a      	ldr	r3, [pc, #424]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	099b      	lsrs	r3, r3, #6
 80063b0:	2200      	movs	r2, #0
 80063b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30
 80063be:	2300      	movs	r3, #0
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
 80063c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063c6:	4622      	mov	r2, r4
 80063c8:	462b      	mov	r3, r5
 80063ca:	f04f 0000 	mov.w	r0, #0
 80063ce:	f04f 0100 	mov.w	r1, #0
 80063d2:	0159      	lsls	r1, r3, #5
 80063d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063d8:	0150      	lsls	r0, r2, #5
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4621      	mov	r1, r4
 80063e0:	1a51      	subs	r1, r2, r1
 80063e2:	6139      	str	r1, [r7, #16]
 80063e4:	4629      	mov	r1, r5
 80063e6:	eb63 0301 	sbc.w	r3, r3, r1
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063f8:	4659      	mov	r1, fp
 80063fa:	018b      	lsls	r3, r1, #6
 80063fc:	4651      	mov	r1, sl
 80063fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006402:	4651      	mov	r1, sl
 8006404:	018a      	lsls	r2, r1, #6
 8006406:	4651      	mov	r1, sl
 8006408:	ebb2 0801 	subs.w	r8, r2, r1
 800640c:	4659      	mov	r1, fp
 800640e:	eb63 0901 	sbc.w	r9, r3, r1
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800641e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006426:	4690      	mov	r8, r2
 8006428:	4699      	mov	r9, r3
 800642a:	4623      	mov	r3, r4
 800642c:	eb18 0303 	adds.w	r3, r8, r3
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	462b      	mov	r3, r5
 8006434:	eb49 0303 	adc.w	r3, r9, r3
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006446:	4629      	mov	r1, r5
 8006448:	024b      	lsls	r3, r1, #9
 800644a:	4621      	mov	r1, r4
 800644c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006450:	4621      	mov	r1, r4
 8006452:	024a      	lsls	r2, r1, #9
 8006454:	4610      	mov	r0, r2
 8006456:	4619      	mov	r1, r3
 8006458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800645a:	2200      	movs	r2, #0
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
 800645e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006464:	f7fa faba 	bl	80009dc <__aeabi_uldivmod>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4613      	mov	r3, r2
 800646e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006470:	e058      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	099b      	lsrs	r3, r3, #6
 8006478:	2200      	movs	r2, #0
 800647a:	4618      	mov	r0, r3
 800647c:	4611      	mov	r1, r2
 800647e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
 8006488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	f04f 0000 	mov.w	r0, #0
 8006494:	f04f 0100 	mov.w	r1, #0
 8006498:	0159      	lsls	r1, r3, #5
 800649a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800649e:	0150      	lsls	r0, r2, #5
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4641      	mov	r1, r8
 80064a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80064aa:	4649      	mov	r1, r9
 80064ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064c4:	ebb2 040a 	subs.w	r4, r2, sl
 80064c8:	eb63 050b 	sbc.w	r5, r3, fp
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	00eb      	lsls	r3, r5, #3
 80064d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064da:	00e2      	lsls	r2, r4, #3
 80064dc:	4614      	mov	r4, r2
 80064de:	461d      	mov	r5, r3
 80064e0:	4643      	mov	r3, r8
 80064e2:	18e3      	adds	r3, r4, r3
 80064e4:	603b      	str	r3, [r7, #0]
 80064e6:	464b      	mov	r3, r9
 80064e8:	eb45 0303 	adc.w	r3, r5, r3
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064fa:	4629      	mov	r1, r5
 80064fc:	028b      	lsls	r3, r1, #10
 80064fe:	4621      	mov	r1, r4
 8006500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006504:	4621      	mov	r1, r4
 8006506:	028a      	lsls	r2, r1, #10
 8006508:	4610      	mov	r0, r2
 800650a:	4619      	mov	r1, r3
 800650c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800650e:	2200      	movs	r2, #0
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	61fa      	str	r2, [r7, #28]
 8006514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006518:	f7fa fa60 	bl	80009dc <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4613      	mov	r3, r2
 8006522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	3301      	adds	r3, #1
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800653e:	e002      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <HAL_RCC_GetSysClockFreq+0x204>)
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006548:	4618      	mov	r0, r3
 800654a:	3750      	adds	r7, #80	; 0x50
 800654c:	46bd      	mov	sp, r7
 800654e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800
 8006558:	00f42400 	.word	0x00f42400
 800655c:	007a1200 	.word	0x007a1200

08006560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <HAL_RCC_GetHCLKFreq+0x14>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000114 	.word	0x20000114

08006578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800657c:	f7ff fff0 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	0a9b      	lsrs	r3, r3, #10
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	4903      	ldr	r1, [pc, #12]	; (800659c <HAL_RCC_GetPCLK1Freq+0x24>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006594:	4618      	mov	r0, r3
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40023800 	.word	0x40023800
 800659c:	0800abf4 	.word	0x0800abf4

080065a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065a4:	f7ff ffdc 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	0b5b      	lsrs	r3, r3, #13
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	4903      	ldr	r1, [pc, #12]	; (80065c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b6:	5ccb      	ldrb	r3, [r1, r3]
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065bc:	4618      	mov	r0, r3
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40023800 	.word	0x40023800
 80065c4:	0800abf4 	.word	0x0800abf4

080065c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d075      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065fc:	4b91      	ldr	r3, [pc, #580]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006602:	f7fd fe71 	bl	80042e8 <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006608:	e008      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800660a:	f7fd fe6d 	bl	80042e8 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e189      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800661c:	4b8a      	ldr	r3, [pc, #552]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f0      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	019a      	lsls	r2, r3, #6
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	071b      	lsls	r3, r3, #28
 8006640:	4981      	ldr	r1, [pc, #516]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01f      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006654:	4b7c      	ldr	r3, [pc, #496]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665a:	0f1b      	lsrs	r3, r3, #28
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	019a      	lsls	r2, r3, #6
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	431a      	orrs	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	071b      	lsls	r3, r3, #28
 8006674:	4974      	ldr	r1, [pc, #464]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800667c:	4b72      	ldr	r3, [pc, #456]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800667e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006682:	f023 021f 	bic.w	r2, r3, #31
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	3b01      	subs	r3, #1
 800668c:	496e      	ldr	r1, [pc, #440]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00d      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	019a      	lsls	r2, r3, #6
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	061b      	lsls	r3, r3, #24
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	071b      	lsls	r3, r3, #28
 80066b4:	4964      	ldr	r1, [pc, #400]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066bc:	4b61      	ldr	r3, [pc, #388]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066c2:	f7fd fe11 	bl	80042e8 <HAL_GetTick>
 80066c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c8:	e008      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ca:	f7fd fe0d 	bl	80042e8 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e129      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066dc:	4b5a      	ldr	r3, [pc, #360]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0f0      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d079      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006700:	4b52      	ldr	r3, [pc, #328]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006706:	f7fd fdef 	bl	80042e8 <HAL_GetTick>
 800670a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800670e:	f7fd fdeb 	bl	80042e8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e107      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006720:	4b49      	ldr	r3, [pc, #292]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800672c:	d0ef      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d020      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800673a:	4b43      	ldr	r3, [pc, #268]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	0f1b      	lsrs	r3, r3, #28
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	019a      	lsls	r2, r3, #6
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	061b      	lsls	r3, r3, #24
 8006754:	431a      	orrs	r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	071b      	lsls	r3, r3, #28
 800675a:	493b      	ldr	r1, [pc, #236]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006762:	4b39      	ldr	r3, [pc, #228]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006768:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	3b01      	subs	r3, #1
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	4934      	ldr	r1, [pc, #208]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01e      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006788:	4b2f      	ldr	r3, [pc, #188]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678e:	0e1b      	lsrs	r3, r3, #24
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	019a      	lsls	r2, r3, #6
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	061b      	lsls	r3, r3, #24
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	071b      	lsls	r3, r3, #28
 80067a8:	4927      	ldr	r1, [pc, #156]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	4922      	ldr	r1, [pc, #136]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067c6:	4b21      	ldr	r3, [pc, #132]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067c8:	2201      	movs	r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067cc:	f7fd fd8c 	bl	80042e8 <HAL_GetTick>
 80067d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067d4:	f7fd fd88 	bl	80042e8 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e0a4      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f2:	d1ef      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 808b 	beq.w	8006918 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	4b10      	ldr	r3, [pc, #64]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	4a0f      	ldr	r2, [pc, #60]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800680c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006810:	6413      	str	r3, [r2, #64]	; 0x40
 8006812:	4b0d      	ldr	r3, [pc, #52]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800681e:	4b0c      	ldr	r3, [pc, #48]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a0b      	ldr	r2, [pc, #44]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006828:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800682a:	f7fd fd5d 	bl	80042e8 <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006830:	e010      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006832:	f7fd fd59 	bl	80042e8 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d909      	bls.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e075      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006844:	42470068 	.word	0x42470068
 8006848:	40023800 	.word	0x40023800
 800684c:	42470070 	.word	0x42470070
 8006850:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006854:	4b38      	ldr	r3, [pc, #224]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0e8      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006860:	4b36      	ldr	r3, [pc, #216]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006868:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d02f      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	429a      	cmp	r2, r3
 800687c:	d028      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800687e:	4b2f      	ldr	r3, [pc, #188]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006886:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006888:	4b2d      	ldr	r3, [pc, #180]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800688a:	2201      	movs	r2, #1
 800688c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800688e:	4b2c      	ldr	r3, [pc, #176]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006894:	4a29      	ldr	r2, [pc, #164]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800689a:	4b28      	ldr	r3, [pc, #160]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d114      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068a6:	f7fd fd1f 	bl	80042e8 <HAL_GetTick>
 80068aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ac:	e00a      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ae:	f7fd fd1b 	bl	80042e8 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	4293      	cmp	r3, r2
 80068be:	d901      	bls.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e035      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c4:	4b1d      	ldr	r3, [pc, #116]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0ee      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068dc:	d10d      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80068de:	4b17      	ldr	r3, [pc, #92]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f2:	4912      	ldr	r1, [pc, #72]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	608b      	str	r3, [r1, #8]
 80068f8:	e005      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80068fa:	4b10      	ldr	r3, [pc, #64]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	4a0f      	ldr	r2, [pc, #60]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006900:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006904:	6093      	str	r3, [r2, #8]
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006912:	490a      	ldr	r1, [pc, #40]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006914:	4313      	orrs	r3, r2
 8006916:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800692c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40007000 	.word	0x40007000
 800693c:	40023800 	.word	0x40023800
 8006940:	42470e40 	.word	0x42470e40
 8006944:	424711e0 	.word	0x424711e0

08006948 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e066      	b.n	8006a2c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	7f5b      	ldrb	r3, [r3, #29]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d105      	bne.n	8006974 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fb fa12 	bl	8001d98 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	22ca      	movs	r2, #202	; 0xca
 8006980:	625a      	str	r2, [r3, #36]	; 0x24
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2253      	movs	r2, #83	; 0x53
 8006988:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f998 	bl	8006cc0 <RTC_EnterInitMode>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d12c      	bne.n	80069f4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	68d2      	ldr	r2, [r2, #12]
 80069d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6919      	ldr	r1, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	041a      	lsls	r2, r3, #16
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f99f 	bl	8006d2e <RTC_ExitInitMode>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d113      	bne.n	8006a22 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699a      	ldr	r2, [r3, #24]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	22ff      	movs	r2, #255	; 0xff
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	7f1b      	ldrb	r3, [r3, #28]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_RTC_SetTime+0x1c>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e087      	b.n	8006b60 <HAL_RTC_SetTime+0x12c>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d126      	bne.n	8006ab0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 f97c 	bl	8006d78 <RTC_ByteToBcd2>
 8006a80:	4603      	mov	r3, r0
 8006a82:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f975 	bl	8006d78 <RTC_ByteToBcd2>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a92:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	789b      	ldrb	r3, [r3, #2]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 f96d 	bl	8006d78 <RTC_ByteToBcd2>
 8006a9e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006aa0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	78db      	ldrb	r3, [r3, #3]
 8006aa8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	e018      	b.n	8006ae2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ad0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006ad6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	78db      	ldrb	r3, [r3, #3]
 8006adc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	22ca      	movs	r2, #202	; 0xca
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2253      	movs	r2, #83	; 0x53
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f8e4 	bl	8006cc0 <RTC_EnterInitMode>
 8006af8:	4603      	mov	r3, r0
 8006afa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006afc:	7cfb      	ldrb	r3, [r7, #19]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d120      	bne.n	8006b44 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b0c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b10:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6899      	ldr	r1, [r3, #8]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f8f7 	bl	8006d2e <RTC_ExitInitMode>
 8006b40:	4603      	mov	r3, r0
 8006b42:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b44:	7cfb      	ldrb	r3, [r7, #19]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	22ff      	movs	r2, #255	; 0xff
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	771a      	strb	r2, [r3, #28]

  return status;
 8006b5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd90      	pop	{r4, r7, pc}

08006b68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b68:	b590      	push	{r4, r7, lr}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	7f1b      	ldrb	r3, [r3, #28]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_RTC_SetDate+0x1c>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e071      	b.n	8006c68 <HAL_RTC_SetDate+0x100>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10e      	bne.n	8006bb4 <HAL_RTC_SetDate+0x4c>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	f003 0310 	and.w	r3, r3, #16
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	f023 0310 	bic.w	r3, r3, #16
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	330a      	adds	r3, #10
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d11c      	bne.n	8006bf4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	78db      	ldrb	r3, [r3, #3]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f8da 	bl	8006d78 <RTC_ByteToBcd2>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 f8d3 	bl	8006d78 <RTC_ByteToBcd2>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006bd6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	789b      	ldrb	r3, [r3, #2]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 f8cb 	bl	8006d78 <RTC_ByteToBcd2>
 8006be2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006be4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	e00e      	b.n	8006c12 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	78db      	ldrb	r3, [r3, #3]
 8006bf8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c00:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	22ca      	movs	r2, #202	; 0xca
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2253      	movs	r2, #83	; 0x53
 8006c20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f84c 	bl	8006cc0 <RTC_EnterInitMode>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006c2c:	7cfb      	ldrb	r3, [r7, #19]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10c      	bne.n	8006c4c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f873 	bl	8006d2e <RTC_ExitInitMode>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006c4c:	7cfb      	ldrb	r3, [r7, #19]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	22ff      	movs	r2, #255	; 0xff
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	771a      	strb	r2, [r3, #28]

  return status;
 8006c66:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd90      	pop	{r4, r7, pc}

08006c70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c8c:	f7fd fb2c 	bl	80042e8 <HAL_GetTick>
 8006c90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c92:	e009      	b.n	8006ca8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c94:	f7fd fb28 	bl	80042e8 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e007      	b.n	8006cb8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0ee      	beq.n	8006c94 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d122      	bne.n	8006d24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cee:	f7fd fafb 	bl	80042e8 <HAL_GetTick>
 8006cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006cf4:	e00c      	b.n	8006d10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006cf6:	f7fd faf7 	bl	80042e8 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d04:	d904      	bls.n	8006d10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d102      	bne.n	8006d24 <RTC_EnterInitMode+0x64>
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d1e8      	bne.n	8006cf6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff89 	bl	8006c70 <HAL_RTC_WaitForSynchro>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2204      	movs	r2, #4
 8006d68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006d86:	e005      	b.n	8006d94 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	3b0a      	subs	r3, #10
 8006d92:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	2b09      	cmp	r3, #9
 8006d98:	d8f6      	bhi.n	8006d88 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	b2db      	uxtb	r3, r3
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e041      	b.n	8006e48 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fb f87d 	bl	8001ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3304      	adds	r3, #4
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f001 f843 	bl	8007e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d001      	beq.n	8006e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e04e      	b.n	8006f06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a23      	ldr	r2, [pc, #140]	; (8006f14 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d022      	beq.n	8006ed0 <HAL_TIM_Base_Start_IT+0x80>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e92:	d01d      	beq.n	8006ed0 <HAL_TIM_Base_Start_IT+0x80>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1f      	ldr	r2, [pc, #124]	; (8006f18 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d018      	beq.n	8006ed0 <HAL_TIM_Base_Start_IT+0x80>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1e      	ldr	r2, [pc, #120]	; (8006f1c <HAL_TIM_Base_Start_IT+0xcc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d013      	beq.n	8006ed0 <HAL_TIM_Base_Start_IT+0x80>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00e      	beq.n	8006ed0 <HAL_TIM_Base_Start_IT+0x80>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d009      	beq.n	8006ed0 <HAL_TIM_Base_Start_IT+0x80>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a19      	ldr	r2, [pc, #100]	; (8006f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIM_Base_Start_IT+0x80>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a18      	ldr	r2, [pc, #96]	; (8006f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d111      	bne.n	8006ef4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b06      	cmp	r3, #6
 8006ee0:	d010      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 0201 	orr.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef2:	e007      	b.n	8006f04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40000c00 	.word	0x40000c00
 8006f24:	40010400 	.word	0x40010400
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40001800 	.word	0x40001800

08006f30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e041      	b.n	8006fc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fa ff48 	bl	8001dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f000 ff84 	bl	8007e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d109      	bne.n	8006ff4 <HAL_TIM_PWM_Start+0x24>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	e022      	b.n	800703a <HAL_TIM_PWM_Start+0x6a>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d109      	bne.n	800700e <HAL_TIM_PWM_Start+0x3e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	bf14      	ite	ne
 8007006:	2301      	movne	r3, #1
 8007008:	2300      	moveq	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e015      	b.n	800703a <HAL_TIM_PWM_Start+0x6a>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d109      	bne.n	8007028 <HAL_TIM_PWM_Start+0x58>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	bf14      	ite	ne
 8007020:	2301      	movne	r3, #1
 8007022:	2300      	moveq	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	e008      	b.n	800703a <HAL_TIM_PWM_Start+0x6a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e07c      	b.n	800713c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <HAL_TIM_PWM_Start+0x82>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007050:	e013      	b.n	800707a <HAL_TIM_PWM_Start+0xaa>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b04      	cmp	r3, #4
 8007056:	d104      	bne.n	8007062 <HAL_TIM_PWM_Start+0x92>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007060:	e00b      	b.n	800707a <HAL_TIM_PWM_Start+0xaa>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b08      	cmp	r3, #8
 8007066:	d104      	bne.n	8007072 <HAL_TIM_PWM_Start+0xa2>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007070:	e003      	b.n	800707a <HAL_TIM_PWM_Start+0xaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2201      	movs	r2, #1
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f001 fb0e 	bl	80086a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2d      	ldr	r2, [pc, #180]	; (8007144 <HAL_TIM_PWM_Start+0x174>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_TIM_PWM_Start+0xcc>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2c      	ldr	r2, [pc, #176]	; (8007148 <HAL_TIM_PWM_Start+0x178>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d101      	bne.n	80070a0 <HAL_TIM_PWM_Start+0xd0>
 800709c:	2301      	movs	r3, #1
 800709e:	e000      	b.n	80070a2 <HAL_TIM_PWM_Start+0xd2>
 80070a0:	2300      	movs	r3, #0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a22      	ldr	r2, [pc, #136]	; (8007144 <HAL_TIM_PWM_Start+0x174>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_TIM_PWM_Start+0x136>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d01d      	beq.n	8007106 <HAL_TIM_PWM_Start+0x136>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1f      	ldr	r2, [pc, #124]	; (800714c <HAL_TIM_PWM_Start+0x17c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_TIM_PWM_Start+0x136>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1d      	ldr	r2, [pc, #116]	; (8007150 <HAL_TIM_PWM_Start+0x180>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_TIM_PWM_Start+0x136>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1c      	ldr	r2, [pc, #112]	; (8007154 <HAL_TIM_PWM_Start+0x184>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_TIM_PWM_Start+0x136>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a16      	ldr	r2, [pc, #88]	; (8007148 <HAL_TIM_PWM_Start+0x178>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_TIM_PWM_Start+0x136>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a18      	ldr	r2, [pc, #96]	; (8007158 <HAL_TIM_PWM_Start+0x188>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_TIM_PWM_Start+0x136>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a16      	ldr	r2, [pc, #88]	; (800715c <HAL_TIM_PWM_Start+0x18c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d111      	bne.n	800712a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b06      	cmp	r3, #6
 8007116:	d010      	beq.n	800713a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007128:	e007      	b.n	800713a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0201 	orr.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	40010000 	.word	0x40010000
 8007148:	40010400 	.word	0x40010400
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40014000 	.word	0x40014000
 800715c:	40001800 	.word	0x40001800

08007160 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f001 fa96 	bl	80086a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2e      	ldr	r2, [pc, #184]	; (8007238 <HAL_TIM_PWM_Stop+0xd8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_TIM_PWM_Stop+0x2c>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2d      	ldr	r2, [pc, #180]	; (800723c <HAL_TIM_PWM_Stop+0xdc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d101      	bne.n	8007190 <HAL_TIM_PWM_Stop+0x30>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <HAL_TIM_PWM_Stop+0x32>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d017      	beq.n	80071c6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	f241 1311 	movw	r3, #4369	; 0x1111
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10f      	bne.n	80071c6 <HAL_TIM_PWM_Stop+0x66>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a1a      	ldr	r2, [r3, #32]
 80071ac:	f240 4344 	movw	r3, #1092	; 0x444
 80071b0:	4013      	ands	r3, r2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d107      	bne.n	80071c6 <HAL_TIM_PWM_Stop+0x66>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10f      	bne.n	80071f6 <HAL_TIM_PWM_Stop+0x96>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6a1a      	ldr	r2, [r3, #32]
 80071dc:	f240 4344 	movw	r3, #1092	; 0x444
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d107      	bne.n	80071f6 <HAL_TIM_PWM_Stop+0x96>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Stop+0xa6>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007204:	e013      	b.n	800722e <HAL_TIM_PWM_Stop+0xce>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Stop+0xb6>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007214:	e00b      	b.n	800722e <HAL_TIM_PWM_Stop+0xce>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Stop+0xc6>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007224:	e003      	b.n	800722e <HAL_TIM_PWM_Stop+0xce>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40010000 	.word	0x40010000
 800723c:	40010400 	.word	0x40010400

08007240 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d109      	bne.n	8007268 <HAL_TIM_PWM_Start_IT+0x28>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	bf14      	ite	ne
 8007260:	2301      	movne	r3, #1
 8007262:	2300      	moveq	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	e022      	b.n	80072ae <HAL_TIM_PWM_Start_IT+0x6e>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b04      	cmp	r3, #4
 800726c:	d109      	bne.n	8007282 <HAL_TIM_PWM_Start_IT+0x42>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b01      	cmp	r3, #1
 8007278:	bf14      	ite	ne
 800727a:	2301      	movne	r3, #1
 800727c:	2300      	moveq	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	e015      	b.n	80072ae <HAL_TIM_PWM_Start_IT+0x6e>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d109      	bne.n	800729c <HAL_TIM_PWM_Start_IT+0x5c>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	e008      	b.n	80072ae <HAL_TIM_PWM_Start_IT+0x6e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0c7      	b.n	8007446 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Start_IT+0x86>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072c4:	e013      	b.n	80072ee <HAL_TIM_PWM_Start_IT+0xae>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start_IT+0x96>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d4:	e00b      	b.n	80072ee <HAL_TIM_PWM_Start_IT+0xae>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d104      	bne.n	80072e6 <HAL_TIM_PWM_Start_IT+0xa6>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e4:	e003      	b.n	80072ee <HAL_TIM_PWM_Start_IT+0xae>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b0c      	cmp	r3, #12
 80072f2:	d841      	bhi.n	8007378 <HAL_TIM_PWM_Start_IT+0x138>
 80072f4:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <HAL_TIM_PWM_Start_IT+0xbc>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007331 	.word	0x08007331
 8007300:	08007379 	.word	0x08007379
 8007304:	08007379 	.word	0x08007379
 8007308:	08007379 	.word	0x08007379
 800730c:	08007343 	.word	0x08007343
 8007310:	08007379 	.word	0x08007379
 8007314:	08007379 	.word	0x08007379
 8007318:	08007379 	.word	0x08007379
 800731c:	08007355 	.word	0x08007355
 8007320:	08007379 	.word	0x08007379
 8007324:	08007379 	.word	0x08007379
 8007328:	08007379 	.word	0x08007379
 800732c:	08007367 	.word	0x08007367
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0202 	orr.w	r2, r2, #2
 800733e:	60da      	str	r2, [r3, #12]
      break;
 8007340:	e01d      	b.n	800737e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0204 	orr.w	r2, r2, #4
 8007350:	60da      	str	r2, [r3, #12]
      break;
 8007352:	e014      	b.n	800737e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0208 	orr.w	r2, r2, #8
 8007362:	60da      	str	r2, [r3, #12]
      break;
 8007364:	e00b      	b.n	800737e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0210 	orr.w	r2, r2, #16
 8007374:	60da      	str	r2, [r3, #12]
      break;
 8007376:	e002      	b.n	800737e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
      break;
 800737c:	bf00      	nop
  }

  if (status == HAL_OK)
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d15f      	bne.n	8007444 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2201      	movs	r2, #1
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f001 f989 	bl	80086a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2e      	ldr	r2, [pc, #184]	; (8007450 <HAL_TIM_PWM_Start_IT+0x210>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d004      	beq.n	80073a6 <HAL_TIM_PWM_Start_IT+0x166>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a2c      	ldr	r2, [pc, #176]	; (8007454 <HAL_TIM_PWM_Start_IT+0x214>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d101      	bne.n	80073aa <HAL_TIM_PWM_Start_IT+0x16a>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <HAL_TIM_PWM_Start_IT+0x16c>
 80073aa:	2300      	movs	r3, #0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d007      	beq.n	80073c0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a22      	ldr	r2, [pc, #136]	; (8007450 <HAL_TIM_PWM_Start_IT+0x210>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d022      	beq.n	8007410 <HAL_TIM_PWM_Start_IT+0x1d0>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d2:	d01d      	beq.n	8007410 <HAL_TIM_PWM_Start_IT+0x1d0>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1f      	ldr	r2, [pc, #124]	; (8007458 <HAL_TIM_PWM_Start_IT+0x218>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d018      	beq.n	8007410 <HAL_TIM_PWM_Start_IT+0x1d0>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1e      	ldr	r2, [pc, #120]	; (800745c <HAL_TIM_PWM_Start_IT+0x21c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d013      	beq.n	8007410 <HAL_TIM_PWM_Start_IT+0x1d0>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1c      	ldr	r2, [pc, #112]	; (8007460 <HAL_TIM_PWM_Start_IT+0x220>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00e      	beq.n	8007410 <HAL_TIM_PWM_Start_IT+0x1d0>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a17      	ldr	r2, [pc, #92]	; (8007454 <HAL_TIM_PWM_Start_IT+0x214>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d009      	beq.n	8007410 <HAL_TIM_PWM_Start_IT+0x1d0>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a18      	ldr	r2, [pc, #96]	; (8007464 <HAL_TIM_PWM_Start_IT+0x224>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d004      	beq.n	8007410 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a17      	ldr	r2, [pc, #92]	; (8007468 <HAL_TIM_PWM_Start_IT+0x228>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d111      	bne.n	8007434 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b06      	cmp	r3, #6
 8007420:	d010      	beq.n	8007444 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 0201 	orr.w	r2, r2, #1
 8007430:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007432:	e007      	b.n	8007444 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40010400 	.word	0x40010400
 8007458:	40000400 	.word	0x40000400
 800745c:	40000800 	.word	0x40000800
 8007460:	40000c00 	.word	0x40000c00
 8007464:	40014000 	.word	0x40014000
 8007468:	40001800 	.word	0x40001800

0800746c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e041      	b.n	8007502 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fa fcd0 	bl	8001e38 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f000 fce6 	bl	8007e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d104      	bne.n	800752a <HAL_TIM_IC_Start_IT+0x1e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007526:	b2db      	uxtb	r3, r3
 8007528:	e013      	b.n	8007552 <HAL_TIM_IC_Start_IT+0x46>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b04      	cmp	r3, #4
 800752e:	d104      	bne.n	800753a <HAL_TIM_IC_Start_IT+0x2e>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007536:	b2db      	uxtb	r3, r3
 8007538:	e00b      	b.n	8007552 <HAL_TIM_IC_Start_IT+0x46>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b08      	cmp	r3, #8
 800753e:	d104      	bne.n	800754a <HAL_TIM_IC_Start_IT+0x3e>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007546:	b2db      	uxtb	r3, r3
 8007548:	e003      	b.n	8007552 <HAL_TIM_IC_Start_IT+0x46>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007550:	b2db      	uxtb	r3, r3
 8007552:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <HAL_TIM_IC_Start_IT+0x58>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007560:	b2db      	uxtb	r3, r3
 8007562:	e013      	b.n	800758c <HAL_TIM_IC_Start_IT+0x80>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b04      	cmp	r3, #4
 8007568:	d104      	bne.n	8007574 <HAL_TIM_IC_Start_IT+0x68>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e00b      	b.n	800758c <HAL_TIM_IC_Start_IT+0x80>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b08      	cmp	r3, #8
 8007578:	d104      	bne.n	8007584 <HAL_TIM_IC_Start_IT+0x78>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007580:	b2db      	uxtb	r3, r3
 8007582:	e003      	b.n	800758c <HAL_TIM_IC_Start_IT+0x80>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800758a:	b2db      	uxtb	r3, r3
 800758c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d102      	bne.n	800759a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007594:	7b7b      	ldrb	r3, [r7, #13]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d001      	beq.n	800759e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e0cc      	b.n	8007738 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d104      	bne.n	80075ae <HAL_TIM_IC_Start_IT+0xa2>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ac:	e013      	b.n	80075d6 <HAL_TIM_IC_Start_IT+0xca>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d104      	bne.n	80075be <HAL_TIM_IC_Start_IT+0xb2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075bc:	e00b      	b.n	80075d6 <HAL_TIM_IC_Start_IT+0xca>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	d104      	bne.n	80075ce <HAL_TIM_IC_Start_IT+0xc2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075cc:	e003      	b.n	80075d6 <HAL_TIM_IC_Start_IT+0xca>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2202      	movs	r2, #2
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <HAL_TIM_IC_Start_IT+0xda>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075e4:	e013      	b.n	800760e <HAL_TIM_IC_Start_IT+0x102>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d104      	bne.n	80075f6 <HAL_TIM_IC_Start_IT+0xea>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075f4:	e00b      	b.n	800760e <HAL_TIM_IC_Start_IT+0x102>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d104      	bne.n	8007606 <HAL_TIM_IC_Start_IT+0xfa>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007604:	e003      	b.n	800760e <HAL_TIM_IC_Start_IT+0x102>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b0c      	cmp	r3, #12
 8007612:	d841      	bhi.n	8007698 <HAL_TIM_IC_Start_IT+0x18c>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <HAL_TIM_IC_Start_IT+0x110>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007651 	.word	0x08007651
 8007620:	08007699 	.word	0x08007699
 8007624:	08007699 	.word	0x08007699
 8007628:	08007699 	.word	0x08007699
 800762c:	08007663 	.word	0x08007663
 8007630:	08007699 	.word	0x08007699
 8007634:	08007699 	.word	0x08007699
 8007638:	08007699 	.word	0x08007699
 800763c:	08007675 	.word	0x08007675
 8007640:	08007699 	.word	0x08007699
 8007644:	08007699 	.word	0x08007699
 8007648:	08007699 	.word	0x08007699
 800764c:	08007687 	.word	0x08007687
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0202 	orr.w	r2, r2, #2
 800765e:	60da      	str	r2, [r3, #12]
      break;
 8007660:	e01d      	b.n	800769e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0204 	orr.w	r2, r2, #4
 8007670:	60da      	str	r2, [r3, #12]
      break;
 8007672:	e014      	b.n	800769e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0208 	orr.w	r2, r2, #8
 8007682:	60da      	str	r2, [r3, #12]
      break;
 8007684:	e00b      	b.n	800769e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0210 	orr.w	r2, r2, #16
 8007694:	60da      	str	r2, [r3, #12]
      break;
 8007696:	e002      	b.n	800769e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
      break;
 800769c:	bf00      	nop
  }

  if (status == HAL_OK)
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d148      	bne.n	8007736 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2201      	movs	r2, #1
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fff9 	bl	80086a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a22      	ldr	r2, [pc, #136]	; (8007740 <HAL_TIM_IC_Start_IT+0x234>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d022      	beq.n	8007702 <HAL_TIM_IC_Start_IT+0x1f6>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d01d      	beq.n	8007702 <HAL_TIM_IC_Start_IT+0x1f6>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <HAL_TIM_IC_Start_IT+0x238>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d018      	beq.n	8007702 <HAL_TIM_IC_Start_IT+0x1f6>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <HAL_TIM_IC_Start_IT+0x23c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_TIM_IC_Start_IT+0x1f6>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1b      	ldr	r2, [pc, #108]	; (800774c <HAL_TIM_IC_Start_IT+0x240>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00e      	beq.n	8007702 <HAL_TIM_IC_Start_IT+0x1f6>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a19      	ldr	r2, [pc, #100]	; (8007750 <HAL_TIM_IC_Start_IT+0x244>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d009      	beq.n	8007702 <HAL_TIM_IC_Start_IT+0x1f6>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a18      	ldr	r2, [pc, #96]	; (8007754 <HAL_TIM_IC_Start_IT+0x248>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_TIM_IC_Start_IT+0x1f6>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a16      	ldr	r2, [pc, #88]	; (8007758 <HAL_TIM_IC_Start_IT+0x24c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d111      	bne.n	8007726 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b06      	cmp	r3, #6
 8007712:	d010      	beq.n	8007736 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007724:	e007      	b.n	8007736 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0201 	orr.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40010000 	.word	0x40010000
 8007744:	40000400 	.word	0x40000400
 8007748:	40000800 	.word	0x40000800
 800774c:	40000c00 	.word	0x40000c00
 8007750:	40010400 	.word	0x40010400
 8007754:	40014000 	.word	0x40014000
 8007758:	40001800 	.word	0x40001800

0800775c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b02      	cmp	r3, #2
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b02      	cmp	r3, #2
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0202 	mvn.w	r2, #2
 8007788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fa ff3a 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fb4a 	bl	8007e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fb51 	bl	8007e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0204 	mvn.w	r2, #4
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fa ff10 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fb20 	bl	8007e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fb27 	bl	8007e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b08      	cmp	r3, #8
 8007818:	d122      	bne.n	8007860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b08      	cmp	r3, #8
 8007826:	d11b      	bne.n	8007860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0208 	mvn.w	r2, #8
 8007830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2204      	movs	r2, #4
 8007836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fa fee6 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 faf6 	bl	8007e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fafd 	bl	8007e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b10      	cmp	r3, #16
 800786c:	d122      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b10      	cmp	r3, #16
 800787a:	d11b      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0210 	mvn.w	r2, #16
 8007884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2208      	movs	r2, #8
 800788a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fa febc 	bl	8002618 <HAL_TIM_IC_CaptureCallback>
 80078a0:	e005      	b.n	80078ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 facc 	bl	8007e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fad3 	bl	8007e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d10e      	bne.n	80078e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d107      	bne.n	80078e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0201 	mvn.w	r2, #1
 80078d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7f9 fb80 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d10e      	bne.n	800790c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f8:	2b80      	cmp	r3, #128	; 0x80
 80078fa:	d107      	bne.n	800790c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 ff78 	bl	80087fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d10e      	bne.n	8007938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007924:	2b40      	cmp	r3, #64	; 0x40
 8007926:	d107      	bne.n	8007938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa98 	bl	8007e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b20      	cmp	r3, #32
 8007944:	d10e      	bne.n	8007964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b20      	cmp	r3, #32
 8007952:	d107      	bne.n	8007964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f06f 0220 	mvn.w	r2, #32
 800795c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 ff42 	bl	80087e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007986:	2302      	movs	r3, #2
 8007988:	e088      	b.n	8007a9c <HAL_TIM_IC_ConfigChannel+0x130>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11b      	bne.n	80079d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6819      	ldr	r1, [r3, #0]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f000 fcb8 	bl	800831c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 020c 	bic.w	r2, r2, #12
 80079ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6999      	ldr	r1, [r3, #24]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	619a      	str	r2, [r3, #24]
 80079ce:	e060      	b.n	8007a92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d11c      	bne.n	8007a10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6819      	ldr	r1, [r3, #0]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f000 fd3c 	bl	8008462 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6999      	ldr	r1, [r3, #24]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	021a      	lsls	r2, r3, #8
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	619a      	str	r2, [r3, #24]
 8007a0e:	e040      	b.n	8007a92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d11b      	bne.n	8007a4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6819      	ldr	r1, [r3, #0]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f000 fd89 	bl	800853c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69da      	ldr	r2, [r3, #28]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 020c 	bic.w	r2, r2, #12
 8007a38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69d9      	ldr	r1, [r3, #28]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	61da      	str	r2, [r3, #28]
 8007a4c:	e021      	b.n	8007a92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	d11c      	bne.n	8007a8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6819      	ldr	r1, [r3, #0]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f000 fda6 	bl	80085b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69da      	ldr	r2, [r3, #28]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69d9      	ldr	r1, [r3, #28]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	021a      	lsls	r2, r3, #8
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	61da      	str	r2, [r3, #28]
 8007a8c:	e001      	b.n	8007a92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e0ae      	b.n	8007c20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b0c      	cmp	r3, #12
 8007ace:	f200 809f 	bhi.w	8007c10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007b0d 	.word	0x08007b0d
 8007adc:	08007c11 	.word	0x08007c11
 8007ae0:	08007c11 	.word	0x08007c11
 8007ae4:	08007c11 	.word	0x08007c11
 8007ae8:	08007b4d 	.word	0x08007b4d
 8007aec:	08007c11 	.word	0x08007c11
 8007af0:	08007c11 	.word	0x08007c11
 8007af4:	08007c11 	.word	0x08007c11
 8007af8:	08007b8f 	.word	0x08007b8f
 8007afc:	08007c11 	.word	0x08007c11
 8007b00:	08007c11 	.word	0x08007c11
 8007b04:	08007c11 	.word	0x08007c11
 8007b08:	08007bcf 	.word	0x08007bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fa52 	bl	8007fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0208 	orr.w	r2, r2, #8
 8007b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0204 	bic.w	r2, r2, #4
 8007b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6999      	ldr	r1, [r3, #24]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	619a      	str	r2, [r3, #24]
      break;
 8007b4a:	e064      	b.n	8007c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 faa2 	bl	800809c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6999      	ldr	r1, [r3, #24]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	021a      	lsls	r2, r3, #8
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	619a      	str	r2, [r3, #24]
      break;
 8007b8c:	e043      	b.n	8007c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 faf7 	bl	8008188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69da      	ldr	r2, [r3, #28]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0208 	orr.w	r2, r2, #8
 8007ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0204 	bic.w	r2, r2, #4
 8007bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69d9      	ldr	r1, [r3, #28]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	61da      	str	r2, [r3, #28]
      break;
 8007bcc:	e023      	b.n	8007c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fb4b 	bl	8008270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69d9      	ldr	r1, [r3, #28]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	021a      	lsls	r2, r3, #8
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	61da      	str	r2, [r3, #28]
      break;
 8007c0e:	e002      	b.n	8007c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75fb      	strb	r3, [r7, #23]
      break;
 8007c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d101      	bne.n	8007c44 <HAL_TIM_ConfigClockSource+0x1c>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e0b4      	b.n	8007dae <HAL_TIM_ConfigClockSource+0x186>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c7c:	d03e      	beq.n	8007cfc <HAL_TIM_ConfigClockSource+0xd4>
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	f200 8087 	bhi.w	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
 8007c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8a:	f000 8086 	beq.w	8007d9a <HAL_TIM_ConfigClockSource+0x172>
 8007c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c92:	d87f      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
 8007c94:	2b70      	cmp	r3, #112	; 0x70
 8007c96:	d01a      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0xa6>
 8007c98:	2b70      	cmp	r3, #112	; 0x70
 8007c9a:	d87b      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
 8007c9c:	2b60      	cmp	r3, #96	; 0x60
 8007c9e:	d050      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x11a>
 8007ca0:	2b60      	cmp	r3, #96	; 0x60
 8007ca2:	d877      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
 8007ca4:	2b50      	cmp	r3, #80	; 0x50
 8007ca6:	d03c      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0xfa>
 8007ca8:	2b50      	cmp	r3, #80	; 0x50
 8007caa:	d873      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d058      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x13a>
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	d86f      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
 8007cb4:	2b30      	cmp	r3, #48	; 0x30
 8007cb6:	d064      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x15a>
 8007cb8:	2b30      	cmp	r3, #48	; 0x30
 8007cba:	d86b      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d060      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x15a>
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d867      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d05c      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x15a>
 8007cc8:	2b10      	cmp	r3, #16
 8007cca:	d05a      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x15a>
 8007ccc:	e062      	b.n	8007d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6899      	ldr	r1, [r3, #8]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f000 fcc1 	bl	8008664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	609a      	str	r2, [r3, #8]
      break;
 8007cfa:	e04f      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	6899      	ldr	r1, [r3, #8]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f000 fcaa 	bl	8008664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d1e:	609a      	str	r2, [r3, #8]
      break;
 8007d20:	e03c      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6859      	ldr	r1, [r3, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f000 fb68 	bl	8008404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2150      	movs	r1, #80	; 0x50
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fc77 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8007d40:	e02c      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	6859      	ldr	r1, [r3, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f000 fbc4 	bl	80084dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2160      	movs	r1, #96	; 0x60
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fc67 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8007d60:	e01c      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	6859      	ldr	r1, [r3, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f000 fb48 	bl	8008404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2140      	movs	r1, #64	; 0x40
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fc57 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8007d80:	e00c      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f000 fc4e 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8007d92:	e003      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
      break;
 8007d98:	e000      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b0c      	cmp	r3, #12
 8007dca:	d831      	bhi.n	8007e30 <HAL_TIM_ReadCapturedValue+0x78>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007e09 	.word	0x08007e09
 8007dd8:	08007e31 	.word	0x08007e31
 8007ddc:	08007e31 	.word	0x08007e31
 8007de0:	08007e31 	.word	0x08007e31
 8007de4:	08007e13 	.word	0x08007e13
 8007de8:	08007e31 	.word	0x08007e31
 8007dec:	08007e31 	.word	0x08007e31
 8007df0:	08007e31 	.word	0x08007e31
 8007df4:	08007e1d 	.word	0x08007e1d
 8007df8:	08007e31 	.word	0x08007e31
 8007dfc:	08007e31 	.word	0x08007e31
 8007e00:	08007e31 	.word	0x08007e31
 8007e04:	08007e27 	.word	0x08007e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0e:	60fb      	str	r3, [r7, #12]

      break;
 8007e10:	e00f      	b.n	8007e32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	60fb      	str	r3, [r7, #12]

      break;
 8007e1a:	e00a      	b.n	8007e32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e22:	60fb      	str	r3, [r7, #12]

      break;
 8007e24:	e005      	b.n	8007e32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	60fb      	str	r3, [r7, #12]

      break;
 8007e2e:	e000      	b.n	8007e32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007e30:	bf00      	nop
  }

  return tmpreg;
 8007e32:	68fb      	ldr	r3, [r7, #12]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a40      	ldr	r2, [pc, #256]	; (8007f90 <TIM_Base_SetConfig+0x114>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d013      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9a:	d00f      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a3d      	ldr	r2, [pc, #244]	; (8007f94 <TIM_Base_SetConfig+0x118>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00b      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a3c      	ldr	r2, [pc, #240]	; (8007f98 <TIM_Base_SetConfig+0x11c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d007      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a3b      	ldr	r2, [pc, #236]	; (8007f9c <TIM_Base_SetConfig+0x120>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_Base_SetConfig+0x40>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a3a      	ldr	r2, [pc, #232]	; (8007fa0 <TIM_Base_SetConfig+0x124>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d108      	bne.n	8007ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a2f      	ldr	r2, [pc, #188]	; (8007f90 <TIM_Base_SetConfig+0x114>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d02b      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007edc:	d027      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a2c      	ldr	r2, [pc, #176]	; (8007f94 <TIM_Base_SetConfig+0x118>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d023      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a2b      	ldr	r2, [pc, #172]	; (8007f98 <TIM_Base_SetConfig+0x11c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01f      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a2a      	ldr	r2, [pc, #168]	; (8007f9c <TIM_Base_SetConfig+0x120>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d01b      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a29      	ldr	r2, [pc, #164]	; (8007fa0 <TIM_Base_SetConfig+0x124>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d017      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a28      	ldr	r2, [pc, #160]	; (8007fa4 <TIM_Base_SetConfig+0x128>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d013      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a27      	ldr	r2, [pc, #156]	; (8007fa8 <TIM_Base_SetConfig+0x12c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00f      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a26      	ldr	r2, [pc, #152]	; (8007fac <TIM_Base_SetConfig+0x130>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00b      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a25      	ldr	r2, [pc, #148]	; (8007fb0 <TIM_Base_SetConfig+0x134>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d007      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a24      	ldr	r2, [pc, #144]	; (8007fb4 <TIM_Base_SetConfig+0x138>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d003      	beq.n	8007f2e <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a23      	ldr	r2, [pc, #140]	; (8007fb8 <TIM_Base_SetConfig+0x13c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d108      	bne.n	8007f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <TIM_Base_SetConfig+0x114>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <TIM_Base_SetConfig+0xf8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a0c      	ldr	r2, [pc, #48]	; (8007fa0 <TIM_Base_SetConfig+0x124>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d103      	bne.n	8007f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	615a      	str	r2, [r3, #20]
}
 8007f82:	bf00      	nop
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	40010000 	.word	0x40010000
 8007f94:	40000400 	.word	0x40000400
 8007f98:	40000800 	.word	0x40000800
 8007f9c:	40000c00 	.word	0x40000c00
 8007fa0:	40010400 	.word	0x40010400
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	40014400 	.word	0x40014400
 8007fac:	40014800 	.word	0x40014800
 8007fb0:	40001800 	.word	0x40001800
 8007fb4:	40001c00 	.word	0x40001c00
 8007fb8:	40002000 	.word	0x40002000

08007fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	f023 0201 	bic.w	r2, r3, #1
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0303 	bic.w	r3, r3, #3
 8007ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f023 0302 	bic.w	r3, r3, #2
 8008004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	4313      	orrs	r3, r2
 800800e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a20      	ldr	r2, [pc, #128]	; (8008094 <TIM_OC1_SetConfig+0xd8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_OC1_SetConfig+0x64>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a1f      	ldr	r2, [pc, #124]	; (8008098 <TIM_OC1_SetConfig+0xdc>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10c      	bne.n	800803a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f023 0308 	bic.w	r3, r3, #8
 8008026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 0304 	bic.w	r3, r3, #4
 8008038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a15      	ldr	r2, [pc, #84]	; (8008094 <TIM_OC1_SetConfig+0xd8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d003      	beq.n	800804a <TIM_OC1_SetConfig+0x8e>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a14      	ldr	r2, [pc, #80]	; (8008098 <TIM_OC1_SetConfig+0xdc>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d111      	bne.n	800806e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	621a      	str	r2, [r3, #32]
}
 8008088:	bf00      	nop
 800808a:	371c      	adds	r7, #28
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	40010000 	.word	0x40010000
 8008098:	40010400 	.word	0x40010400

0800809c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0210 	bic.w	r2, r3, #16
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	021b      	lsls	r3, r3, #8
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f023 0320 	bic.w	r3, r3, #32
 80080e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a22      	ldr	r2, [pc, #136]	; (8008180 <TIM_OC2_SetConfig+0xe4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_OC2_SetConfig+0x68>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a21      	ldr	r2, [pc, #132]	; (8008184 <TIM_OC2_SetConfig+0xe8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d10d      	bne.n	8008120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800810a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a17      	ldr	r2, [pc, #92]	; (8008180 <TIM_OC2_SetConfig+0xe4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d003      	beq.n	8008130 <TIM_OC2_SetConfig+0x94>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a16      	ldr	r2, [pc, #88]	; (8008184 <TIM_OC2_SetConfig+0xe8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d113      	bne.n	8008158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800813e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010000 	.word	0x40010000
 8008184:	40010400 	.word	0x40010400

08008188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	4313      	orrs	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a21      	ldr	r2, [pc, #132]	; (8008268 <TIM_OC3_SetConfig+0xe0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d003      	beq.n	80081ee <TIM_OC3_SetConfig+0x66>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a20      	ldr	r2, [pc, #128]	; (800826c <TIM_OC3_SetConfig+0xe4>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d10d      	bne.n	800820a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a16      	ldr	r2, [pc, #88]	; (8008268 <TIM_OC3_SetConfig+0xe0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d003      	beq.n	800821a <TIM_OC3_SetConfig+0x92>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a15      	ldr	r2, [pc, #84]	; (800826c <TIM_OC3_SetConfig+0xe4>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d113      	bne.n	8008242 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4313      	orrs	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	4313      	orrs	r3, r2
 8008240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	621a      	str	r2, [r3, #32]
}
 800825c:	bf00      	nop
 800825e:	371c      	adds	r7, #28
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	40010000 	.word	0x40010000
 800826c:	40010400 	.word	0x40010400

08008270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	031b      	lsls	r3, r3, #12
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a12      	ldr	r2, [pc, #72]	; (8008314 <TIM_OC4_SetConfig+0xa4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d003      	beq.n	80082d8 <TIM_OC4_SetConfig+0x68>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a11      	ldr	r2, [pc, #68]	; (8008318 <TIM_OC4_SetConfig+0xa8>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d109      	bne.n	80082ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	019b      	lsls	r3, r3, #6
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	621a      	str	r2, [r3, #32]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400

0800831c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	f023 0201 	bic.w	r2, r3, #1
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4a28      	ldr	r2, [pc, #160]	; (80083e8 <TIM_TI1_SetConfig+0xcc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d01b      	beq.n	8008382 <TIM_TI1_SetConfig+0x66>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008350:	d017      	beq.n	8008382 <TIM_TI1_SetConfig+0x66>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4a25      	ldr	r2, [pc, #148]	; (80083ec <TIM_TI1_SetConfig+0xd0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <TIM_TI1_SetConfig+0x66>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4a24      	ldr	r2, [pc, #144]	; (80083f0 <TIM_TI1_SetConfig+0xd4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00f      	beq.n	8008382 <TIM_TI1_SetConfig+0x66>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4a23      	ldr	r2, [pc, #140]	; (80083f4 <TIM_TI1_SetConfig+0xd8>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00b      	beq.n	8008382 <TIM_TI1_SetConfig+0x66>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4a22      	ldr	r2, [pc, #136]	; (80083f8 <TIM_TI1_SetConfig+0xdc>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d007      	beq.n	8008382 <TIM_TI1_SetConfig+0x66>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4a21      	ldr	r2, [pc, #132]	; (80083fc <TIM_TI1_SetConfig+0xe0>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d003      	beq.n	8008382 <TIM_TI1_SetConfig+0x66>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a20      	ldr	r2, [pc, #128]	; (8008400 <TIM_TI1_SetConfig+0xe4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d101      	bne.n	8008386 <TIM_TI1_SetConfig+0x6a>
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <TIM_TI1_SetConfig+0x6c>
 8008386:	2300      	movs	r3, #0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f023 0303 	bic.w	r3, r3, #3
 8008392:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e003      	b.n	80083a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f043 0301 	orr.w	r3, r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f023 030a 	bic.w	r3, r3, #10
 80083c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f003 030a 	and.w	r3, r3, #10
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	621a      	str	r2, [r3, #32]
}
 80083da:	bf00      	nop
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40010400 	.word	0x40010400
 80083fc:	40014000 	.word	0x40014000
 8008400:	40001800 	.word	0x40001800

08008404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	f023 0201 	bic.w	r2, r3, #1
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800842e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f023 030a 	bic.w	r3, r3, #10
 8008440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	621a      	str	r2, [r3, #32]
}
 8008456:	bf00      	nop
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008462:	b480      	push	{r7}
 8008464:	b087      	sub	sp, #28
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	f023 0210 	bic.w	r2, r3, #16
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	031b      	lsls	r3, r3, #12
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	621a      	str	r2, [r3, #32]
}
 80084d0:	bf00      	nop
 80084d2:	371c      	adds	r7, #28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	f023 0210 	bic.w	r2, r3, #16
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008506:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	031b      	lsls	r3, r3, #12
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008518:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	621a      	str	r2, [r3, #32]
}
 8008530:	bf00      	nop
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f023 0303 	bic.w	r3, r3, #3
 8008568:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008578:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	b2db      	uxtb	r3, r3
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800858c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	021b      	lsls	r3, r3, #8
 8008592:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	621a      	str	r2, [r3, #32]
}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	031b      	lsls	r3, r3, #12
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008606:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	031b      	lsls	r3, r3, #12
 800860c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	621a      	str	r2, [r3, #32]
}
 8008622:	bf00      	nop
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	f043 0307 	orr.w	r3, r3, #7
 8008650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	609a      	str	r2, [r3, #8]
}
 8008658:	bf00      	nop
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800867e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	021a      	lsls	r2, r3, #8
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	431a      	orrs	r2, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	4313      	orrs	r3, r2
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	609a      	str	r2, [r3, #8]
}
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f003 031f 	and.w	r3, r3, #31
 80086b6:	2201      	movs	r2, #1
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a1a      	ldr	r2, [r3, #32]
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	43db      	mvns	r3, r3
 80086c6:	401a      	ands	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a1a      	ldr	r2, [r3, #32]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	431a      	orrs	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	621a      	str	r2, [r3, #32]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
	...

080086f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008704:	2302      	movs	r3, #2
 8008706:	e05a      	b.n	80087be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a21      	ldr	r2, [pc, #132]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d022      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008754:	d01d      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1d      	ldr	r2, [pc, #116]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d018      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1a      	ldr	r2, [pc, #104]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00e      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a18      	ldr	r2, [pc, #96]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d009      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a17      	ldr	r2, [pc, #92]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d10c      	bne.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40010000 	.word	0x40010000
 80087d0:	40000400 	.word	0x40000400
 80087d4:	40000800 	.word	0x40000800
 80087d8:	40000c00 	.word	0x40000c00
 80087dc:	40010400 	.word	0x40010400
 80087e0:	40014000 	.word	0x40014000
 80087e4:	40001800 	.word	0x40001800

080087e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e03f      	b.n	80088a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7f9 fc56 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2224      	movs	r2, #36	; 0x24
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fddf 	bl	8009418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691a      	ldr	r2, [r3, #16]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695a      	ldr	r2, [r3, #20]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2220      	movs	r2, #32
 8008894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b08a      	sub	sp, #40	; 0x28
 80088ae:	af02      	add	r7, sp, #8
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	603b      	str	r3, [r7, #0]
 80088b6:	4613      	mov	r3, r2
 80088b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	d17c      	bne.n	80089c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_UART_Transmit+0x2c>
 80088d0:	88fb      	ldrh	r3, [r7, #6]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e075      	b.n	80089c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d101      	bne.n	80088e8 <HAL_UART_Transmit+0x3e>
 80088e4:	2302      	movs	r3, #2
 80088e6:	e06e      	b.n	80089c6 <HAL_UART_Transmit+0x11c>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2221      	movs	r2, #33	; 0x21
 80088fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088fe:	f7fb fcf3 	bl	80042e8 <HAL_GetTick>
 8008902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	88fa      	ldrh	r2, [r7, #6]
 8008908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	88fa      	ldrh	r2, [r7, #6]
 800890e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008918:	d108      	bne.n	800892c <HAL_UART_Transmit+0x82>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d104      	bne.n	800892c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	61bb      	str	r3, [r7, #24]
 800892a:	e003      	b.n	8008934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008930:	2300      	movs	r3, #0
 8008932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800893c:	e02a      	b.n	8008994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2200      	movs	r2, #0
 8008946:	2180      	movs	r1, #128	; 0x80
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fb1f 	bl	8008f8c <UART_WaitOnFlagUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e036      	b.n	80089c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10b      	bne.n	8008976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800896c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	3302      	adds	r3, #2
 8008972:	61bb      	str	r3, [r7, #24]
 8008974:	e007      	b.n	8008986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	781a      	ldrb	r2, [r3, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	3301      	adds	r3, #1
 8008984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1cf      	bne.n	800893e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2200      	movs	r2, #0
 80089a6:	2140      	movs	r1, #64	; 0x40
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 faef 	bl	8008f8c <UART_WaitOnFlagUntilTimeout>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e006      	b.n	80089c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	e000      	b.n	80089c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089c4:	2302      	movs	r3, #2
  }
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3720      	adds	r7, #32
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	4613      	mov	r3, r2
 80089da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	d11d      	bne.n	8008a24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <HAL_UART_Receive_IT+0x26>
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e016      	b.n	8008a26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_UART_Receive_IT+0x38>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e00f      	b.n	8008a26 <HAL_UART_Receive_IT+0x58>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	461a      	mov	r2, r3
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fb24 	bl	8009068 <UART_Start_Receive_IT>
 8008a20:	4603      	mov	r3, r0
 8008a22:	e000      	b.n	8008a26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008a24:	2302      	movs	r3, #2
  }
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b0ba      	sub	sp, #232	; 0xe8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 030f 	and.w	r3, r3, #15
 8008a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10f      	bne.n	8008a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <HAL_UART_IRQHandler+0x66>
 8008a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fc07 	bl	80092a2 <UART_Receive_IT>
      return;
 8008a94:	e256      	b.n	8008f44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 80de 	beq.w	8008c5c <HAL_UART_IRQHandler+0x22c>
 8008aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d106      	bne.n	8008aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 80d1 	beq.w	8008c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00b      	beq.n	8008ade <HAL_UART_IRQHandler+0xae>
 8008ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	f043 0201 	orr.w	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae2:	f003 0304 	and.w	r3, r3, #4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00b      	beq.n	8008b02 <HAL_UART_IRQHandler+0xd2>
 8008aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afa:	f043 0202 	orr.w	r2, r3, #2
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <HAL_UART_IRQHandler+0xf6>
 8008b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	f043 0204 	orr.w	r2, r3, #4
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d011      	beq.n	8008b56 <HAL_UART_IRQHandler+0x126>
 8008b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d105      	bne.n	8008b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	f043 0208 	orr.w	r2, r3, #8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 81ed 	beq.w	8008f3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d008      	beq.n	8008b7e <HAL_UART_IRQHandler+0x14e>
 8008b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fb92 	bl	80092a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	bf0c      	ite	eq
 8008b8c:	2301      	moveq	r3, #1
 8008b8e:	2300      	movne	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d103      	bne.n	8008baa <HAL_UART_IRQHandler+0x17a>
 8008ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d04f      	beq.n	8008c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa9a 	bl	80090e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	d141      	bne.n	8008c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3314      	adds	r3, #20
 8008bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3314      	adds	r3, #20
 8008be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1d9      	bne.n	8008bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d013      	beq.n	8008c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	4a7d      	ldr	r2, [pc, #500]	; (8008e0c <HAL_UART_IRQHandler+0x3dc>)
 8008c18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fb fd13 	bl	800464a <HAL_DMA_Abort_IT>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d016      	beq.n	8008c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c38:	e00e      	b.n	8008c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f990 	bl	8008f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c40:	e00a      	b.n	8008c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f98c 	bl	8008f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c48:	e006      	b.n	8008c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f988 	bl	8008f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008c56:	e170      	b.n	8008f3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c58:	bf00      	nop
    return;
 8008c5a:	e16e      	b.n	8008f3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	f040 814a 	bne.w	8008efa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c6a:	f003 0310 	and.w	r3, r3, #16
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 8143 	beq.w	8008efa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 813c 	beq.w	8008efa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c82:	2300      	movs	r3, #0
 8008c84:	60bb      	str	r3, [r7, #8]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	60bb      	str	r3, [r7, #8]
 8008c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca2:	2b40      	cmp	r3, #64	; 0x40
 8008ca4:	f040 80b4 	bne.w	8008e10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 8140 	beq.w	8008f3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	f080 8139 	bcs.w	8008f3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cde:	f000 8088 	beq.w	8008df2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	330c      	adds	r3, #12
 8008d0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1d9      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3314      	adds	r3, #20
 8008d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3314      	adds	r3, #20
 8008d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e1      	bne.n	8008d2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3314      	adds	r3, #20
 8008d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3314      	adds	r3, #20
 8008d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e3      	bne.n	8008d6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	330c      	adds	r3, #12
 8008db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc2:	f023 0310 	bic.w	r3, r3, #16
 8008dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	330c      	adds	r3, #12
 8008dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e3      	bne.n	8008db0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fb fbbc 	bl	800456a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f8b6 	bl	8008f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e08:	e099      	b.n	8008f3e <HAL_UART_IRQHandler+0x50e>
 8008e0a:	bf00      	nop
 8008e0c:	080091ab 	.word	0x080091ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 808b 	beq.w	8008f42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8086 	beq.w	8008f42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e5a:	647a      	str	r2, [r7, #68]	; 0x44
 8008e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e3      	bne.n	8008e36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3314      	adds	r3, #20
 8008e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	f023 0301 	bic.w	r3, r3, #1
 8008e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3314      	adds	r3, #20
 8008e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e92:	633a      	str	r2, [r7, #48]	; 0x30
 8008e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e3      	bne.n	8008e6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0310 	bic.w	r3, r3, #16
 8008eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ed8:	61fa      	str	r2, [r7, #28]
 8008eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	69b9      	ldr	r1, [r7, #24]
 8008ede:	69fa      	ldr	r2, [r7, #28]
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e3      	bne.n	8008eb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f83e 	bl	8008f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ef8:	e023      	b.n	8008f42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d009      	beq.n	8008f1a <HAL_UART_IRQHandler+0x4ea>
 8008f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f95d 	bl	80091d2 <UART_Transmit_IT>
    return;
 8008f18:	e014      	b.n	8008f44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00e      	beq.n	8008f44 <HAL_UART_IRQHandler+0x514>
 8008f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d008      	beq.n	8008f44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f99d 	bl	8009272 <UART_EndTransmit_IT>
    return;
 8008f38:	e004      	b.n	8008f44 <HAL_UART_IRQHandler+0x514>
    return;
 8008f3a:	bf00      	nop
 8008f3c:	e002      	b.n	8008f44 <HAL_UART_IRQHandler+0x514>
      return;
 8008f3e:	bf00      	nop
 8008f40:	e000      	b.n	8008f44 <HAL_UART_IRQHandler+0x514>
      return;
 8008f42:	bf00      	nop
  }
}
 8008f44:	37e8      	adds	r7, #232	; 0xe8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop

08008f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b090      	sub	sp, #64	; 0x40
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	603b      	str	r3, [r7, #0]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f9c:	e050      	b.n	8009040 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa4:	d04c      	beq.n	8009040 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d007      	beq.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8008fac:	f7fb f99c 	bl	80042e8 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d241      	bcs.n	8009040 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	330c      	adds	r3, #12
 8008fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	330c      	adds	r3, #12
 8008fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8008fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe4:	e841 2300 	strex	r3, r2, [r1]
 8008fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e5      	bne.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3314      	adds	r3, #20
 8008ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f023 0301 	bic.w	r3, r3, #1
 8009006:	63bb      	str	r3, [r7, #56]	; 0x38
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3314      	adds	r3, #20
 800900e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009010:	623a      	str	r2, [r7, #32]
 8009012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	69f9      	ldr	r1, [r7, #28]
 8009016:	6a3a      	ldr	r2, [r7, #32]
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	61bb      	str	r3, [r7, #24]
   return(result);
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e5      	bne.n	8008ff0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e00f      	b.n	8009060 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	4013      	ands	r3, r2
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	429a      	cmp	r2, r3
 800904e:	bf0c      	ite	eq
 8009050:	2301      	moveq	r3, #1
 8009052:	2300      	movne	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	429a      	cmp	r2, r3
 800905c:	d09f      	beq.n	8008f9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3740      	adds	r7, #64	; 0x40
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	88fa      	ldrh	r2, [r7, #6]
 8009080:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	88fa      	ldrh	r2, [r7, #6]
 8009086:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2222      	movs	r2, #34	; 0x22
 8009092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d007      	beq.n	80090b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 0201 	orr.w	r2, r2, #1
 80090c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0220 	orr.w	r2, r2, #32
 80090d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b095      	sub	sp, #84	; 0x54
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	330c      	adds	r3, #12
 80090f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	330c      	adds	r3, #12
 800910a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800910c:	643a      	str	r2, [r7, #64]	; 0x40
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e5      	bne.n	80090ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3314      	adds	r3, #20
 8009126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	e853 3f00 	ldrex	r3, [r3]
 800912e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	f023 0301 	bic.w	r3, r3, #1
 8009136:	64bb      	str	r3, [r7, #72]	; 0x48
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3314      	adds	r3, #20
 800913e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009140:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e5      	bne.n	8009120 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	2b01      	cmp	r3, #1
 800915a:	d119      	bne.n	8009190 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	330c      	adds	r3, #12
 8009162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	60bb      	str	r3, [r7, #8]
   return(result);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f023 0310 	bic.w	r3, r3, #16
 8009172:	647b      	str	r3, [r7, #68]	; 0x44
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	330c      	adds	r3, #12
 800917a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800917c:	61ba      	str	r2, [r7, #24]
 800917e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6979      	ldr	r1, [r7, #20]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	613b      	str	r3, [r7, #16]
   return(result);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e5      	bne.n	800915c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800919e:	bf00      	nop
 80091a0:	3754      	adds	r7, #84	; 0x54
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff fecb 	bl	8008f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b21      	cmp	r3, #33	; 0x21
 80091e4:	d13e      	bne.n	8009264 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ee:	d114      	bne.n	800921a <UART_Transmit_IT+0x48>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d110      	bne.n	800921a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800920c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	1c9a      	adds	r2, r3, #2
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	621a      	str	r2, [r3, #32]
 8009218:	e008      	b.n	800922c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	1c59      	adds	r1, r3, #1
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	6211      	str	r1, [r2, #32]
 8009224:	781a      	ldrb	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	b29b      	uxth	r3, r3
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	4619      	mov	r1, r3
 800923a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10f      	bne.n	8009260 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800924e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800925e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	e000      	b.n	8009266 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009264:	2302      	movs	r3, #2
  }
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009288:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2220      	movs	r2, #32
 800928e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7ff fe5a 	bl	8008f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b08c      	sub	sp, #48	; 0x30
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b22      	cmp	r3, #34	; 0x22
 80092b4:	f040 80ab 	bne.w	800940e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c0:	d117      	bne.n	80092f2 <UART_Receive_IT+0x50>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d113      	bne.n	80092f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ea:	1c9a      	adds	r2, r3, #2
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	629a      	str	r2, [r3, #40]	; 0x28
 80092f0:	e026      	b.n	8009340 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80092f8:	2300      	movs	r3, #0
 80092fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009304:	d007      	beq.n	8009316 <UART_Receive_IT+0x74>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10a      	bne.n	8009324 <UART_Receive_IT+0x82>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	b2da      	uxtb	r2, r3
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e008      	b.n	8009336 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009330:	b2da      	uxtb	r2, r3
 8009332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009334:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009344:	b29b      	uxth	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	b29b      	uxth	r3, r3
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	4619      	mov	r1, r3
 800934e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009350:	2b00      	cmp	r3, #0
 8009352:	d15a      	bne.n	800940a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 0220 	bic.w	r2, r2, #32
 8009362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009372:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0201 	bic.w	r2, r2, #1
 8009382:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	2b01      	cmp	r3, #1
 8009392:	d135      	bne.n	8009400 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	330c      	adds	r3, #12
 80093a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	613b      	str	r3, [r7, #16]
   return(result);
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f023 0310 	bic.w	r3, r3, #16
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	330c      	adds	r3, #12
 80093b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ba:	623a      	str	r2, [r7, #32]
 80093bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	69f9      	ldr	r1, [r7, #28]
 80093c0:	6a3a      	ldr	r2, [r7, #32]
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e5      	bne.n	800939a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0310 	and.w	r3, r3, #16
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d10a      	bne.n	80093f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff fdbb 	bl	8008f74 <HAL_UARTEx_RxEventCallback>
 80093fe:	e002      	b.n	8009406 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7f9 f88b 	bl	800251c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	e002      	b.n	8009410 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	e000      	b.n	8009410 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800940e:	2302      	movs	r3, #2
  }
}
 8009410:	4618      	mov	r0, r3
 8009412:	3730      	adds	r7, #48	; 0x30
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800941c:	b0c0      	sub	sp, #256	; 0x100
 800941e:	af00      	add	r7, sp, #0
 8009420:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009434:	68d9      	ldr	r1, [r3, #12]
 8009436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	ea40 0301 	orr.w	r3, r0, r1
 8009440:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	431a      	orrs	r2, r3
 8009450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	431a      	orrs	r2, r3
 8009458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	4313      	orrs	r3, r2
 8009460:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009470:	f021 010c 	bic.w	r1, r1, #12
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800947e:	430b      	orrs	r3, r1
 8009480:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800948e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009492:	6999      	ldr	r1, [r3, #24]
 8009494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	ea40 0301 	orr.w	r3, r0, r1
 800949e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4b8f      	ldr	r3, [pc, #572]	; (80096e4 <UART_SetConfig+0x2cc>)
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d005      	beq.n	80094b8 <UART_SetConfig+0xa0>
 80094ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b8d      	ldr	r3, [pc, #564]	; (80096e8 <UART_SetConfig+0x2d0>)
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d104      	bne.n	80094c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094b8:	f7fd f872 	bl	80065a0 <HAL_RCC_GetPCLK2Freq>
 80094bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80094c0:	e003      	b.n	80094ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094c2:	f7fd f859 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 80094c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d4:	f040 810c 	bne.w	80096f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80094e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80094ea:	4622      	mov	r2, r4
 80094ec:	462b      	mov	r3, r5
 80094ee:	1891      	adds	r1, r2, r2
 80094f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80094f2:	415b      	adcs	r3, r3
 80094f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80094fa:	4621      	mov	r1, r4
 80094fc:	eb12 0801 	adds.w	r8, r2, r1
 8009500:	4629      	mov	r1, r5
 8009502:	eb43 0901 	adc.w	r9, r3, r1
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	f04f 0300 	mov.w	r3, #0
 800950e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800951a:	4690      	mov	r8, r2
 800951c:	4699      	mov	r9, r3
 800951e:	4623      	mov	r3, r4
 8009520:	eb18 0303 	adds.w	r3, r8, r3
 8009524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009528:	462b      	mov	r3, r5
 800952a:	eb49 0303 	adc.w	r3, r9, r3
 800952e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800953e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009542:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009546:	460b      	mov	r3, r1
 8009548:	18db      	adds	r3, r3, r3
 800954a:	653b      	str	r3, [r7, #80]	; 0x50
 800954c:	4613      	mov	r3, r2
 800954e:	eb42 0303 	adc.w	r3, r2, r3
 8009552:	657b      	str	r3, [r7, #84]	; 0x54
 8009554:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009558:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800955c:	f7f7 fa3e 	bl	80009dc <__aeabi_uldivmod>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4b61      	ldr	r3, [pc, #388]	; (80096ec <UART_SetConfig+0x2d4>)
 8009566:	fba3 2302 	umull	r2, r3, r3, r2
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	011c      	lsls	r4, r3, #4
 800956e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009572:	2200      	movs	r2, #0
 8009574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009578:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800957c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	1891      	adds	r1, r2, r2
 8009586:	64b9      	str	r1, [r7, #72]	; 0x48
 8009588:	415b      	adcs	r3, r3
 800958a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800958c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009590:	4641      	mov	r1, r8
 8009592:	eb12 0a01 	adds.w	sl, r2, r1
 8009596:	4649      	mov	r1, r9
 8009598:	eb43 0b01 	adc.w	fp, r3, r1
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	f04f 0300 	mov.w	r3, #0
 80095a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095b0:	4692      	mov	sl, r2
 80095b2:	469b      	mov	fp, r3
 80095b4:	4643      	mov	r3, r8
 80095b6:	eb1a 0303 	adds.w	r3, sl, r3
 80095ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095be:	464b      	mov	r3, r9
 80095c0:	eb4b 0303 	adc.w	r3, fp, r3
 80095c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80095d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80095dc:	460b      	mov	r3, r1
 80095de:	18db      	adds	r3, r3, r3
 80095e0:	643b      	str	r3, [r7, #64]	; 0x40
 80095e2:	4613      	mov	r3, r2
 80095e4:	eb42 0303 	adc.w	r3, r2, r3
 80095e8:	647b      	str	r3, [r7, #68]	; 0x44
 80095ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80095ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80095f2:	f7f7 f9f3 	bl	80009dc <__aeabi_uldivmod>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	4611      	mov	r1, r2
 80095fc:	4b3b      	ldr	r3, [pc, #236]	; (80096ec <UART_SetConfig+0x2d4>)
 80095fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009602:	095b      	lsrs	r3, r3, #5
 8009604:	2264      	movs	r2, #100	; 0x64
 8009606:	fb02 f303 	mul.w	r3, r2, r3
 800960a:	1acb      	subs	r3, r1, r3
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009612:	4b36      	ldr	r3, [pc, #216]	; (80096ec <UART_SetConfig+0x2d4>)
 8009614:	fba3 2302 	umull	r2, r3, r3, r2
 8009618:	095b      	lsrs	r3, r3, #5
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009620:	441c      	add	r4, r3
 8009622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009626:	2200      	movs	r2, #0
 8009628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800962c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009630:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	1891      	adds	r1, r2, r2
 800963a:	63b9      	str	r1, [r7, #56]	; 0x38
 800963c:	415b      	adcs	r3, r3
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009644:	4641      	mov	r1, r8
 8009646:	1851      	adds	r1, r2, r1
 8009648:	6339      	str	r1, [r7, #48]	; 0x30
 800964a:	4649      	mov	r1, r9
 800964c:	414b      	adcs	r3, r1
 800964e:	637b      	str	r3, [r7, #52]	; 0x34
 8009650:	f04f 0200 	mov.w	r2, #0
 8009654:	f04f 0300 	mov.w	r3, #0
 8009658:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800965c:	4659      	mov	r1, fp
 800965e:	00cb      	lsls	r3, r1, #3
 8009660:	4651      	mov	r1, sl
 8009662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009666:	4651      	mov	r1, sl
 8009668:	00ca      	lsls	r2, r1, #3
 800966a:	4610      	mov	r0, r2
 800966c:	4619      	mov	r1, r3
 800966e:	4603      	mov	r3, r0
 8009670:	4642      	mov	r2, r8
 8009672:	189b      	adds	r3, r3, r2
 8009674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009678:	464b      	mov	r3, r9
 800967a:	460a      	mov	r2, r1
 800967c:	eb42 0303 	adc.w	r3, r2, r3
 8009680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009690:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009694:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009698:	460b      	mov	r3, r1
 800969a:	18db      	adds	r3, r3, r3
 800969c:	62bb      	str	r3, [r7, #40]	; 0x28
 800969e:	4613      	mov	r3, r2
 80096a0:	eb42 0303 	adc.w	r3, r2, r3
 80096a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80096ae:	f7f7 f995 	bl	80009dc <__aeabi_uldivmod>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <UART_SetConfig+0x2d4>)
 80096b8:	fba3 1302 	umull	r1, r3, r3, r2
 80096bc:	095b      	lsrs	r3, r3, #5
 80096be:	2164      	movs	r1, #100	; 0x64
 80096c0:	fb01 f303 	mul.w	r3, r1, r3
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	3332      	adds	r3, #50	; 0x32
 80096ca:	4a08      	ldr	r2, [pc, #32]	; (80096ec <UART_SetConfig+0x2d4>)
 80096cc:	fba2 2303 	umull	r2, r3, r2, r3
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	f003 0207 	and.w	r2, r3, #7
 80096d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4422      	add	r2, r4
 80096de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096e0:	e105      	b.n	80098ee <UART_SetConfig+0x4d6>
 80096e2:	bf00      	nop
 80096e4:	40011000 	.word	0x40011000
 80096e8:	40011400 	.word	0x40011400
 80096ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80096fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009702:	4642      	mov	r2, r8
 8009704:	464b      	mov	r3, r9
 8009706:	1891      	adds	r1, r2, r2
 8009708:	6239      	str	r1, [r7, #32]
 800970a:	415b      	adcs	r3, r3
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
 800970e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009712:	4641      	mov	r1, r8
 8009714:	1854      	adds	r4, r2, r1
 8009716:	4649      	mov	r1, r9
 8009718:	eb43 0501 	adc.w	r5, r3, r1
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	f04f 0300 	mov.w	r3, #0
 8009724:	00eb      	lsls	r3, r5, #3
 8009726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800972a:	00e2      	lsls	r2, r4, #3
 800972c:	4614      	mov	r4, r2
 800972e:	461d      	mov	r5, r3
 8009730:	4643      	mov	r3, r8
 8009732:	18e3      	adds	r3, r4, r3
 8009734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009738:	464b      	mov	r3, r9
 800973a:	eb45 0303 	adc.w	r3, r5, r3
 800973e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800974e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009752:	f04f 0200 	mov.w	r2, #0
 8009756:	f04f 0300 	mov.w	r3, #0
 800975a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800975e:	4629      	mov	r1, r5
 8009760:	008b      	lsls	r3, r1, #2
 8009762:	4621      	mov	r1, r4
 8009764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009768:	4621      	mov	r1, r4
 800976a:	008a      	lsls	r2, r1, #2
 800976c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009770:	f7f7 f934 	bl	80009dc <__aeabi_uldivmod>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4b60      	ldr	r3, [pc, #384]	; (80098fc <UART_SetConfig+0x4e4>)
 800977a:	fba3 2302 	umull	r2, r3, r3, r2
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	011c      	lsls	r4, r3, #4
 8009782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009786:	2200      	movs	r2, #0
 8009788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800978c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009790:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009794:	4642      	mov	r2, r8
 8009796:	464b      	mov	r3, r9
 8009798:	1891      	adds	r1, r2, r2
 800979a:	61b9      	str	r1, [r7, #24]
 800979c:	415b      	adcs	r3, r3
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097a4:	4641      	mov	r1, r8
 80097a6:	1851      	adds	r1, r2, r1
 80097a8:	6139      	str	r1, [r7, #16]
 80097aa:	4649      	mov	r1, r9
 80097ac:	414b      	adcs	r3, r1
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	f04f 0200 	mov.w	r2, #0
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097bc:	4659      	mov	r1, fp
 80097be:	00cb      	lsls	r3, r1, #3
 80097c0:	4651      	mov	r1, sl
 80097c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097c6:	4651      	mov	r1, sl
 80097c8:	00ca      	lsls	r2, r1, #3
 80097ca:	4610      	mov	r0, r2
 80097cc:	4619      	mov	r1, r3
 80097ce:	4603      	mov	r3, r0
 80097d0:	4642      	mov	r2, r8
 80097d2:	189b      	adds	r3, r3, r2
 80097d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097d8:	464b      	mov	r3, r9
 80097da:	460a      	mov	r2, r1
 80097dc:	eb42 0303 	adc.w	r3, r2, r3
 80097e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80097ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80097fc:	4649      	mov	r1, r9
 80097fe:	008b      	lsls	r3, r1, #2
 8009800:	4641      	mov	r1, r8
 8009802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009806:	4641      	mov	r1, r8
 8009808:	008a      	lsls	r2, r1, #2
 800980a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800980e:	f7f7 f8e5 	bl	80009dc <__aeabi_uldivmod>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4b39      	ldr	r3, [pc, #228]	; (80098fc <UART_SetConfig+0x4e4>)
 8009818:	fba3 1302 	umull	r1, r3, r3, r2
 800981c:	095b      	lsrs	r3, r3, #5
 800981e:	2164      	movs	r1, #100	; 0x64
 8009820:	fb01 f303 	mul.w	r3, r1, r3
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	3332      	adds	r3, #50	; 0x32
 800982a:	4a34      	ldr	r2, [pc, #208]	; (80098fc <UART_SetConfig+0x4e4>)
 800982c:	fba2 2303 	umull	r2, r3, r2, r3
 8009830:	095b      	lsrs	r3, r3, #5
 8009832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009836:	441c      	add	r4, r3
 8009838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800983c:	2200      	movs	r2, #0
 800983e:	673b      	str	r3, [r7, #112]	; 0x70
 8009840:	677a      	str	r2, [r7, #116]	; 0x74
 8009842:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009846:	4642      	mov	r2, r8
 8009848:	464b      	mov	r3, r9
 800984a:	1891      	adds	r1, r2, r2
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	415b      	adcs	r3, r3
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009856:	4641      	mov	r1, r8
 8009858:	1851      	adds	r1, r2, r1
 800985a:	6039      	str	r1, [r7, #0]
 800985c:	4649      	mov	r1, r9
 800985e:	414b      	adcs	r3, r1
 8009860:	607b      	str	r3, [r7, #4]
 8009862:	f04f 0200 	mov.w	r2, #0
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800986e:	4659      	mov	r1, fp
 8009870:	00cb      	lsls	r3, r1, #3
 8009872:	4651      	mov	r1, sl
 8009874:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009878:	4651      	mov	r1, sl
 800987a:	00ca      	lsls	r2, r1, #3
 800987c:	4610      	mov	r0, r2
 800987e:	4619      	mov	r1, r3
 8009880:	4603      	mov	r3, r0
 8009882:	4642      	mov	r2, r8
 8009884:	189b      	adds	r3, r3, r2
 8009886:	66bb      	str	r3, [r7, #104]	; 0x68
 8009888:	464b      	mov	r3, r9
 800988a:	460a      	mov	r2, r1
 800988c:	eb42 0303 	adc.w	r3, r2, r3
 8009890:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	663b      	str	r3, [r7, #96]	; 0x60
 800989c:	667a      	str	r2, [r7, #100]	; 0x64
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	f04f 0300 	mov.w	r3, #0
 80098a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80098aa:	4649      	mov	r1, r9
 80098ac:	008b      	lsls	r3, r1, #2
 80098ae:	4641      	mov	r1, r8
 80098b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098b4:	4641      	mov	r1, r8
 80098b6:	008a      	lsls	r2, r1, #2
 80098b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80098bc:	f7f7 f88e 	bl	80009dc <__aeabi_uldivmod>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4b0d      	ldr	r3, [pc, #52]	; (80098fc <UART_SetConfig+0x4e4>)
 80098c6:	fba3 1302 	umull	r1, r3, r3, r2
 80098ca:	095b      	lsrs	r3, r3, #5
 80098cc:	2164      	movs	r1, #100	; 0x64
 80098ce:	fb01 f303 	mul.w	r3, r1, r3
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	3332      	adds	r3, #50	; 0x32
 80098d8:	4a08      	ldr	r2, [pc, #32]	; (80098fc <UART_SetConfig+0x4e4>)
 80098da:	fba2 2303 	umull	r2, r3, r2, r3
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	f003 020f 	and.w	r2, r3, #15
 80098e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4422      	add	r2, r4
 80098ec:	609a      	str	r2, [r3, #8]
}
 80098ee:	bf00      	nop
 80098f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80098f4:	46bd      	mov	sp, r7
 80098f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098fa:	bf00      	nop
 80098fc:	51eb851f 	.word	0x51eb851f

08009900 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009900:	b084      	sub	sp, #16
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	f107 001c 	add.w	r0, r7, #28
 800990e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	2b01      	cmp	r3, #1
 8009916:	d122      	bne.n	800995e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800992c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009942:	2b01      	cmp	r3, #1
 8009944:	d105      	bne.n	8009952 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 faa2 	bl	8009e9c <USB_CoreReset>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
 800995c:	e01a      	b.n	8009994 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fa96 	bl	8009e9c <USB_CoreReset>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009976:	2b00      	cmp	r3, #0
 8009978:	d106      	bne.n	8009988 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	639a      	str	r2, [r3, #56]	; 0x38
 8009986:	e005      	b.n	8009994 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	2b01      	cmp	r3, #1
 8009998:	d10b      	bne.n	80099b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f043 0206 	orr.w	r2, r3, #6
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f043 0220 	orr.w	r2, r3, #32
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099be:	b004      	add	sp, #16
 80099c0:	4770      	bx	lr

080099c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f023 0201 	bic.w	r2, r3, #1
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d115      	bne.n	8009a32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a12:	2001      	movs	r0, #1
 8009a14:	f7fa fc74 	bl	8004300 <HAL_Delay>
      ms++;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa2e 	bl	8009e80 <USB_GetMode>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d01e      	beq.n	8009a68 <USB_SetCurrentMode+0x84>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b31      	cmp	r3, #49	; 0x31
 8009a2e:	d9f0      	bls.n	8009a12 <USB_SetCurrentMode+0x2e>
 8009a30:	e01a      	b.n	8009a68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a32:	78fb      	ldrb	r3, [r7, #3]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d115      	bne.n	8009a64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a44:	2001      	movs	r0, #1
 8009a46:	f7fa fc5b 	bl	8004300 <HAL_Delay>
      ms++;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fa15 	bl	8009e80 <USB_GetMode>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <USB_SetCurrentMode+0x84>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b31      	cmp	r3, #49	; 0x31
 8009a60:	d9f0      	bls.n	8009a44 <USB_SetCurrentMode+0x60>
 8009a62:	e001      	b.n	8009a68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e005      	b.n	8009a74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b32      	cmp	r3, #50	; 0x32
 8009a6c:	d101      	bne.n	8009a72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e000      	b.n	8009a74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b086      	sub	sp, #24
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a96:	2300      	movs	r3, #0
 8009a98:	613b      	str	r3, [r7, #16]
 8009a9a:	e009      	b.n	8009ab0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	3340      	adds	r3, #64	; 0x40
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	3301      	adds	r3, #1
 8009aae:	613b      	str	r3, [r7, #16]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2b0e      	cmp	r3, #14
 8009ab4:	d9f2      	bls.n	8009a9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d11c      	bne.n	8009af6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aca:	f043 0302 	orr.w	r3, r3, #2
 8009ace:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	639a      	str	r2, [r3, #56]	; 0x38
 8009af4:	e00b      	b.n	8009b0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b14:	461a      	mov	r2, r3
 8009b16:	2300      	movs	r3, #0
 8009b18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b20:	4619      	mov	r1, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b28:	461a      	mov	r2, r3
 8009b2a:	680b      	ldr	r3, [r1, #0]
 8009b2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d10c      	bne.n	8009b4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f965 	bl	8009e0c <USB_SetDevSpeed>
 8009b42:	e008      	b.n	8009b56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b44:	2101      	movs	r1, #1
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f960 	bl	8009e0c <USB_SetDevSpeed>
 8009b4c:	e003      	b.n	8009b56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b4e:	2103      	movs	r1, #3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f95b 	bl	8009e0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b56:	2110      	movs	r1, #16
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f8f3 	bl	8009d44 <USB_FlushTxFifo>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f91f 	bl	8009dac <USB_FlushRxFifo>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7e:	461a      	mov	r2, r3
 8009b80:	2300      	movs	r3, #0
 8009b82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b96:	461a      	mov	r2, r3
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	613b      	str	r3, [r7, #16]
 8009ba0:	e043      	b.n	8009c2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	015a      	lsls	r2, r3, #5
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bb8:	d118      	bne.n	8009bec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	e013      	b.n	8009bfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be2:	461a      	mov	r2, r3
 8009be4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	e008      	b.n	8009bfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	3301      	adds	r3, #1
 8009c28:	613b      	str	r3, [r7, #16]
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d3b7      	bcc.n	8009ba2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c32:	2300      	movs	r3, #0
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	e043      	b.n	8009cc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c4e:	d118      	bne.n	8009c82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10a      	bne.n	8009c6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c62:	461a      	mov	r2, r3
 8009c64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	e013      	b.n	8009c94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	e008      	b.n	8009c94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8e:	461a      	mov	r2, r3
 8009c90:	2300      	movs	r3, #0
 8009c92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	613b      	str	r3, [r7, #16]
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d3b7      	bcc.n	8009c38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009ce8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d105      	bne.n	8009cfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	f043 0210 	orr.w	r2, r3, #16
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	699a      	ldr	r2, [r3, #24]
 8009d00:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <USB_DevInit+0x2c4>)
 8009d02:	4313      	orrs	r3, r2
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d005      	beq.n	8009d1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	f043 0208 	orr.w	r2, r3, #8
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d107      	bne.n	8009d30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d28:	f043 0304 	orr.w	r3, r3, #4
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3718      	adds	r7, #24
 8009d36:	46bd      	mov	sp, r7
 8009d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d3c:	b004      	add	sp, #16
 8009d3e:	4770      	bx	lr
 8009d40:	803c3800 	.word	0x803c3800

08009d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3301      	adds	r3, #1
 8009d56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a13      	ldr	r2, [pc, #76]	; (8009da8 <USB_FlushTxFifo+0x64>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d901      	bls.n	8009d64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e01b      	b.n	8009d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	daf2      	bge.n	8009d52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	019b      	lsls	r3, r3, #6
 8009d74:	f043 0220 	orr.w	r2, r3, #32
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4a08      	ldr	r2, [pc, #32]	; (8009da8 <USB_FlushTxFifo+0x64>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d901      	bls.n	8009d8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e006      	b.n	8009d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	d0f0      	beq.n	8009d7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	00030d40 	.word	0x00030d40

08009dac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	4a11      	ldr	r2, [pc, #68]	; (8009e08 <USB_FlushRxFifo+0x5c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d901      	bls.n	8009dca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e018      	b.n	8009dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	daf2      	bge.n	8009db8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2210      	movs	r2, #16
 8009dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3301      	adds	r3, #1
 8009de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4a08      	ldr	r2, [pc, #32]	; (8009e08 <USB_FlushRxFifo+0x5c>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d901      	bls.n	8009dee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e006      	b.n	8009dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f003 0310 	and.w	r3, r3, #16
 8009df6:	2b10      	cmp	r3, #16
 8009df8:	d0f0      	beq.n	8009ddc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	00030d40 	.word	0x00030d40

08009e0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	68f9      	ldr	r1, [r7, #12]
 8009e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e58:	f023 0303 	bic.w	r3, r3, #3
 8009e5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e6c:	f043 0302 	orr.w	r3, r3, #2
 8009e70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	f003 0301 	and.w	r3, r3, #1
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4a13      	ldr	r2, [pc, #76]	; (8009f00 <USB_CoreReset+0x64>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d901      	bls.n	8009eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e01b      	b.n	8009ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	daf2      	bge.n	8009ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	f043 0201 	orr.w	r2, r3, #1
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4a09      	ldr	r2, [pc, #36]	; (8009f00 <USB_CoreReset+0x64>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d901      	bls.n	8009ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e006      	b.n	8009ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d0f0      	beq.n	8009ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	00030d40 	.word	0x00030d40

08009f04 <__errno>:
 8009f04:	4b01      	ldr	r3, [pc, #4]	; (8009f0c <__errno+0x8>)
 8009f06:	6818      	ldr	r0, [r3, #0]
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	20000124 	.word	0x20000124

08009f10 <__libc_init_array>:
 8009f10:	b570      	push	{r4, r5, r6, lr}
 8009f12:	4d0d      	ldr	r5, [pc, #52]	; (8009f48 <__libc_init_array+0x38>)
 8009f14:	4c0d      	ldr	r4, [pc, #52]	; (8009f4c <__libc_init_array+0x3c>)
 8009f16:	1b64      	subs	r4, r4, r5
 8009f18:	10a4      	asrs	r4, r4, #2
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	42a6      	cmp	r6, r4
 8009f1e:	d109      	bne.n	8009f34 <__libc_init_array+0x24>
 8009f20:	4d0b      	ldr	r5, [pc, #44]	; (8009f50 <__libc_init_array+0x40>)
 8009f22:	4c0c      	ldr	r4, [pc, #48]	; (8009f54 <__libc_init_array+0x44>)
 8009f24:	f000 fd1e 	bl	800a964 <_init>
 8009f28:	1b64      	subs	r4, r4, r5
 8009f2a:	10a4      	asrs	r4, r4, #2
 8009f2c:	2600      	movs	r6, #0
 8009f2e:	42a6      	cmp	r6, r4
 8009f30:	d105      	bne.n	8009f3e <__libc_init_array+0x2e>
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f38:	4798      	blx	r3
 8009f3a:	3601      	adds	r6, #1
 8009f3c:	e7ee      	b.n	8009f1c <__libc_init_array+0xc>
 8009f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f42:	4798      	blx	r3
 8009f44:	3601      	adds	r6, #1
 8009f46:	e7f2      	b.n	8009f2e <__libc_init_array+0x1e>
 8009f48:	0800ac68 	.word	0x0800ac68
 8009f4c:	0800ac68 	.word	0x0800ac68
 8009f50:	0800ac68 	.word	0x0800ac68
 8009f54:	0800ac6c 	.word	0x0800ac6c

08009f58 <memset>:
 8009f58:	4402      	add	r2, r0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d100      	bne.n	8009f62 <memset+0xa>
 8009f60:	4770      	bx	lr
 8009f62:	f803 1b01 	strb.w	r1, [r3], #1
 8009f66:	e7f9      	b.n	8009f5c <memset+0x4>

08009f68 <_puts_r>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	460e      	mov	r6, r1
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	b118      	cbz	r0, 8009f78 <_puts_r+0x10>
 8009f70:	6983      	ldr	r3, [r0, #24]
 8009f72:	b90b      	cbnz	r3, 8009f78 <_puts_r+0x10>
 8009f74:	f000 fa48 	bl	800a408 <__sinit>
 8009f78:	69ab      	ldr	r3, [r5, #24]
 8009f7a:	68ac      	ldr	r4, [r5, #8]
 8009f7c:	b913      	cbnz	r3, 8009f84 <_puts_r+0x1c>
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f000 fa42 	bl	800a408 <__sinit>
 8009f84:	4b2c      	ldr	r3, [pc, #176]	; (800a038 <_puts_r+0xd0>)
 8009f86:	429c      	cmp	r4, r3
 8009f88:	d120      	bne.n	8009fcc <_puts_r+0x64>
 8009f8a:	686c      	ldr	r4, [r5, #4]
 8009f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f8e:	07db      	lsls	r3, r3, #31
 8009f90:	d405      	bmi.n	8009f9e <_puts_r+0x36>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	0598      	lsls	r0, r3, #22
 8009f96:	d402      	bmi.n	8009f9e <_puts_r+0x36>
 8009f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9a:	f000 fad3 	bl	800a544 <__retarget_lock_acquire_recursive>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	0719      	lsls	r1, r3, #28
 8009fa2:	d51d      	bpl.n	8009fe0 <_puts_r+0x78>
 8009fa4:	6923      	ldr	r3, [r4, #16]
 8009fa6:	b1db      	cbz	r3, 8009fe0 <_puts_r+0x78>
 8009fa8:	3e01      	subs	r6, #1
 8009faa:	68a3      	ldr	r3, [r4, #8]
 8009fac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	bb39      	cbnz	r1, 800a006 <_puts_r+0x9e>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	da38      	bge.n	800a02c <_puts_r+0xc4>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	210a      	movs	r1, #10
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 f848 	bl	800a054 <__swbuf_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d011      	beq.n	8009fec <_puts_r+0x84>
 8009fc8:	250a      	movs	r5, #10
 8009fca:	e011      	b.n	8009ff0 <_puts_r+0x88>
 8009fcc:	4b1b      	ldr	r3, [pc, #108]	; (800a03c <_puts_r+0xd4>)
 8009fce:	429c      	cmp	r4, r3
 8009fd0:	d101      	bne.n	8009fd6 <_puts_r+0x6e>
 8009fd2:	68ac      	ldr	r4, [r5, #8]
 8009fd4:	e7da      	b.n	8009f8c <_puts_r+0x24>
 8009fd6:	4b1a      	ldr	r3, [pc, #104]	; (800a040 <_puts_r+0xd8>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	bf08      	it	eq
 8009fdc:	68ec      	ldreq	r4, [r5, #12]
 8009fde:	e7d5      	b.n	8009f8c <_puts_r+0x24>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f000 f888 	bl	800a0f8 <__swsetup_r>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d0dd      	beq.n	8009fa8 <_puts_r+0x40>
 8009fec:	f04f 35ff 	mov.w	r5, #4294967295
 8009ff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ff2:	07da      	lsls	r2, r3, #31
 8009ff4:	d405      	bmi.n	800a002 <_puts_r+0x9a>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	059b      	lsls	r3, r3, #22
 8009ffa:	d402      	bmi.n	800a002 <_puts_r+0x9a>
 8009ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ffe:	f000 faa2 	bl	800a546 <__retarget_lock_release_recursive>
 800a002:	4628      	mov	r0, r5
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	2b00      	cmp	r3, #0
 800a008:	da04      	bge.n	800a014 <_puts_r+0xac>
 800a00a:	69a2      	ldr	r2, [r4, #24]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	dc06      	bgt.n	800a01e <_puts_r+0xb6>
 800a010:	290a      	cmp	r1, #10
 800a012:	d004      	beq.n	800a01e <_puts_r+0xb6>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	7019      	strb	r1, [r3, #0]
 800a01c:	e7c5      	b.n	8009faa <_puts_r+0x42>
 800a01e:	4622      	mov	r2, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f000 f817 	bl	800a054 <__swbuf_r>
 800a026:	3001      	adds	r0, #1
 800a028:	d1bf      	bne.n	8009faa <_puts_r+0x42>
 800a02a:	e7df      	b.n	8009fec <_puts_r+0x84>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	250a      	movs	r5, #10
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	6022      	str	r2, [r4, #0]
 800a034:	701d      	strb	r5, [r3, #0]
 800a036:	e7db      	b.n	8009ff0 <_puts_r+0x88>
 800a038:	0800ac20 	.word	0x0800ac20
 800a03c:	0800ac40 	.word	0x0800ac40
 800a040:	0800ac00 	.word	0x0800ac00

0800a044 <puts>:
 800a044:	4b02      	ldr	r3, [pc, #8]	; (800a050 <puts+0xc>)
 800a046:	4601      	mov	r1, r0
 800a048:	6818      	ldr	r0, [r3, #0]
 800a04a:	f7ff bf8d 	b.w	8009f68 <_puts_r>
 800a04e:	bf00      	nop
 800a050:	20000124 	.word	0x20000124

0800a054 <__swbuf_r>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	460e      	mov	r6, r1
 800a058:	4614      	mov	r4, r2
 800a05a:	4605      	mov	r5, r0
 800a05c:	b118      	cbz	r0, 800a066 <__swbuf_r+0x12>
 800a05e:	6983      	ldr	r3, [r0, #24]
 800a060:	b90b      	cbnz	r3, 800a066 <__swbuf_r+0x12>
 800a062:	f000 f9d1 	bl	800a408 <__sinit>
 800a066:	4b21      	ldr	r3, [pc, #132]	; (800a0ec <__swbuf_r+0x98>)
 800a068:	429c      	cmp	r4, r3
 800a06a:	d12b      	bne.n	800a0c4 <__swbuf_r+0x70>
 800a06c:	686c      	ldr	r4, [r5, #4]
 800a06e:	69a3      	ldr	r3, [r4, #24]
 800a070:	60a3      	str	r3, [r4, #8]
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	071a      	lsls	r2, r3, #28
 800a076:	d52f      	bpl.n	800a0d8 <__swbuf_r+0x84>
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	b36b      	cbz	r3, 800a0d8 <__swbuf_r+0x84>
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	6820      	ldr	r0, [r4, #0]
 800a080:	1ac0      	subs	r0, r0, r3
 800a082:	6963      	ldr	r3, [r4, #20]
 800a084:	b2f6      	uxtb	r6, r6
 800a086:	4283      	cmp	r3, r0
 800a088:	4637      	mov	r7, r6
 800a08a:	dc04      	bgt.n	800a096 <__swbuf_r+0x42>
 800a08c:	4621      	mov	r1, r4
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 f926 	bl	800a2e0 <_fflush_r>
 800a094:	bb30      	cbnz	r0, 800a0e4 <__swbuf_r+0x90>
 800a096:	68a3      	ldr	r3, [r4, #8]
 800a098:	3b01      	subs	r3, #1
 800a09a:	60a3      	str	r3, [r4, #8]
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	6022      	str	r2, [r4, #0]
 800a0a2:	701e      	strb	r6, [r3, #0]
 800a0a4:	6963      	ldr	r3, [r4, #20]
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	4283      	cmp	r3, r0
 800a0aa:	d004      	beq.n	800a0b6 <__swbuf_r+0x62>
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	07db      	lsls	r3, r3, #31
 800a0b0:	d506      	bpl.n	800a0c0 <__swbuf_r+0x6c>
 800a0b2:	2e0a      	cmp	r6, #10
 800a0b4:	d104      	bne.n	800a0c0 <__swbuf_r+0x6c>
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f000 f911 	bl	800a2e0 <_fflush_r>
 800a0be:	b988      	cbnz	r0, 800a0e4 <__swbuf_r+0x90>
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c4:	4b0a      	ldr	r3, [pc, #40]	; (800a0f0 <__swbuf_r+0x9c>)
 800a0c6:	429c      	cmp	r4, r3
 800a0c8:	d101      	bne.n	800a0ce <__swbuf_r+0x7a>
 800a0ca:	68ac      	ldr	r4, [r5, #8]
 800a0cc:	e7cf      	b.n	800a06e <__swbuf_r+0x1a>
 800a0ce:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <__swbuf_r+0xa0>)
 800a0d0:	429c      	cmp	r4, r3
 800a0d2:	bf08      	it	eq
 800a0d4:	68ec      	ldreq	r4, [r5, #12]
 800a0d6:	e7ca      	b.n	800a06e <__swbuf_r+0x1a>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f000 f80c 	bl	800a0f8 <__swsetup_r>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d0cb      	beq.n	800a07c <__swbuf_r+0x28>
 800a0e4:	f04f 37ff 	mov.w	r7, #4294967295
 800a0e8:	e7ea      	b.n	800a0c0 <__swbuf_r+0x6c>
 800a0ea:	bf00      	nop
 800a0ec:	0800ac20 	.word	0x0800ac20
 800a0f0:	0800ac40 	.word	0x0800ac40
 800a0f4:	0800ac00 	.word	0x0800ac00

0800a0f8 <__swsetup_r>:
 800a0f8:	4b32      	ldr	r3, [pc, #200]	; (800a1c4 <__swsetup_r+0xcc>)
 800a0fa:	b570      	push	{r4, r5, r6, lr}
 800a0fc:	681d      	ldr	r5, [r3, #0]
 800a0fe:	4606      	mov	r6, r0
 800a100:	460c      	mov	r4, r1
 800a102:	b125      	cbz	r5, 800a10e <__swsetup_r+0x16>
 800a104:	69ab      	ldr	r3, [r5, #24]
 800a106:	b913      	cbnz	r3, 800a10e <__swsetup_r+0x16>
 800a108:	4628      	mov	r0, r5
 800a10a:	f000 f97d 	bl	800a408 <__sinit>
 800a10e:	4b2e      	ldr	r3, [pc, #184]	; (800a1c8 <__swsetup_r+0xd0>)
 800a110:	429c      	cmp	r4, r3
 800a112:	d10f      	bne.n	800a134 <__swsetup_r+0x3c>
 800a114:	686c      	ldr	r4, [r5, #4]
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a11c:	0719      	lsls	r1, r3, #28
 800a11e:	d42c      	bmi.n	800a17a <__swsetup_r+0x82>
 800a120:	06dd      	lsls	r5, r3, #27
 800a122:	d411      	bmi.n	800a148 <__swsetup_r+0x50>
 800a124:	2309      	movs	r3, #9
 800a126:	6033      	str	r3, [r6, #0]
 800a128:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a12c:	81a3      	strh	r3, [r4, #12]
 800a12e:	f04f 30ff 	mov.w	r0, #4294967295
 800a132:	e03e      	b.n	800a1b2 <__swsetup_r+0xba>
 800a134:	4b25      	ldr	r3, [pc, #148]	; (800a1cc <__swsetup_r+0xd4>)
 800a136:	429c      	cmp	r4, r3
 800a138:	d101      	bne.n	800a13e <__swsetup_r+0x46>
 800a13a:	68ac      	ldr	r4, [r5, #8]
 800a13c:	e7eb      	b.n	800a116 <__swsetup_r+0x1e>
 800a13e:	4b24      	ldr	r3, [pc, #144]	; (800a1d0 <__swsetup_r+0xd8>)
 800a140:	429c      	cmp	r4, r3
 800a142:	bf08      	it	eq
 800a144:	68ec      	ldreq	r4, [r5, #12]
 800a146:	e7e6      	b.n	800a116 <__swsetup_r+0x1e>
 800a148:	0758      	lsls	r0, r3, #29
 800a14a:	d512      	bpl.n	800a172 <__swsetup_r+0x7a>
 800a14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a14e:	b141      	cbz	r1, 800a162 <__swsetup_r+0x6a>
 800a150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a154:	4299      	cmp	r1, r3
 800a156:	d002      	beq.n	800a15e <__swsetup_r+0x66>
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 fa5b 	bl	800a614 <_free_r>
 800a15e:	2300      	movs	r3, #0
 800a160:	6363      	str	r3, [r4, #52]	; 0x34
 800a162:	89a3      	ldrh	r3, [r4, #12]
 800a164:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a168:	81a3      	strh	r3, [r4, #12]
 800a16a:	2300      	movs	r3, #0
 800a16c:	6063      	str	r3, [r4, #4]
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	f043 0308 	orr.w	r3, r3, #8
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	b94b      	cbnz	r3, 800a192 <__swsetup_r+0x9a>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a188:	d003      	beq.n	800a192 <__swsetup_r+0x9a>
 800a18a:	4621      	mov	r1, r4
 800a18c:	4630      	mov	r0, r6
 800a18e:	f000 fa01 	bl	800a594 <__smakebuf_r>
 800a192:	89a0      	ldrh	r0, [r4, #12]
 800a194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a198:	f010 0301 	ands.w	r3, r0, #1
 800a19c:	d00a      	beq.n	800a1b4 <__swsetup_r+0xbc>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60a3      	str	r3, [r4, #8]
 800a1a2:	6963      	ldr	r3, [r4, #20]
 800a1a4:	425b      	negs	r3, r3
 800a1a6:	61a3      	str	r3, [r4, #24]
 800a1a8:	6923      	ldr	r3, [r4, #16]
 800a1aa:	b943      	cbnz	r3, 800a1be <__swsetup_r+0xc6>
 800a1ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1b0:	d1ba      	bne.n	800a128 <__swsetup_r+0x30>
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
 800a1b4:	0781      	lsls	r1, r0, #30
 800a1b6:	bf58      	it	pl
 800a1b8:	6963      	ldrpl	r3, [r4, #20]
 800a1ba:	60a3      	str	r3, [r4, #8]
 800a1bc:	e7f4      	b.n	800a1a8 <__swsetup_r+0xb0>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e7f7      	b.n	800a1b2 <__swsetup_r+0xba>
 800a1c2:	bf00      	nop
 800a1c4:	20000124 	.word	0x20000124
 800a1c8:	0800ac20 	.word	0x0800ac20
 800a1cc:	0800ac40 	.word	0x0800ac40
 800a1d0:	0800ac00 	.word	0x0800ac00

0800a1d4 <__sflush_r>:
 800a1d4:	898a      	ldrh	r2, [r1, #12]
 800a1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	4605      	mov	r5, r0
 800a1dc:	0710      	lsls	r0, r2, #28
 800a1de:	460c      	mov	r4, r1
 800a1e0:	d458      	bmi.n	800a294 <__sflush_r+0xc0>
 800a1e2:	684b      	ldr	r3, [r1, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dc05      	bgt.n	800a1f4 <__sflush_r+0x20>
 800a1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	dc02      	bgt.n	800a1f4 <__sflush_r+0x20>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1f6:	2e00      	cmp	r6, #0
 800a1f8:	d0f9      	beq.n	800a1ee <__sflush_r+0x1a>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a200:	682f      	ldr	r7, [r5, #0]
 800a202:	602b      	str	r3, [r5, #0]
 800a204:	d032      	beq.n	800a26c <__sflush_r+0x98>
 800a206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	075a      	lsls	r2, r3, #29
 800a20c:	d505      	bpl.n	800a21a <__sflush_r+0x46>
 800a20e:	6863      	ldr	r3, [r4, #4]
 800a210:	1ac0      	subs	r0, r0, r3
 800a212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a214:	b10b      	cbz	r3, 800a21a <__sflush_r+0x46>
 800a216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a218:	1ac0      	subs	r0, r0, r3
 800a21a:	2300      	movs	r3, #0
 800a21c:	4602      	mov	r2, r0
 800a21e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a220:	6a21      	ldr	r1, [r4, #32]
 800a222:	4628      	mov	r0, r5
 800a224:	47b0      	blx	r6
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	d106      	bne.n	800a23a <__sflush_r+0x66>
 800a22c:	6829      	ldr	r1, [r5, #0]
 800a22e:	291d      	cmp	r1, #29
 800a230:	d82c      	bhi.n	800a28c <__sflush_r+0xb8>
 800a232:	4a2a      	ldr	r2, [pc, #168]	; (800a2dc <__sflush_r+0x108>)
 800a234:	40ca      	lsrs	r2, r1
 800a236:	07d6      	lsls	r6, r2, #31
 800a238:	d528      	bpl.n	800a28c <__sflush_r+0xb8>
 800a23a:	2200      	movs	r2, #0
 800a23c:	6062      	str	r2, [r4, #4]
 800a23e:	04d9      	lsls	r1, r3, #19
 800a240:	6922      	ldr	r2, [r4, #16]
 800a242:	6022      	str	r2, [r4, #0]
 800a244:	d504      	bpl.n	800a250 <__sflush_r+0x7c>
 800a246:	1c42      	adds	r2, r0, #1
 800a248:	d101      	bne.n	800a24e <__sflush_r+0x7a>
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	b903      	cbnz	r3, 800a250 <__sflush_r+0x7c>
 800a24e:	6560      	str	r0, [r4, #84]	; 0x54
 800a250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a252:	602f      	str	r7, [r5, #0]
 800a254:	2900      	cmp	r1, #0
 800a256:	d0ca      	beq.n	800a1ee <__sflush_r+0x1a>
 800a258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a25c:	4299      	cmp	r1, r3
 800a25e:	d002      	beq.n	800a266 <__sflush_r+0x92>
 800a260:	4628      	mov	r0, r5
 800a262:	f000 f9d7 	bl	800a614 <_free_r>
 800a266:	2000      	movs	r0, #0
 800a268:	6360      	str	r0, [r4, #52]	; 0x34
 800a26a:	e7c1      	b.n	800a1f0 <__sflush_r+0x1c>
 800a26c:	6a21      	ldr	r1, [r4, #32]
 800a26e:	2301      	movs	r3, #1
 800a270:	4628      	mov	r0, r5
 800a272:	47b0      	blx	r6
 800a274:	1c41      	adds	r1, r0, #1
 800a276:	d1c7      	bne.n	800a208 <__sflush_r+0x34>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0c4      	beq.n	800a208 <__sflush_r+0x34>
 800a27e:	2b1d      	cmp	r3, #29
 800a280:	d001      	beq.n	800a286 <__sflush_r+0xb2>
 800a282:	2b16      	cmp	r3, #22
 800a284:	d101      	bne.n	800a28a <__sflush_r+0xb6>
 800a286:	602f      	str	r7, [r5, #0]
 800a288:	e7b1      	b.n	800a1ee <__sflush_r+0x1a>
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	e7ad      	b.n	800a1f0 <__sflush_r+0x1c>
 800a294:	690f      	ldr	r7, [r1, #16]
 800a296:	2f00      	cmp	r7, #0
 800a298:	d0a9      	beq.n	800a1ee <__sflush_r+0x1a>
 800a29a:	0793      	lsls	r3, r2, #30
 800a29c:	680e      	ldr	r6, [r1, #0]
 800a29e:	bf08      	it	eq
 800a2a0:	694b      	ldreq	r3, [r1, #20]
 800a2a2:	600f      	str	r7, [r1, #0]
 800a2a4:	bf18      	it	ne
 800a2a6:	2300      	movne	r3, #0
 800a2a8:	eba6 0807 	sub.w	r8, r6, r7
 800a2ac:	608b      	str	r3, [r1, #8]
 800a2ae:	f1b8 0f00 	cmp.w	r8, #0
 800a2b2:	dd9c      	ble.n	800a1ee <__sflush_r+0x1a>
 800a2b4:	6a21      	ldr	r1, [r4, #32]
 800a2b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2b8:	4643      	mov	r3, r8
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b0      	blx	r6
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	dc06      	bgt.n	800a2d2 <__sflush_r+0xfe>
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	e78e      	b.n	800a1f0 <__sflush_r+0x1c>
 800a2d2:	4407      	add	r7, r0
 800a2d4:	eba8 0800 	sub.w	r8, r8, r0
 800a2d8:	e7e9      	b.n	800a2ae <__sflush_r+0xda>
 800a2da:	bf00      	nop
 800a2dc:	20400001 	.word	0x20400001

0800a2e0 <_fflush_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	690b      	ldr	r3, [r1, #16]
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	b913      	cbnz	r3, 800a2f0 <_fflush_r+0x10>
 800a2ea:	2500      	movs	r5, #0
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	b118      	cbz	r0, 800a2fa <_fflush_r+0x1a>
 800a2f2:	6983      	ldr	r3, [r0, #24]
 800a2f4:	b90b      	cbnz	r3, 800a2fa <_fflush_r+0x1a>
 800a2f6:	f000 f887 	bl	800a408 <__sinit>
 800a2fa:	4b14      	ldr	r3, [pc, #80]	; (800a34c <_fflush_r+0x6c>)
 800a2fc:	429c      	cmp	r4, r3
 800a2fe:	d11b      	bne.n	800a338 <_fflush_r+0x58>
 800a300:	686c      	ldr	r4, [r5, #4]
 800a302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0ef      	beq.n	800a2ea <_fflush_r+0xa>
 800a30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a30c:	07d0      	lsls	r0, r2, #31
 800a30e:	d404      	bmi.n	800a31a <_fflush_r+0x3a>
 800a310:	0599      	lsls	r1, r3, #22
 800a312:	d402      	bmi.n	800a31a <_fflush_r+0x3a>
 800a314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a316:	f000 f915 	bl	800a544 <__retarget_lock_acquire_recursive>
 800a31a:	4628      	mov	r0, r5
 800a31c:	4621      	mov	r1, r4
 800a31e:	f7ff ff59 	bl	800a1d4 <__sflush_r>
 800a322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a324:	07da      	lsls	r2, r3, #31
 800a326:	4605      	mov	r5, r0
 800a328:	d4e0      	bmi.n	800a2ec <_fflush_r+0xc>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	059b      	lsls	r3, r3, #22
 800a32e:	d4dd      	bmi.n	800a2ec <_fflush_r+0xc>
 800a330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a332:	f000 f908 	bl	800a546 <__retarget_lock_release_recursive>
 800a336:	e7d9      	b.n	800a2ec <_fflush_r+0xc>
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <_fflush_r+0x70>)
 800a33a:	429c      	cmp	r4, r3
 800a33c:	d101      	bne.n	800a342 <_fflush_r+0x62>
 800a33e:	68ac      	ldr	r4, [r5, #8]
 800a340:	e7df      	b.n	800a302 <_fflush_r+0x22>
 800a342:	4b04      	ldr	r3, [pc, #16]	; (800a354 <_fflush_r+0x74>)
 800a344:	429c      	cmp	r4, r3
 800a346:	bf08      	it	eq
 800a348:	68ec      	ldreq	r4, [r5, #12]
 800a34a:	e7da      	b.n	800a302 <_fflush_r+0x22>
 800a34c:	0800ac20 	.word	0x0800ac20
 800a350:	0800ac40 	.word	0x0800ac40
 800a354:	0800ac00 	.word	0x0800ac00

0800a358 <std>:
 800a358:	2300      	movs	r3, #0
 800a35a:	b510      	push	{r4, lr}
 800a35c:	4604      	mov	r4, r0
 800a35e:	e9c0 3300 	strd	r3, r3, [r0]
 800a362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a366:	6083      	str	r3, [r0, #8]
 800a368:	8181      	strh	r1, [r0, #12]
 800a36a:	6643      	str	r3, [r0, #100]	; 0x64
 800a36c:	81c2      	strh	r2, [r0, #14]
 800a36e:	6183      	str	r3, [r0, #24]
 800a370:	4619      	mov	r1, r3
 800a372:	2208      	movs	r2, #8
 800a374:	305c      	adds	r0, #92	; 0x5c
 800a376:	f7ff fdef 	bl	8009f58 <memset>
 800a37a:	4b05      	ldr	r3, [pc, #20]	; (800a390 <std+0x38>)
 800a37c:	6263      	str	r3, [r4, #36]	; 0x24
 800a37e:	4b05      	ldr	r3, [pc, #20]	; (800a394 <std+0x3c>)
 800a380:	62a3      	str	r3, [r4, #40]	; 0x28
 800a382:	4b05      	ldr	r3, [pc, #20]	; (800a398 <std+0x40>)
 800a384:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a386:	4b05      	ldr	r3, [pc, #20]	; (800a39c <std+0x44>)
 800a388:	6224      	str	r4, [r4, #32]
 800a38a:	6323      	str	r3, [r4, #48]	; 0x30
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	bf00      	nop
 800a390:	0800a7f5 	.word	0x0800a7f5
 800a394:	0800a817 	.word	0x0800a817
 800a398:	0800a84f 	.word	0x0800a84f
 800a39c:	0800a873 	.word	0x0800a873

0800a3a0 <_cleanup_r>:
 800a3a0:	4901      	ldr	r1, [pc, #4]	; (800a3a8 <_cleanup_r+0x8>)
 800a3a2:	f000 b8af 	b.w	800a504 <_fwalk_reent>
 800a3a6:	bf00      	nop
 800a3a8:	0800a2e1 	.word	0x0800a2e1

0800a3ac <__sfmoreglue>:
 800a3ac:	b570      	push	{r4, r5, r6, lr}
 800a3ae:	2268      	movs	r2, #104	; 0x68
 800a3b0:	1e4d      	subs	r5, r1, #1
 800a3b2:	4355      	muls	r5, r2
 800a3b4:	460e      	mov	r6, r1
 800a3b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3ba:	f000 f997 	bl	800a6ec <_malloc_r>
 800a3be:	4604      	mov	r4, r0
 800a3c0:	b140      	cbz	r0, 800a3d4 <__sfmoreglue+0x28>
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	e9c0 1600 	strd	r1, r6, [r0]
 800a3c8:	300c      	adds	r0, #12
 800a3ca:	60a0      	str	r0, [r4, #8]
 800a3cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3d0:	f7ff fdc2 	bl	8009f58 <memset>
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}

0800a3d8 <__sfp_lock_acquire>:
 800a3d8:	4801      	ldr	r0, [pc, #4]	; (800a3e0 <__sfp_lock_acquire+0x8>)
 800a3da:	f000 b8b3 	b.w	800a544 <__retarget_lock_acquire_recursive>
 800a3de:	bf00      	nop
 800a3e0:	20000f4d 	.word	0x20000f4d

0800a3e4 <__sfp_lock_release>:
 800a3e4:	4801      	ldr	r0, [pc, #4]	; (800a3ec <__sfp_lock_release+0x8>)
 800a3e6:	f000 b8ae 	b.w	800a546 <__retarget_lock_release_recursive>
 800a3ea:	bf00      	nop
 800a3ec:	20000f4d 	.word	0x20000f4d

0800a3f0 <__sinit_lock_acquire>:
 800a3f0:	4801      	ldr	r0, [pc, #4]	; (800a3f8 <__sinit_lock_acquire+0x8>)
 800a3f2:	f000 b8a7 	b.w	800a544 <__retarget_lock_acquire_recursive>
 800a3f6:	bf00      	nop
 800a3f8:	20000f4e 	.word	0x20000f4e

0800a3fc <__sinit_lock_release>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	; (800a404 <__sinit_lock_release+0x8>)
 800a3fe:	f000 b8a2 	b.w	800a546 <__retarget_lock_release_recursive>
 800a402:	bf00      	nop
 800a404:	20000f4e 	.word	0x20000f4e

0800a408 <__sinit>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	4604      	mov	r4, r0
 800a40c:	f7ff fff0 	bl	800a3f0 <__sinit_lock_acquire>
 800a410:	69a3      	ldr	r3, [r4, #24]
 800a412:	b11b      	cbz	r3, 800a41c <__sinit+0x14>
 800a414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a418:	f7ff bff0 	b.w	800a3fc <__sinit_lock_release>
 800a41c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a420:	6523      	str	r3, [r4, #80]	; 0x50
 800a422:	4b13      	ldr	r3, [pc, #76]	; (800a470 <__sinit+0x68>)
 800a424:	4a13      	ldr	r2, [pc, #76]	; (800a474 <__sinit+0x6c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	62a2      	str	r2, [r4, #40]	; 0x28
 800a42a:	42a3      	cmp	r3, r4
 800a42c:	bf04      	itt	eq
 800a42e:	2301      	moveq	r3, #1
 800a430:	61a3      	streq	r3, [r4, #24]
 800a432:	4620      	mov	r0, r4
 800a434:	f000 f820 	bl	800a478 <__sfp>
 800a438:	6060      	str	r0, [r4, #4]
 800a43a:	4620      	mov	r0, r4
 800a43c:	f000 f81c 	bl	800a478 <__sfp>
 800a440:	60a0      	str	r0, [r4, #8]
 800a442:	4620      	mov	r0, r4
 800a444:	f000 f818 	bl	800a478 <__sfp>
 800a448:	2200      	movs	r2, #0
 800a44a:	60e0      	str	r0, [r4, #12]
 800a44c:	2104      	movs	r1, #4
 800a44e:	6860      	ldr	r0, [r4, #4]
 800a450:	f7ff ff82 	bl	800a358 <std>
 800a454:	68a0      	ldr	r0, [r4, #8]
 800a456:	2201      	movs	r2, #1
 800a458:	2109      	movs	r1, #9
 800a45a:	f7ff ff7d 	bl	800a358 <std>
 800a45e:	68e0      	ldr	r0, [r4, #12]
 800a460:	2202      	movs	r2, #2
 800a462:	2112      	movs	r1, #18
 800a464:	f7ff ff78 	bl	800a358 <std>
 800a468:	2301      	movs	r3, #1
 800a46a:	61a3      	str	r3, [r4, #24]
 800a46c:	e7d2      	b.n	800a414 <__sinit+0xc>
 800a46e:	bf00      	nop
 800a470:	0800abfc 	.word	0x0800abfc
 800a474:	0800a3a1 	.word	0x0800a3a1

0800a478 <__sfp>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	4607      	mov	r7, r0
 800a47c:	f7ff ffac 	bl	800a3d8 <__sfp_lock_acquire>
 800a480:	4b1e      	ldr	r3, [pc, #120]	; (800a4fc <__sfp+0x84>)
 800a482:	681e      	ldr	r6, [r3, #0]
 800a484:	69b3      	ldr	r3, [r6, #24]
 800a486:	b913      	cbnz	r3, 800a48e <__sfp+0x16>
 800a488:	4630      	mov	r0, r6
 800a48a:	f7ff ffbd 	bl	800a408 <__sinit>
 800a48e:	3648      	adds	r6, #72	; 0x48
 800a490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a494:	3b01      	subs	r3, #1
 800a496:	d503      	bpl.n	800a4a0 <__sfp+0x28>
 800a498:	6833      	ldr	r3, [r6, #0]
 800a49a:	b30b      	cbz	r3, 800a4e0 <__sfp+0x68>
 800a49c:	6836      	ldr	r6, [r6, #0]
 800a49e:	e7f7      	b.n	800a490 <__sfp+0x18>
 800a4a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4a4:	b9d5      	cbnz	r5, 800a4dc <__sfp+0x64>
 800a4a6:	4b16      	ldr	r3, [pc, #88]	; (800a500 <__sfp+0x88>)
 800a4a8:	60e3      	str	r3, [r4, #12]
 800a4aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4ae:	6665      	str	r5, [r4, #100]	; 0x64
 800a4b0:	f000 f847 	bl	800a542 <__retarget_lock_init_recursive>
 800a4b4:	f7ff ff96 	bl	800a3e4 <__sfp_lock_release>
 800a4b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a4bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4c0:	6025      	str	r5, [r4, #0]
 800a4c2:	61a5      	str	r5, [r4, #24]
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4cc:	f7ff fd44 	bl	8009f58 <memset>
 800a4d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4d8:	4620      	mov	r0, r4
 800a4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4dc:	3468      	adds	r4, #104	; 0x68
 800a4de:	e7d9      	b.n	800a494 <__sfp+0x1c>
 800a4e0:	2104      	movs	r1, #4
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	f7ff ff62 	bl	800a3ac <__sfmoreglue>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	6030      	str	r0, [r6, #0]
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d1d5      	bne.n	800a49c <__sfp+0x24>
 800a4f0:	f7ff ff78 	bl	800a3e4 <__sfp_lock_release>
 800a4f4:	230c      	movs	r3, #12
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	e7ee      	b.n	800a4d8 <__sfp+0x60>
 800a4fa:	bf00      	nop
 800a4fc:	0800abfc 	.word	0x0800abfc
 800a500:	ffff0001 	.word	0xffff0001

0800a504 <_fwalk_reent>:
 800a504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a508:	4606      	mov	r6, r0
 800a50a:	4688      	mov	r8, r1
 800a50c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a510:	2700      	movs	r7, #0
 800a512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a516:	f1b9 0901 	subs.w	r9, r9, #1
 800a51a:	d505      	bpl.n	800a528 <_fwalk_reent+0x24>
 800a51c:	6824      	ldr	r4, [r4, #0]
 800a51e:	2c00      	cmp	r4, #0
 800a520:	d1f7      	bne.n	800a512 <_fwalk_reent+0xe>
 800a522:	4638      	mov	r0, r7
 800a524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a528:	89ab      	ldrh	r3, [r5, #12]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d907      	bls.n	800a53e <_fwalk_reent+0x3a>
 800a52e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a532:	3301      	adds	r3, #1
 800a534:	d003      	beq.n	800a53e <_fwalk_reent+0x3a>
 800a536:	4629      	mov	r1, r5
 800a538:	4630      	mov	r0, r6
 800a53a:	47c0      	blx	r8
 800a53c:	4307      	orrs	r7, r0
 800a53e:	3568      	adds	r5, #104	; 0x68
 800a540:	e7e9      	b.n	800a516 <_fwalk_reent+0x12>

0800a542 <__retarget_lock_init_recursive>:
 800a542:	4770      	bx	lr

0800a544 <__retarget_lock_acquire_recursive>:
 800a544:	4770      	bx	lr

0800a546 <__retarget_lock_release_recursive>:
 800a546:	4770      	bx	lr

0800a548 <__swhatbuf_r>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	460e      	mov	r6, r1
 800a54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a550:	2900      	cmp	r1, #0
 800a552:	b096      	sub	sp, #88	; 0x58
 800a554:	4614      	mov	r4, r2
 800a556:	461d      	mov	r5, r3
 800a558:	da08      	bge.n	800a56c <__swhatbuf_r+0x24>
 800a55a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	602a      	str	r2, [r5, #0]
 800a562:	061a      	lsls	r2, r3, #24
 800a564:	d410      	bmi.n	800a588 <__swhatbuf_r+0x40>
 800a566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a56a:	e00e      	b.n	800a58a <__swhatbuf_r+0x42>
 800a56c:	466a      	mov	r2, sp
 800a56e:	f000 f9a7 	bl	800a8c0 <_fstat_r>
 800a572:	2800      	cmp	r0, #0
 800a574:	dbf1      	blt.n	800a55a <__swhatbuf_r+0x12>
 800a576:	9a01      	ldr	r2, [sp, #4]
 800a578:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a57c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a580:	425a      	negs	r2, r3
 800a582:	415a      	adcs	r2, r3
 800a584:	602a      	str	r2, [r5, #0]
 800a586:	e7ee      	b.n	800a566 <__swhatbuf_r+0x1e>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	2000      	movs	r0, #0
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	b016      	add	sp, #88	; 0x58
 800a590:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a594 <__smakebuf_r>:
 800a594:	898b      	ldrh	r3, [r1, #12]
 800a596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a598:	079d      	lsls	r5, r3, #30
 800a59a:	4606      	mov	r6, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	d507      	bpl.n	800a5b0 <__smakebuf_r+0x1c>
 800a5a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	6123      	str	r3, [r4, #16]
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	6163      	str	r3, [r4, #20]
 800a5ac:	b002      	add	sp, #8
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	ab01      	add	r3, sp, #4
 800a5b2:	466a      	mov	r2, sp
 800a5b4:	f7ff ffc8 	bl	800a548 <__swhatbuf_r>
 800a5b8:	9900      	ldr	r1, [sp, #0]
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f000 f895 	bl	800a6ec <_malloc_r>
 800a5c2:	b948      	cbnz	r0, 800a5d8 <__smakebuf_r+0x44>
 800a5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5c8:	059a      	lsls	r2, r3, #22
 800a5ca:	d4ef      	bmi.n	800a5ac <__smakebuf_r+0x18>
 800a5cc:	f023 0303 	bic.w	r3, r3, #3
 800a5d0:	f043 0302 	orr.w	r3, r3, #2
 800a5d4:	81a3      	strh	r3, [r4, #12]
 800a5d6:	e7e3      	b.n	800a5a0 <__smakebuf_r+0xc>
 800a5d8:	4b0d      	ldr	r3, [pc, #52]	; (800a610 <__smakebuf_r+0x7c>)
 800a5da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	6020      	str	r0, [r4, #0]
 800a5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e4:	81a3      	strh	r3, [r4, #12]
 800a5e6:	9b00      	ldr	r3, [sp, #0]
 800a5e8:	6163      	str	r3, [r4, #20]
 800a5ea:	9b01      	ldr	r3, [sp, #4]
 800a5ec:	6120      	str	r0, [r4, #16]
 800a5ee:	b15b      	cbz	r3, 800a608 <__smakebuf_r+0x74>
 800a5f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f000 f975 	bl	800a8e4 <_isatty_r>
 800a5fa:	b128      	cbz	r0, 800a608 <__smakebuf_r+0x74>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f023 0303 	bic.w	r3, r3, #3
 800a602:	f043 0301 	orr.w	r3, r3, #1
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	89a0      	ldrh	r0, [r4, #12]
 800a60a:	4305      	orrs	r5, r0
 800a60c:	81a5      	strh	r5, [r4, #12]
 800a60e:	e7cd      	b.n	800a5ac <__smakebuf_r+0x18>
 800a610:	0800a3a1 	.word	0x0800a3a1

0800a614 <_free_r>:
 800a614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a616:	2900      	cmp	r1, #0
 800a618:	d044      	beq.n	800a6a4 <_free_r+0x90>
 800a61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a61e:	9001      	str	r0, [sp, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	f1a1 0404 	sub.w	r4, r1, #4
 800a626:	bfb8      	it	lt
 800a628:	18e4      	addlt	r4, r4, r3
 800a62a:	f000 f97d 	bl	800a928 <__malloc_lock>
 800a62e:	4a1e      	ldr	r2, [pc, #120]	; (800a6a8 <_free_r+0x94>)
 800a630:	9801      	ldr	r0, [sp, #4]
 800a632:	6813      	ldr	r3, [r2, #0]
 800a634:	b933      	cbnz	r3, 800a644 <_free_r+0x30>
 800a636:	6063      	str	r3, [r4, #4]
 800a638:	6014      	str	r4, [r2, #0]
 800a63a:	b003      	add	sp, #12
 800a63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a640:	f000 b978 	b.w	800a934 <__malloc_unlock>
 800a644:	42a3      	cmp	r3, r4
 800a646:	d908      	bls.n	800a65a <_free_r+0x46>
 800a648:	6825      	ldr	r5, [r4, #0]
 800a64a:	1961      	adds	r1, r4, r5
 800a64c:	428b      	cmp	r3, r1
 800a64e:	bf01      	itttt	eq
 800a650:	6819      	ldreq	r1, [r3, #0]
 800a652:	685b      	ldreq	r3, [r3, #4]
 800a654:	1949      	addeq	r1, r1, r5
 800a656:	6021      	streq	r1, [r4, #0]
 800a658:	e7ed      	b.n	800a636 <_free_r+0x22>
 800a65a:	461a      	mov	r2, r3
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	b10b      	cbz	r3, 800a664 <_free_r+0x50>
 800a660:	42a3      	cmp	r3, r4
 800a662:	d9fa      	bls.n	800a65a <_free_r+0x46>
 800a664:	6811      	ldr	r1, [r2, #0]
 800a666:	1855      	adds	r5, r2, r1
 800a668:	42a5      	cmp	r5, r4
 800a66a:	d10b      	bne.n	800a684 <_free_r+0x70>
 800a66c:	6824      	ldr	r4, [r4, #0]
 800a66e:	4421      	add	r1, r4
 800a670:	1854      	adds	r4, r2, r1
 800a672:	42a3      	cmp	r3, r4
 800a674:	6011      	str	r1, [r2, #0]
 800a676:	d1e0      	bne.n	800a63a <_free_r+0x26>
 800a678:	681c      	ldr	r4, [r3, #0]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	6053      	str	r3, [r2, #4]
 800a67e:	4421      	add	r1, r4
 800a680:	6011      	str	r1, [r2, #0]
 800a682:	e7da      	b.n	800a63a <_free_r+0x26>
 800a684:	d902      	bls.n	800a68c <_free_r+0x78>
 800a686:	230c      	movs	r3, #12
 800a688:	6003      	str	r3, [r0, #0]
 800a68a:	e7d6      	b.n	800a63a <_free_r+0x26>
 800a68c:	6825      	ldr	r5, [r4, #0]
 800a68e:	1961      	adds	r1, r4, r5
 800a690:	428b      	cmp	r3, r1
 800a692:	bf04      	itt	eq
 800a694:	6819      	ldreq	r1, [r3, #0]
 800a696:	685b      	ldreq	r3, [r3, #4]
 800a698:	6063      	str	r3, [r4, #4]
 800a69a:	bf04      	itt	eq
 800a69c:	1949      	addeq	r1, r1, r5
 800a69e:	6021      	streq	r1, [r4, #0]
 800a6a0:	6054      	str	r4, [r2, #4]
 800a6a2:	e7ca      	b.n	800a63a <_free_r+0x26>
 800a6a4:	b003      	add	sp, #12
 800a6a6:	bd30      	pop	{r4, r5, pc}
 800a6a8:	20000f50 	.word	0x20000f50

0800a6ac <sbrk_aligned>:
 800a6ac:	b570      	push	{r4, r5, r6, lr}
 800a6ae:	4e0e      	ldr	r6, [pc, #56]	; (800a6e8 <sbrk_aligned+0x3c>)
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	6831      	ldr	r1, [r6, #0]
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	b911      	cbnz	r1, 800a6be <sbrk_aligned+0x12>
 800a6b8:	f000 f88c 	bl	800a7d4 <_sbrk_r>
 800a6bc:	6030      	str	r0, [r6, #0]
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f000 f887 	bl	800a7d4 <_sbrk_r>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	d00a      	beq.n	800a6e0 <sbrk_aligned+0x34>
 800a6ca:	1cc4      	adds	r4, r0, #3
 800a6cc:	f024 0403 	bic.w	r4, r4, #3
 800a6d0:	42a0      	cmp	r0, r4
 800a6d2:	d007      	beq.n	800a6e4 <sbrk_aligned+0x38>
 800a6d4:	1a21      	subs	r1, r4, r0
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f000 f87c 	bl	800a7d4 <_sbrk_r>
 800a6dc:	3001      	adds	r0, #1
 800a6de:	d101      	bne.n	800a6e4 <sbrk_aligned+0x38>
 800a6e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	20000f54 	.word	0x20000f54

0800a6ec <_malloc_r>:
 800a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f0:	1ccd      	adds	r5, r1, #3
 800a6f2:	f025 0503 	bic.w	r5, r5, #3
 800a6f6:	3508      	adds	r5, #8
 800a6f8:	2d0c      	cmp	r5, #12
 800a6fa:	bf38      	it	cc
 800a6fc:	250c      	movcc	r5, #12
 800a6fe:	2d00      	cmp	r5, #0
 800a700:	4607      	mov	r7, r0
 800a702:	db01      	blt.n	800a708 <_malloc_r+0x1c>
 800a704:	42a9      	cmp	r1, r5
 800a706:	d905      	bls.n	800a714 <_malloc_r+0x28>
 800a708:	230c      	movs	r3, #12
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	2600      	movs	r6, #0
 800a70e:	4630      	mov	r0, r6
 800a710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a714:	4e2e      	ldr	r6, [pc, #184]	; (800a7d0 <_malloc_r+0xe4>)
 800a716:	f000 f907 	bl	800a928 <__malloc_lock>
 800a71a:	6833      	ldr	r3, [r6, #0]
 800a71c:	461c      	mov	r4, r3
 800a71e:	bb34      	cbnz	r4, 800a76e <_malloc_r+0x82>
 800a720:	4629      	mov	r1, r5
 800a722:	4638      	mov	r0, r7
 800a724:	f7ff ffc2 	bl	800a6ac <sbrk_aligned>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	4604      	mov	r4, r0
 800a72c:	d14d      	bne.n	800a7ca <_malloc_r+0xde>
 800a72e:	6834      	ldr	r4, [r6, #0]
 800a730:	4626      	mov	r6, r4
 800a732:	2e00      	cmp	r6, #0
 800a734:	d140      	bne.n	800a7b8 <_malloc_r+0xcc>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	4631      	mov	r1, r6
 800a73a:	4638      	mov	r0, r7
 800a73c:	eb04 0803 	add.w	r8, r4, r3
 800a740:	f000 f848 	bl	800a7d4 <_sbrk_r>
 800a744:	4580      	cmp	r8, r0
 800a746:	d13a      	bne.n	800a7be <_malloc_r+0xd2>
 800a748:	6821      	ldr	r1, [r4, #0]
 800a74a:	3503      	adds	r5, #3
 800a74c:	1a6d      	subs	r5, r5, r1
 800a74e:	f025 0503 	bic.w	r5, r5, #3
 800a752:	3508      	adds	r5, #8
 800a754:	2d0c      	cmp	r5, #12
 800a756:	bf38      	it	cc
 800a758:	250c      	movcc	r5, #12
 800a75a:	4629      	mov	r1, r5
 800a75c:	4638      	mov	r0, r7
 800a75e:	f7ff ffa5 	bl	800a6ac <sbrk_aligned>
 800a762:	3001      	adds	r0, #1
 800a764:	d02b      	beq.n	800a7be <_malloc_r+0xd2>
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	442b      	add	r3, r5
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	e00e      	b.n	800a78c <_malloc_r+0xa0>
 800a76e:	6822      	ldr	r2, [r4, #0]
 800a770:	1b52      	subs	r2, r2, r5
 800a772:	d41e      	bmi.n	800a7b2 <_malloc_r+0xc6>
 800a774:	2a0b      	cmp	r2, #11
 800a776:	d916      	bls.n	800a7a6 <_malloc_r+0xba>
 800a778:	1961      	adds	r1, r4, r5
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	6025      	str	r5, [r4, #0]
 800a77e:	bf18      	it	ne
 800a780:	6059      	strne	r1, [r3, #4]
 800a782:	6863      	ldr	r3, [r4, #4]
 800a784:	bf08      	it	eq
 800a786:	6031      	streq	r1, [r6, #0]
 800a788:	5162      	str	r2, [r4, r5]
 800a78a:	604b      	str	r3, [r1, #4]
 800a78c:	4638      	mov	r0, r7
 800a78e:	f104 060b 	add.w	r6, r4, #11
 800a792:	f000 f8cf 	bl	800a934 <__malloc_unlock>
 800a796:	f026 0607 	bic.w	r6, r6, #7
 800a79a:	1d23      	adds	r3, r4, #4
 800a79c:	1af2      	subs	r2, r6, r3
 800a79e:	d0b6      	beq.n	800a70e <_malloc_r+0x22>
 800a7a0:	1b9b      	subs	r3, r3, r6
 800a7a2:	50a3      	str	r3, [r4, r2]
 800a7a4:	e7b3      	b.n	800a70e <_malloc_r+0x22>
 800a7a6:	6862      	ldr	r2, [r4, #4]
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	bf0c      	ite	eq
 800a7ac:	6032      	streq	r2, [r6, #0]
 800a7ae:	605a      	strne	r2, [r3, #4]
 800a7b0:	e7ec      	b.n	800a78c <_malloc_r+0xa0>
 800a7b2:	4623      	mov	r3, r4
 800a7b4:	6864      	ldr	r4, [r4, #4]
 800a7b6:	e7b2      	b.n	800a71e <_malloc_r+0x32>
 800a7b8:	4634      	mov	r4, r6
 800a7ba:	6876      	ldr	r6, [r6, #4]
 800a7bc:	e7b9      	b.n	800a732 <_malloc_r+0x46>
 800a7be:	230c      	movs	r3, #12
 800a7c0:	603b      	str	r3, [r7, #0]
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f000 f8b6 	bl	800a934 <__malloc_unlock>
 800a7c8:	e7a1      	b.n	800a70e <_malloc_r+0x22>
 800a7ca:	6025      	str	r5, [r4, #0]
 800a7cc:	e7de      	b.n	800a78c <_malloc_r+0xa0>
 800a7ce:	bf00      	nop
 800a7d0:	20000f50 	.word	0x20000f50

0800a7d4 <_sbrk_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4d06      	ldr	r5, [pc, #24]	; (800a7f0 <_sbrk_r+0x1c>)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4604      	mov	r4, r0
 800a7dc:	4608      	mov	r0, r1
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	f7f7 fe54 	bl	800248c <_sbrk>
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	d102      	bne.n	800a7ee <_sbrk_r+0x1a>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	b103      	cbz	r3, 800a7ee <_sbrk_r+0x1a>
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	bd38      	pop	{r3, r4, r5, pc}
 800a7f0:	20000f58 	.word	0x20000f58

0800a7f4 <__sread>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fc:	f000 f8a0 	bl	800a940 <_read_r>
 800a800:	2800      	cmp	r0, #0
 800a802:	bfab      	itete	ge
 800a804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a806:	89a3      	ldrhlt	r3, [r4, #12]
 800a808:	181b      	addge	r3, r3, r0
 800a80a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a80e:	bfac      	ite	ge
 800a810:	6563      	strge	r3, [r4, #84]	; 0x54
 800a812:	81a3      	strhlt	r3, [r4, #12]
 800a814:	bd10      	pop	{r4, pc}

0800a816 <__swrite>:
 800a816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81a:	461f      	mov	r7, r3
 800a81c:	898b      	ldrh	r3, [r1, #12]
 800a81e:	05db      	lsls	r3, r3, #23
 800a820:	4605      	mov	r5, r0
 800a822:	460c      	mov	r4, r1
 800a824:	4616      	mov	r6, r2
 800a826:	d505      	bpl.n	800a834 <__swrite+0x1e>
 800a828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a82c:	2302      	movs	r3, #2
 800a82e:	2200      	movs	r2, #0
 800a830:	f000 f868 	bl	800a904 <_lseek_r>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a83a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	4632      	mov	r2, r6
 800a842:	463b      	mov	r3, r7
 800a844:	4628      	mov	r0, r5
 800a846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a84a:	f000 b817 	b.w	800a87c <_write_r>

0800a84e <__sseek>:
 800a84e:	b510      	push	{r4, lr}
 800a850:	460c      	mov	r4, r1
 800a852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a856:	f000 f855 	bl	800a904 <_lseek_r>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	bf15      	itete	ne
 800a860:	6560      	strne	r0, [r4, #84]	; 0x54
 800a862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a86a:	81a3      	strheq	r3, [r4, #12]
 800a86c:	bf18      	it	ne
 800a86e:	81a3      	strhne	r3, [r4, #12]
 800a870:	bd10      	pop	{r4, pc}

0800a872 <__sclose>:
 800a872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a876:	f000 b813 	b.w	800a8a0 <_close_r>
	...

0800a87c <_write_r>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4d07      	ldr	r5, [pc, #28]	; (800a89c <_write_r+0x20>)
 800a880:	4604      	mov	r4, r0
 800a882:	4608      	mov	r0, r1
 800a884:	4611      	mov	r1, r2
 800a886:	2200      	movs	r2, #0
 800a888:	602a      	str	r2, [r5, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	f7f7 fdad 	bl	80023ea <_write>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d102      	bne.n	800a89a <_write_r+0x1e>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	b103      	cbz	r3, 800a89a <_write_r+0x1e>
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	20000f58 	.word	0x20000f58

0800a8a0 <_close_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d06      	ldr	r5, [pc, #24]	; (800a8bc <_close_r+0x1c>)
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	4608      	mov	r0, r1
 800a8aa:	602b      	str	r3, [r5, #0]
 800a8ac:	f7f7 fdb9 	bl	8002422 <_close>
 800a8b0:	1c43      	adds	r3, r0, #1
 800a8b2:	d102      	bne.n	800a8ba <_close_r+0x1a>
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	b103      	cbz	r3, 800a8ba <_close_r+0x1a>
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
 800a8bc:	20000f58 	.word	0x20000f58

0800a8c0 <_fstat_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4d07      	ldr	r5, [pc, #28]	; (800a8e0 <_fstat_r+0x20>)
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	602b      	str	r3, [r5, #0]
 800a8ce:	f7f7 fdb4 	bl	800243a <_fstat>
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	d102      	bne.n	800a8dc <_fstat_r+0x1c>
 800a8d6:	682b      	ldr	r3, [r5, #0]
 800a8d8:	b103      	cbz	r3, 800a8dc <_fstat_r+0x1c>
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	bd38      	pop	{r3, r4, r5, pc}
 800a8de:	bf00      	nop
 800a8e0:	20000f58 	.word	0x20000f58

0800a8e4 <_isatty_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d06      	ldr	r5, [pc, #24]	; (800a900 <_isatty_r+0x1c>)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	602b      	str	r3, [r5, #0]
 800a8f0:	f7f7 fdb3 	bl	800245a <_isatty>
 800a8f4:	1c43      	adds	r3, r0, #1
 800a8f6:	d102      	bne.n	800a8fe <_isatty_r+0x1a>
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	b103      	cbz	r3, 800a8fe <_isatty_r+0x1a>
 800a8fc:	6023      	str	r3, [r4, #0]
 800a8fe:	bd38      	pop	{r3, r4, r5, pc}
 800a900:	20000f58 	.word	0x20000f58

0800a904 <_lseek_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4d07      	ldr	r5, [pc, #28]	; (800a924 <_lseek_r+0x20>)
 800a908:	4604      	mov	r4, r0
 800a90a:	4608      	mov	r0, r1
 800a90c:	4611      	mov	r1, r2
 800a90e:	2200      	movs	r2, #0
 800a910:	602a      	str	r2, [r5, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	f7f7 fdac 	bl	8002470 <_lseek>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_lseek_r+0x1e>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_lseek_r+0x1e>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	20000f58 	.word	0x20000f58

0800a928 <__malloc_lock>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__malloc_lock+0x8>)
 800a92a:	f7ff be0b 	b.w	800a544 <__retarget_lock_acquire_recursive>
 800a92e:	bf00      	nop
 800a930:	20000f4c 	.word	0x20000f4c

0800a934 <__malloc_unlock>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__malloc_unlock+0x8>)
 800a936:	f7ff be06 	b.w	800a546 <__retarget_lock_release_recursive>
 800a93a:	bf00      	nop
 800a93c:	20000f4c 	.word	0x20000f4c

0800a940 <_read_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	; (800a960 <_read_r+0x20>)
 800a944:	4604      	mov	r4, r0
 800a946:	4608      	mov	r0, r1
 800a948:	4611      	mov	r1, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	602a      	str	r2, [r5, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f7f7 fd2e 	bl	80023b0 <_read>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_read_r+0x1e>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_read_r+0x1e>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20000f58 	.word	0x20000f58

0800a964 <_init>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	bf00      	nop
 800a968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96a:	bc08      	pop	{r3}
 800a96c:	469e      	mov	lr, r3
 800a96e:	4770      	bx	lr

0800a970 <_fini>:
 800a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a972:	bf00      	nop
 800a974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a976:	bc08      	pop	{r3}
 800a978:	469e      	mov	lr, r3
 800a97a:	4770      	bx	lr
